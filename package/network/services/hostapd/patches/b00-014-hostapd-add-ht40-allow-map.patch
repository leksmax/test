--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2633,6 +2633,90 @@ set:
 	return ret;
 }
 
+static int hostapd_2ghz_ht40_allow_map(struct hostapd_hw_modes *mode,
+				       char *buf, size_t buflen)
+{
+	int j, ret, len = 0;
+
+	for (j = 0; j < mode->num_channels; j++) {
+		struct hostapd_channel_data *chan = &mode->channels[j];
+		if (!(chan->flag & HOSTAPD_CHAN_DISABLED)) {
+			ret = os_snprintf(buf + len, buflen - len,
+					  "Channel: %d : %d HT40%c%c\n",
+					  chan->chan, chan->freq,
+					  (chan->flag & HOSTAPD_CHAN_HT40MINUS) ?
+						'-' : ' ',
+					  (chan->flag & HOSTAPD_CHAN_HT40PLUS) ?
+						'+' : ' ');
+			if (os_snprintf_error(buflen - len, ret))
+				return len;
+			len += ret;
+		}
+	}
+	return len;
+}
+
+static int hostapd_5ghz_ht40_allow_map(struct hostapd_hw_modes *mode,
+				       char *buf, size_t buflen)
+{
+	int j, k, ok, ret, len = 0, allowed[] = { 36, 44, 52, 60, 100, 108, 116, 124, 132, 140,
+						149, 157, 184, 192 };
+
+	for (j = 0; j < mode->num_channels; j++) {
+		struct hostapd_channel_data *chan = &mode->channels[j];
+
+		if ((chan->flag & HOSTAPD_CHAN_HT40MINUS) ||
+				(chan->flag & HOSTAPD_CHAN_HT40PLUS)) {
+			ok = 0;
+			for (k = 0; k < ARRAY_SIZE(allowed); k++) {
+				if (chan->chan < allowed[k])
+					break;
+				if (chan->chan == allowed[k]) {
+					ok = 1;
+					break;
+				}
+			}
+
+			if (!ok && chan->chan != (allowed[k - 1] + 4))
+				ok = -1;
+
+			if (ok == 1 && (mode->channels[j + 1].flag &
+					HOSTAPD_CHAN_DISABLED))
+				ok = -1;
+
+			if (ok != -1)
+				ret = os_snprintf(buf + len, buflen - len,
+						  "Channel: %d : %d HT40%s\n",
+						  chan->chan, chan->freq,
+						  ok == 1 ? "+" : "-");
+
+			if (os_snprintf_error(buflen - len, ret))
+				return len;
+			len += ret;
+		}
+	}
+	return len;
+}
+
+static int hostapd_ctrl_iface_ht40_allow_map(struct hostapd_iface *iface,
+					     char *buf, size_t buflen)
+{
+	struct hostapd_data *hapd = iface->bss[0];
+	struct hostapd_hw_modes *mode;
+	int len = 0;
+	u16 num_modes, flags;
+	u8 dfs_domain;
+
+	mode = hostapd_get_hw_feature_data(hapd, &num_modes, &flags,
+					   &dfs_domain);
+
+	if (mode->mode != HOSTAPD_MODE_IEEE80211A)
+		len = hostapd_2ghz_ht40_allow_map(mode, buf, buflen);
+	else
+		len = hostapd_5ghz_ht40_allow_map(mode, buf, buflen);
+
+	return len;
+}
 
 static int hostapd_ctrl_iface_remove_neighbor(struct hostapd_data *hapd,
 					      char *buf)
@@ -3181,6 +3265,10 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "SIGNAL_TXRATE", 13) == 0) {
 		if (hostapd_ctrl_iface_signal_txrate(hapd, buf + 13))
 			reply_len = -1;
+	} else if (os_strcmp(buf, "HT40_ALLOW_MAP") == 0) {
+		reply_len = hostapd_ctrl_iface_ht40_allow_map(hapd->iface,
+							      reply,
+							      reply_size);
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1487,6 +1487,12 @@ static int hostapd_cli_cmd_blacklist_add
 	return wpa_ctrl_command(ctrl, buf);
 }
 
+static int hostapd_cli_cmd_ht40_allow_map(struct wpa_ctrl *ctrl,
+					  int argc, char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "HT40_ALLOW_MAP");
+}
+
 static int hostapd_cli_cmd_poll_client(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
 	char buf[64];
@@ -1682,6 +1688,8 @@ static const struct hostapd_cli_cmd host
 	{ "signal_txrate", hostapd_cli_cmd_signal_txrate, NULL,
 	  "= set signal tx rate parameters: signal_txrate "
 	  "LOW=<> HIGH=<>" },
+	{ "ht40_allow_map", hostapd_cli_cmd_ht40_allow_map, NULL,
+	  "= show ht40 allow map status" },
 	{ NULL, NULL, NULL, NULL }
 };
 
