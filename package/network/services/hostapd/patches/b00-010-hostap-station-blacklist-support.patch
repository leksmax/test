--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2684,6 +2684,79 @@ static int hostapd_ctrl_driver_flags(str
 	return pos - buf;
 }
 
+static int hostapd_ctrl_iface_blacklist_clear(struct hostapd_data *hapd)
+{
+	struct mac_blacklist_entry *blacklist, *prev;
+	int i, len =0, ret = 0;
+
+	if (hapd == NULL)
+		return -1;
+
+	wpa_msg(hapd->msg_ctx, MSG_INFO, "BLACKLIST_CLEAR");
+	for (i = 0; i < STA_HASH_SIZE; i++) {
+		blacklist = hapd->blacklist_hash[i];
+		while (blacklist) {
+			prev = blacklist;
+			wpa_msg(hapd->msg_ctx, MSG_INFO, "removed " MACSTR
+				"from blacklist", MAC2STR(blacklist->addr));
+			blacklist =  blacklist->next;
+			os_free(prev);
+		}
+		hapd->blacklist_hash[i] = NULL;
+	}
+
+	return 0;
+}
+
+static int hostapd_ctrl_iface_blacklist_show(struct hostapd_data *hapd,
+					     char *buf, size_t buflen)
+{
+	struct mac_blacklist_entry *blacklist;
+	int i, len =0, ret = 0;
+
+	if (hapd == NULL)
+		return -1;
+
+	wpa_msg(hapd->msg_ctx, MSG_INFO, "BLACKLIST_SHOW");
+	for (i = 0; i < STA_HASH_SIZE; i++) {
+		blacklist = hapd->blacklist_hash[i];
+		while (blacklist) {
+			ret = os_snprintf(buf + len, buflen - len, MACSTR "\n",
+					  MAC2STR(blacklist->addr));
+			if (ret < 0 || (size_t) ret >= buflen - len)
+				return len;
+
+			len += ret;
+			blacklist =  blacklist->next;
+		}
+	}
+
+	return len;
+}
+
+static int hostapd_ctrl_iface_blacklist_del(struct hostapd_data *hapd, char *txtaddr)
+{
+	u8 addr[ETH_ALEN];
+
+	wpa_msg(hapd->msg_ctx, MSG_INFO, "BLACKLIST_DEL %s", txtaddr);
+
+	if (hwaddr_aton(txtaddr, addr))
+		return -1;
+
+	return hostapd_blacklist_del(hapd, addr);
+}
+
+static int hostapd_ctrl_iface_blacklist_add(struct hostapd_data *hapd, char *txtaddr)
+{
+	u8 addr[ETH_ALEN];
+
+	wpa_msg(hapd->msg_ctx, MSG_INFO, "BLACKLIST_ADD %s", txtaddr);
+
+	if (hwaddr_aton(txtaddr, addr))
+		return -1;
+
+	return hostapd_blacklist_add(hapd, addr);
+}
 
 static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 					      char *buf, char *reply,
@@ -3047,6 +3120,22 @@ static int hostapd_ctrl_iface_receive_pr
 		if (hostapd_dpp_pkex_remove(hapd, buf + 16) < 0)
 			reply_len = -1;
 #endif /* CONFIG_DPP */
+	} else if(os_strncmp(buf, "BLACKLIST_ADD ", 14) == 0) {
+		if (hostapd_ctrl_iface_blacklist_add(hapd, buf + 14))
+			reply_len = -1;
+	} else if(os_strncmp(buf, "BLACKLIST_DEL ", 14) == 0) {
+		if (hostapd_ctrl_iface_blacklist_del(hapd, buf + 14))
+			reply_len = -1;
+	} else if(os_strncmp(buf, "BLACKLIST_SHOW", 14) == 0) {
+		reply_len = hostapd_ctrl_iface_blacklist_show(hapd,
+							      reply, reply_size);
+		if (!reply_len) {
+			os_memcpy(reply, "EMPTY\n", 6);
+			reply_len = 6;
+		}
+	} else if(os_strncmp(buf, "BLACKLIST_CLEAR", 15) == 0) {
+		if (hostapd_ctrl_iface_blacklist_clear(hapd))
+			reply_len = -1;
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
 		reply_len = 16;
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1435,6 +1435,57 @@ static int hostapd_cli_cmd_dpp_pkex_remo
 
 #endif /* CONFIG_DPP */
 
+static int hostapd_cli_cmd_blacklist_clear(struct wpa_ctrl *ctrl, int argc,
+					   char *argv[])
+{
+	char buf[64];
+
+	if (argc > 1)
+		printf("Invalid blacklist_clear command - No argument is required\n");
+
+	os_snprintf(buf, sizeof(buf), "BLACKLIST_CLEAR");
+	return wpa_ctrl_command(ctrl, buf);
+}
+
+static int hostapd_cli_cmd_blacklist_show(struct wpa_ctrl *ctrl, int argc,
+					  char *argv[])
+{
+	char buf[64];
+
+	if (argc > 1)
+		printf("Invalid blacklist_show command - No argument is required\n");
+
+	os_snprintf(buf, sizeof(buf), "BLACKLIST_SHOW");
+	return wpa_ctrl_command(ctrl, buf);
+}
+
+static int hostapd_cli_cmd_blacklist_del(struct wpa_ctrl *ctrl, int argc,
+					 char *argv[])
+{
+	char buf[64];
+
+	if (argc != 1) {
+		printf("Invalid blacklist_del command - STA address is required\n");
+		return -1;
+	}
+
+	os_snprintf(buf, sizeof(buf), "BLACKLIST_DEL %s", argv[0]);
+	return wpa_ctrl_command(ctrl, buf);
+}
+
+static int hostapd_cli_cmd_blacklist_add(struct wpa_ctrl *ctrl, int argc,
+					 char *argv[])
+{
+	char buf[64];
+
+	if (argc != 1) {
+		printf("Invalid blacklist_add command - STA address is required\n");
+		return -1;
+	}
+
+	os_snprintf(buf, sizeof(buf), "BLACKLIST_ADD %s", argv[0]);
+	return wpa_ctrl_command(ctrl, buf);
+}
 
 static int hostapd_cli_cmd_poll_client(struct wpa_ctrl *ctrl, int argc, char *argv[])
 {
@@ -1607,6 +1658,14 @@ static const struct hostapd_cli_cmd host
 #endif /* CONFIG_DPP */
 	{ "poll_client", hostapd_cli_cmd_poll_client, NULL,
 	  "<addr> = send QOS null frame to a station"},
+	{ "blacklist_add", hostapd_cli_cmd_blacklist_add, NULL,
+	  "<addr> = blacklist a station from AP "},
+	{ "blacklist_del", hostapd_cli_cmd_blacklist_del, NULL,
+	  "<addr> = Delete blacklisted station from AP "},
+	{ "blacklist_show", hostapd_cli_cmd_blacklist_show, NULL,
+	  "Show blacklisted mac address list "},
+	{ "blacklist_clear", hostapd_cli_cmd_blacklist_clear, NULL,
+	  "clear blacklist mac address list "},
 	{ NULL, NULL, NULL, NULL }
 };
 
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -879,6 +879,12 @@ void handle_probe_req(struct hostapd_dat
 		sta_track_add(hapd->iface, mgmt->sa, ssi_signal);
 	ie_len = len - IEEE80211_HDRLEN;
 
+	if (mac_blacklist_get(hapd, mgmt->sa)) {
+		wpa_msg(hapd->msg_ctx, MSG_DEBUG, "Ignoring probe request "
+			MACSTR "due to blacklist", MAC2STR(mgmt->sa));
+		return;
+	}
+
 	for (i = 0; hapd->probereq_cb && i < hapd->num_probereq_cb; i++)
 		if (hapd->probereq_cb[i].cb(hapd->probereq_cb[i].ctx,
 					    mgmt->sa, mgmt->da, mgmt->bssid,
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -3389,6 +3389,74 @@ hostapd_switch_channel_fallback(struct h
 
 #endif /* NEED_AP_MLME */
 
+struct mac_blacklist_entry * mac_blacklist_get(struct hostapd_data *hapd,
+						   const u8 *addr)
+{
+	struct mac_blacklist_entry *blacklist;
+
+	if (hapd == NULL || addr == NULL)
+		return NULL;
+
+	blacklist = hapd->blacklist_hash[STA_HASH(addr)];
+	while (blacklist != NULL && os_memcmp(blacklist->addr, addr, 6) != 0)
+		blacklist = blacklist->next;
+
+	return blacklist;
+}
+
+int hostapd_blacklist_del(struct hostapd_data *hapd, const u8 *addr)
+{
+	struct mac_blacklist_entry *blacklist, *prev = NULL;
+
+	if (hapd == NULL || addr == NULL)
+		return -1;
+
+	blacklist = hapd->blacklist_hash[STA_HASH(addr)];
+	while (blacklist) {
+		if (os_memcmp(blacklist->addr, addr, 6) == 0) {
+			if (prev == NULL) {
+				hapd->blacklist_hash[STA_HASH(addr)] = blacklist->next;
+			} else {
+				prev->next = blacklist->next;
+			}
+			hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
+				       HOSTAPD_LEVEL_INFO, "Deleted " MACSTR
+				       "from AP's blacklist", MAC2STR(addr));
+			os_free(blacklist);
+			return 0;
+		}
+		prev = blacklist;
+		blacklist = blacklist->next;
+	}
+
+	return -1;
+}
+
+int hostapd_blacklist_add(struct hostapd_data *hapd, const u8 *addr)
+{
+	struct mac_blacklist_entry *blacklist;
+
+	if (hapd == NULL || addr == NULL)
+		return -1;
+
+	blacklist = mac_blacklist_get(hapd, addr);
+
+	if (blacklist)
+		return 0;
+
+	blacklist = os_zalloc(sizeof(*blacklist));
+
+	if (blacklist == NULL)
+		return -ENOMEM;
+
+	os_memcpy(blacklist->addr, addr, ETH_ALEN);
+
+	blacklist->next = hapd->blacklist_hash[STA_HASH(addr)];
+	hapd->blacklist_hash[STA_HASH(addr)] = blacklist;
+
+	return 0;
+}
+
 
 struct hostapd_data * hostapd_get_iface(struct hapd_interfaces *interfaces,
 					const char *ifname)
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -116,6 +116,11 @@ struct hostapd_neighbor_entry {
 	int stationary;
 };
 
+struct mac_blacklist_entry {
+	struct mac_blacklist_entry *next;
+	u8 addr[ETH_ALEN];
+};
+
 /**
  * struct hostapd_data - hostapd per-BSS data structure
  */
@@ -361,6 +366,7 @@ struct hostapd_data {
 	unsigned int dpp_ignore_netaccesskey_mismatch:1;
 #endif /* CONFIG_TESTING_OPTIONS */
 #endif /* CONFIG_DPP */
+	struct mac_blacklist_entry *blacklist_hash[STA_HASH_SIZE];
 };
 
 
@@ -562,6 +568,10 @@ hostapd_switch_channel_fallback(struct h
 void hostapd_cleanup_cs_params(struct hostapd_data *hapd);
 void hostapd_periodic_iface(struct hostapd_iface *iface);
 int hostapd_owe_trans_get_info(struct hostapd_data *hapd);
+int hostapd_blacklist_add(struct hostapd_data *hapd, const u8 *addr);
+struct mac_blacklist_entry * mac_blacklist_get(struct hostapd_data *hapd,
+                                                   const u8 *addr);
+int hostapd_blacklist_del(struct hostapd_data *hapd, const u8 *addr);
 
 /* utils.c */
 int hostapd_register_probereq_cb(struct hostapd_data *hapd,
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1691,6 +1691,12 @@ static void handle_auth(struct hostapd_d
 	}
 #endif /* CONFIG_NO_RC4 */
 
+	if (mac_blacklist_get(hapd, mgmt->sa)) {
+		wpa_msg(hapd->msg_ctx, MSG_DEBUG, "Ignoring auth from "
+			MACSTR "due to blacklist ", MAC2STR(mgmt->sa));
+		resp = WLAN_STATUS_AP_UNABLE_TO_HANDLE_NEW_STA;
+		goto fail;
+	}
 	if (hapd->tkip_countermeasures) {
 		resp = WLAN_REASON_MICHAEL_MIC_FAILURE;
 		goto fail;
@@ -3095,6 +3101,13 @@ static void handle_assoc(struct hostapd_
 		pos = mgmt->u.assoc_req.variable;
 	}
 
+	if (mac_blacklist_get(hapd, mgmt->sa)) {
+		wpa_msg(hapd->msg_ctx, MSG_DEBUG, "Ignoring assoc request from "
+			MACSTR "due to blacklist ", MAC2STR(mgmt->sa));
+		resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+		goto fail;
+	}
+
 	sta = ap_get_sta(hapd, mgmt->sa);
 #ifdef CONFIG_IEEE80211R_AP
 	if (sta && sta->auth_alg == WLAN_AUTH_FT &&
