--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -131,6 +131,7 @@ static const char * nl80211_command_to_s
 	C2S(NL80211_CMD_SET_QOS_MAP)
 	C2S(NL80211_CMD_ADD_TX_TS)
 	C2S(NL80211_CMD_DEL_TX_TS)
+	C2S(NL80211_CMD_RX_H_ACTION_NOTIFY)
 	default:
 		return "NL80211_CMD_UNKNOWN";
 	}
@@ -1286,6 +1287,33 @@ static void nl80211_new_peer_candidate(s
 	wpa_supplicant_event(drv->ctx, EVENT_NEW_PEER_CANDIDATE, &data);
 }
 
+static void nl80211_rx_h_action_event(struct wpa_driver_nl80211_data *drv,
+				      struct nlattr **tb)
+{
+	u8 *addr;
+
+	if (tb[NL80211_ATTR_MAC] == NULL ||
+	    (tb[NL80211_ATTR_CHANNEL_WIDTH] == NULL &&
+	    tb[NL80211_ATTR_NSS] == NULL && tb[NL80211_ATTR_SMPS_MODE] == NULL))
+		return;
+
+	addr = nla_data(tb[NL80211_ATTR_MAC]);
+
+	if (tb[NL80211_ATTR_SMPS_MODE])
+		wpa_msg(drv->ctx, MSG_INFO, "STA-SMPS-MODE-MODIFIED " MACSTR
+			" smps mode=%u", MAC2STR(addr),
+			nla_get_u32(tb[NL80211_ATTR_SMPS_MODE]));
+
+	if (tb[NL80211_ATTR_CHANNEL_WIDTH])
+		wpa_msg(drv->ctx, MSG_INFO, "STA-WIDTH-MODE-MODIFIED " MACSTR
+			" width=%u", MAC2STR(addr),
+			nla_get_u32(tb[NL80211_ATTR_CHANNEL_WIDTH]));
+
+	if (tb[NL80211_ATTR_NSS])
+		wpa_msg(drv->ctx, MSG_INFO, "STA-RX-NSS-MODIFIED " MACSTR
+			" rx_nss=%u", MAC2STR(addr),
+			nla_get_u32(tb[NL80211_ATTR_NSS]));
+}
 
 static void nl80211_new_station_event(struct wpa_driver_nl80211_data *drv,
 				      struct i802_bss *bss,
@@ -2371,6 +2399,9 @@ static void do_process_drv_event(struct
 	case NL80211_CMD_NEW_PEER_CANDIDATE:
 		nl80211_new_peer_candidate(drv, tb);
 		break;
+	case NL80211_CMD_RX_H_ACTION_NOTIFY:
+		nl80211_rx_h_action_event(drv, tb);
+		break;
 	default:
 		wpa_dbg(drv->ctx, MSG_DEBUG, "nl80211: Ignored unknown event "
 			"(cmd=%d)", cmd);
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -945,6 +945,12 @@
  *	does not result in a change for the current association. Currently,
  *	only the %NL80211_ATTR_IE data is used and updated with this command.
  *
+ * @NL80211_CMD_RX_H_ACTION_NOTIFY: An event that indicates station's
+ *	ht opmode or vht opmode changes. This will use &NL80211_ATTR_SMPS_MODE,
+ *	&NL80211_ATTR_CHANNEL_WIDTH, &NL80211_ATTR_NSS to indimate the event to
+ *	userspace.
+.
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1144,6 +1150,9 @@ enum nl80211_commands {
 
 	NL80211_CMD_UPDATE_CONNECT_PARAMS,
 
+	NL80211_CMD_SET_PMK,
+	NL80211_CMD_DEL_PMK,
+	NL80211_CMD_RX_H_ACTION_NOTIFY,
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
@@ -2081,6 +2090,9 @@ enum nl80211_commands {
  * @NL80211_ATTR_PMK: PMK for the PMKSA identified by %NL80211_ATTR_PMKID.
  *	This is used with @NL80211_CMD_SET_PMKSA.
  *
+ * @NL80211_ATTR_NSS: Station's New/updated  NSS value notified using this
+ *	u8 attribute. This is used with @NL80211_CMD_RX_H_ACTION_NOTIFY
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -2500,6 +2512,14 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_PMK,
 
+	NL80211_ATTR_SCHED_SCAN_MULTI,
+        NL80211_ATTR_SCHED_SCAN_MAX_REQS,
+
+        NL80211_ATTR_WANT_1X_4WAY_HS,
+        NL80211_ATTR_PMKR0_NAME,
+        NL80211_ATTR_PORT_AUTHORIZED,
+
+	NL80211_ATTR_NSS,
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
