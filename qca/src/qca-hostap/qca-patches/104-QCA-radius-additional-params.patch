diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index c6768f6..a177892 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2470,6 +2470,20 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->radius->acct_server->shared_secret_len = len;
 	} else if (os_strcmp(buf, "radius_retry_primary_interval") == 0) {
 		bss->radius->retry_primary_interval = atoi(pos);
+	} else if (os_strcmp(buf, "radius_server_retries") == 0) {
+		bss->radius->radius_server_retries = atoi(pos);
+		if((bss->radius->radius_server_retries < 0 ) || (bss->radius->radius_server_retries > 10 )){
+			wpa_printf(MSG_ERROR, "Line %d: radius->radius_server_retries '%d'",
+				line,bss->radius->radius_server_retries);
+			return 1;
+		}
+	}else if (os_strcmp(buf, "radius_max_retry_wait") == 0) {
+		bss->radius->radius_max_retry_wait = atoi(pos);
+		if((bss->radius->radius_max_retry_wait < 1 ) || (bss->radius->radius_max_retry_wait > 120 )){
+			wpa_printf(MSG_ERROR, "Line %d: radius->radius_max_retry_wait '%d'",
+				line,bss->radius->radius_max_retry_wait);
+			return 1;
+		}
 	} else if (os_strcmp(buf, "radius_acct_interim_interval") == 0) {
 		bss->acct_interim_interval = atoi(pos);
 	} else if (os_strcmp(buf, "radius_request_cui") == 0) {
@@ -2653,6 +2667,13 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 	} else if (os_strcmp(buf, "peerkey") == 0) {
 		wpa_printf(MSG_INFO,
 			   "Line %d: Obsolete peerkey parameter ignored", line);
+        } else if (os_strcmp(buf, "identity_request_retry_interval") == 0) {
+                bss->identity_request_retry_interval = atoi(pos);
+                if((bss->identity_request_retry_interval < 0 ) || (bss->identity_request_retry_interval > 200 )){
+                        wpa_printf(MSG_ERROR, "Line %d: Invalid identity_request_retry_interval '%d'",
+                                line,bss->identity_request_retry_interval);
+                        return 1;
+                }
 #ifdef CONFIG_IEEE80211R_AP
 	} else if (os_strcmp(buf, "mobility_domain") == 0) {
 		if (os_strlen(pos) != 2 * MOBILITY_DOMAIN_ID_LEN ||
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index 07310f9..4234cf1 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -20,6 +20,8 @@
 #include "sta_info.h"
 #include "ap_config.h"
 
+#define RADIUS_CLIENT_MAX_RETRIES 10
+#define RADIUS_CLIENT_MAX_WAIT 120
 
 static void hostapd_config_free_vlan(struct hostapd_bss_config *bss)
 {
@@ -96,6 +98,7 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 
 	/* Set to -1 as defaults depends on HT in setup */
 	bss->wmm_enabled = -1;
+	bss->identity_request_retry_interval = 0;
 
 #ifdef CONFIG_IEEE80211R_AP
 	bss->ft_over_ds = 1;
@@ -108,6 +111,8 @@ void hostapd_config_defaults_bss(struct hostapd_bss_config *bss)
 	bss->radius_das_time_window = 300;
 
 	bss->sae_anti_clogging_threshold = 5;
+	bss->radius->radius_server_retries = RADIUS_CLIENT_MAX_RETRIES;
+	bss->radius->radius_max_retry_wait = RADIUS_CLIENT_MAX_WAIT;
 
 	bss->gas_frag_limit = 1400;
 
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 89bf289..39124d1 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -337,6 +337,7 @@ struct hostapd_bss_config {
 	int rsn_pairwise;
 	int rsn_preauth;
 	char *rsn_preauth_interfaces;
+        int identity_request_retry_interval;
 
 #ifdef CONFIG_IEEE80211R_AP
 	/* IEEE 802.11r - Fast BSS Transition */
diff --git a/src/ap/ieee802_1x.c b/src/ap/ieee802_1x.c
index 793d381..67a33f3 100644
--- a/src/ap/ieee802_1x.c
+++ b/src/ap/ieee802_1x.c
@@ -2244,6 +2244,10 @@ int ieee802_1x_init(struct hostapd_data *hapd)
 	conf.fragment_size = hapd->conf->fragment_size;
 	conf.pwd_group = hapd->conf->pwd_group;
 	conf.pbc_in_m1 = hapd->conf->pbc_in_m1;
+	if ( hapd->conf->identity_request_retry_interval ) {
+		conf.identity_request_retry_interval= hapd->conf->identity_request_retry_interval;
+	}
+
 	if (hapd->conf->server_id) {
 		conf.server_id = (const u8 *) hapd->conf->server_id;
 		conf.server_id_len = os_strlen(hapd->conf->server_id);
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index 22f33dd..d473382 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -169,6 +169,7 @@ struct wpa_auth_config {
 	int rsn_pairwise;
 	int rsn_preauth;
 	int eapol_version;
+        int identity_request_retry_interval;
 	int wmm_enabled;
 	int wmm_uapsd;
 	int disable_pmksa_caching;
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index 98133a0..debfe69 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -56,6 +56,7 @@ static void hostapd_wpa_auth_conf(struct hostapd_bss_config *conf,
 	wconf->wmm_uapsd = conf->wmm_uapsd;
 	wconf->disable_pmksa_caching = conf->disable_pmksa_caching;
 	wconf->okc = conf->okc;
+	wconf->identity_request_retry_interval= conf->identity_request_retry_interval;
 #ifdef CONFIG_IEEE80211W
 	wconf->ieee80211w = conf->ieee80211w;
 	wconf->group_mgmt_cipher = conf->group_mgmt_cipher;
diff --git a/src/ap/wpa_auth_i.h b/src/ap/wpa_auth_i.h
index befa800..a3e47b2 100644
--- a/src/ap/wpa_auth_i.h
+++ b/src/ap/wpa_auth_i.h
@@ -143,6 +143,7 @@ struct wpa_state_machine {
 	size_t fils_key_auth_len;
 	unsigned int fils_completed:1;
 #endif /* CONFIG_FILS */
+        int identity_request_retry_interval;
 
 #ifdef CONFIG_TESTING_OPTIONS
 	void (*eapol_status_cb)(void *ctx1, void *ctx2);
@@ -219,6 +220,7 @@ struct wpa_authenticator {
 #ifdef CONFIG_P2P
 	struct bitfield *ip_pool;
 #endif /* CONFIG_P2P */
+	int identity_request_retry_interval;
 };
 
 
diff --git a/src/ap/wpa_auth_ie.c b/src/ap/wpa_auth_ie.c
index 0196d00..d051367 100644
--- a/src/ap/wpa_auth_ie.c
+++ b/src/ap/wpa_auth_ie.c
@@ -833,6 +833,9 @@ int wpa_validate_wpa_ie(struct wpa_authenticator *wpa_auth,
 	}
 	os_memcpy(sm->wpa_ie, wpa_ie, wpa_ie_len);
 	sm->wpa_ie_len = wpa_ie_len;
+	if(wpa_auth->conf.identity_request_retry_interval){
+		sm->identity_request_retry_interval = wpa_auth->conf.identity_request_retry_interval; 
+	}
 
 	return WPA_IE_OK;
 }
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index b7fa563..c4b6901 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -821,6 +821,10 @@ struct ieee80211_mgmt {
 			 * FH Params, DS Params, CF Params, IBSS Params, TIM */
 			u8 variable[];
 		} STRUCT_PACKED beacon;
+                struct {
+                        /* only variable items: SSID, Supported rates */
+                        u8 variable[0];
+                } STRUCT_PACKED probe_req;
 		/* probe_req: only variable items: SSID, Supported rates */
 		struct {
 			u8 timestamp[8];
diff --git a/src/eap_peer/eap_i.h b/src/eap_peer/eap_i.h
index 6ab2483..fb93959 100644
--- a/src/eap_peer/eap_i.h
+++ b/src/eap_peer/eap_i.h
@@ -370,6 +370,8 @@ struct eap_sm {
 	unsigned int waiting_ext_cert_check:1;
 
 	struct dl_list erp_keys; /* struct eap_erp_key */
+	int identity_request_retry_interval;
+
 };
 
 const u8 * eap_get_config_identity(struct eap_sm *sm, size_t *len);
diff --git a/src/eap_server/eap.h b/src/eap_server/eap.h
index c67fa82..43e6e2d 100644
--- a/src/eap_server/eap.h
+++ b/src/eap_server/eap.h
@@ -133,6 +133,7 @@ struct eap_config {
 	int erp;
 	unsigned int tls_session_lifetime;
 	unsigned int tls_flags;
+        int identity_request_retry_interval;
 
 #ifdef CONFIG_TESTING_OPTIONS
 	u32 tls_test_flags;
diff --git a/src/eap_server/eap_i.h b/src/eap_server/eap_i.h
index 3d6f8d5..d06881c 100644
--- a/src/eap_server/eap_i.h
+++ b/src/eap_server/eap_i.h
@@ -212,6 +212,7 @@ struct eap_sm {
 	int erp;
 	unsigned int tls_session_lifetime;
 	unsigned int tls_flags;
+        int identity_request_retry_interval;
 
 #ifdef CONFIG_TESTING_OPTIONS
 	u32 tls_test_flags;
diff --git a/src/eap_server/eap_server.c b/src/eap_server/eap_server.c
index 9706e25..a6c4c94 100644
--- a/src/eap_server/eap_server.c
+++ b/src/eap_server/eap_server.c
@@ -311,9 +311,14 @@ SM_STATE(EAP, IDLE)
 {
 	SM_ENTRY(EAP, IDLE);
 
-	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
-		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
-		sm->methodTimeout);
+	if(sm->identity_request_retry_interval) {
+		sm->eap_if.retransWhile = sm->identity_request_retry_interval ;
+	} else { 
+		sm->eap_if.retransWhile = eap_sm_calculateTimeout(
+			sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
+			sm->methodTimeout);
+	}
+	wpa_printf(MSG_DEBUG, "identity_request_retry_interval (%d) ",sm->eap_if.retransWhile);
 }
 
 
@@ -996,9 +1001,14 @@ SM_STATE(EAP, IDLE2)
 {
 	SM_ENTRY(EAP, IDLE2);
 
-	sm->eap_if.retransWhile = eap_sm_calculateTimeout(
-		sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
-		sm->methodTimeout);
+	if(sm->identity_request_retry_interval) {
+		sm->eap_if.retransWhile = sm->identity_request_retry_interval ;
+	} else { 
+		sm->eap_if.retransWhile = eap_sm_calculateTimeout(
+			sm, sm->retransCount, sm->eap_if.eapSRTT, sm->eap_if.eapRTTVAR,
+			sm->methodTimeout);
+	}
+	wpa_printf(MSG_DEBUG, "identity_request_retry_interval (%d) ",sm->eap_if.retransWhile);
 }
 
 
@@ -1869,6 +1879,9 @@ struct eap_sm * eap_server_sm_init(void *eapol_ctx,
 	sm->erp = conf->erp;
 	sm->tls_session_lifetime = conf->tls_session_lifetime;
 	sm->tls_flags = conf->tls_flags;
+        if ( conf->identity_request_retry_interval ) {
+                sm->identity_request_retry_interval = conf->identity_request_retry_interval ;
+        }
 
 #ifdef CONFIG_TESTING_OPTIONS
 	sm->tls_test_flags = conf->tls_test_flags;
diff --git a/src/eapol_auth/eapol_auth_sm.c b/src/eapol_auth/eapol_auth_sm.c
index 36074d3..ede2311 100644
--- a/src/eapol_auth/eapol_auth_sm.c
+++ b/src/eapol_auth/eapol_auth_sm.c
@@ -849,6 +849,9 @@ eapol_auth_alloc(struct eapol_authenticator *eapol, const u8 *addr,
 	eap_conf.erp = eapol->conf.erp;
 	eap_conf.tls_session_lifetime = eapol->conf.tls_session_lifetime;
 	eap_conf.tls_flags = eapol->conf.tls_flags;
+        if(eapol->conf.identity_request_retry_interval) {
+                eap_conf.identity_request_retry_interval = eapol->conf.identity_request_retry_interval;
+        }
 	sm->eap = eap_server_sm_init(sm, &eapol_cb, &eap_conf);
 	if (sm->eap == NULL) {
 		eapol_auth_free(sm);
@@ -1235,6 +1238,7 @@ static int eapol_auth_conf_clone(struct eapol_auth_config *dst,
 	dst->tnc = src->tnc;
 	dst->wps = src->wps;
 	dst->fragment_size = src->fragment_size;
+        dst->identity_request_retry_interval= src->identity_request_retry_interval;
 
 	os_free(dst->erp_domain);
 	if (src->erp_domain) {
diff --git a/src/eapol_auth/eapol_auth_sm.h b/src/eapol_auth/eapol_auth_sm.h
index 44f3f31..2072821 100644
--- a/src/eapol_auth/eapol_auth_sm.h
+++ b/src/eapol_auth/eapol_auth_sm.h
@@ -44,6 +44,7 @@ struct eapol_auth_config {
 	int pbc_in_m1;
 	const u8 *server_id;
 	size_t server_id_len;
+        int identity_request_retry_interval;
 
 	/* Opaque context pointer to owner data for callback functions */
 	void *ctx;
diff --git a/src/radius/radius_client.c b/src/radius/radius_client.c
index 06c804d..d38fd73 100644
--- a/src/radius/radius_client.c
+++ b/src/radius/radius_client.c
@@ -464,9 +464,12 @@ static int radius_client_retransmit(struct radius_client_data *radius,
 
 	entry->next_try = now + entry->next_wait;
 	entry->next_wait *= 2;
-	if (entry->next_wait > RADIUS_CLIENT_MAX_WAIT)
-		entry->next_wait = RADIUS_CLIENT_MAX_WAIT;
-	if (entry->attempts >= RADIUS_CLIENT_MAX_RETRIES) {
+	if (entry->next_wait > conf->radius_max_retry_wait){
+		entry->next_wait = conf->radius_max_retry_wait;
+		entry->next_try = now + entry->next_wait;
+	}
+	wpa_printf(MSG_INFO, "RADIUS: Retry attempts :%d Maximum retry attempts :%d ",entry->attempts,conf->radius_server_retries);
+	if (entry->attempts >= conf->radius_server_retries) {
 		wpa_printf(MSG_INFO, "RADIUS: Removing un-ACKed message due to too many failed retransmit attempts");
 		return 1;
 	}
diff --git a/src/radius/radius_client.h b/src/radius/radius_client.h
index 8ca0874..a22dcad 100644
--- a/src/radius/radius_client.h
+++ b/src/radius/radius_client.h
@@ -174,6 +174,9 @@ struct hostapd_radius_servers {
 	 * force_client_addr - Whether to force client (local) address
 	 */
 	int force_client_addr;
+
+        int radius_server_retries;
+        int radius_max_retry_wait;
 };
 
 
