cscope 15 /work/R7800-V1.0.2.46_gpl_src/git_home/vppnctrl-mqtt.git -q 0000016552 0001384476
	@attachdevice.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<±hªad.h
>

6 
	~"©èchdevi˚.h
"

7 
	~"¥o˚ss_toﬁ.h
"

9 *
	g©èch_öfo
 = 
NULL
;

10 
±hªad_muãx_t
 
	g©èch_lock
;

12 *
	$upd©e_©èch_devi˚
(*
¨g
)

14 
	`±hªad_dëach
(
	`±hªad_£lf
());

17 *
√w_©èch
 = 
	`¥o˚ss_toﬁ_run_cmd
("soap-tool get_attachdevice");

18 i‡(
√w_©èch
)

20 
	`±hªad_muãx_lock
(&
©èch_lock
);

21 i‡(
©èch_öfo
)

23 
	`‰ì
(
©èch_öfo
);

25 
©èch_öfo
 = 
√w_©èch
;

26 
	`±hªad_muãx_u∆ock
(&
©èch_lock
);

28 
	`¶ìp
(30);

30  
NULL
;

31 
	}
}

33 
	$¸óã_©èch_devi˚_thªad
()

35 
ªt
 = -1;

36 
	`±hªad_muãx_öô
(&
©èch_lock
, 
NULL
);

37 
±hªad_t
 
nid
;

38 
ªt
 = 
	`±hªad_¸óã
(&
nid
, 
NULL
, 
upd©e_©èch_devi˚
, NULL);

39  
ªt
;

40 
	}
}

42 * 
	$„tch_©èch_devi˚
()

44 *
ªt
 = 
NULL
;

45 
	`±hªad_muãx_lock
(&
©èch_lock
);

46 i‡(
©èch_öfo
)

48 
ªt
 = 
	`°rdup
(
©èch_öfo
);

50 
	`±hªad_muãx_u∆ock
(&
©èch_lock
);

51  
ªt
;

52 
	}
}

	@attachdevice.h

1 #i‚de‡
_SRC_ATTACHDEVICE_H_


2 
	#_SRC_ATTACHDEVICE_H_


	)

4 
¸óã_©èch_devi˚_thªad
();

5 * 
„tch_©èch_devi˚
();

	@base64.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

5 
	~<›ís¶/≥m.h
>

6 
	~<›ís¶/bio.h
>

7 
	~<›ís¶/evp.h
>

9 
	$ba£64_ícode
(*
ö_°r
, 
ö_Àn
, *
out_°r
)

11 
BIO
 *
b64
, *
bio
;

12 
BUF_MEM
 *
b±r
 = 
NULL
;

13 
size_t
 
size
 = 0;

15 i‡(
ö_°r
 =
NULL
 || 
out_°r
 == NULL)

18 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

19 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

20 
bio
 = 
	`BIO_push
(
b64
, bio);

22 
	`BIO_wrôe
(
bio
, 
ö_°r
, 
ö_Àn
);

23 
	`BIO_Êush
(
bio
);

25 
	`BIO_gë_mem_±r
(
bio
, &
b±r
);

26 
	`mem˝y
(
out_°r
, 
b±r
->
d©a
, b±r->
Àngth
);

27 
out_°r
[
b±r
->
Àngth
] = '\0';

28 
size
 = 
b±r
->
Àngth
;

30 
	`BIO_‰ì_Æl
(
bio
);

31  
size
;

32 
	}
}

34 
	$ba£64_decode
(*
ö_°r
, 
ö_Àn
, *
out_°r
)

36 
BIO
 *
b64
, *
bio
;

39 
size
 = 0;

41 i‡(
ö_°r
 =
NULL
 || 
out_°r
 == NULL)

44 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

45 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

47 
bio
 = 
	`BIO_√w_mem_buf
(
ö_°r
, 
ö_Àn
);

48 
bio
 = 
	`BIO_push
(
b64
, bio);

50 
size
 = 
	`BIO_ªad
(
bio
, 
out_°r
, 
ö_Àn
);

51 
out_°r
[
size
] = '\0';

53 
	`BIO_‰ì_Æl
(
bio
);

54  
size
;

55 
	}
}

	@base64.h

1 #i‚de‡
_BASE64_H_


2 
	#_BASE64_H_


	)

4 
ba£64_ícode
(*
ö_°r
, 
ö_Àn
, *
out_°r
);

5 
ba£64_decode
(*
ö_°r
, 
ö_Àn
, *
out_°r
);

	@bird_conf.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/sockë.h
>

4 
	~<√töë/ö.h
>

5 
	~<¨∑/öë.h
>

6 
	~"búd_c⁄f.h
"

7 
	~"cJSON.h
"

8 
	~"√t_toﬁ.h
"

9 
	~"fûe_toﬁ.h
"

10 
	~"˘æ-öãrÁ˚.h
"

12 
	$búd_c⁄fig_comm⁄
(*
buf
)

14 *
comm⁄_f‹m©
 = "router id %s; \n\n"

25 
loˇl_ù
[20] = {0};

26 
comm⁄_buf
[400] = {0};

27 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

28 
	`√t_toﬁ_gë_if_ù
(
dump_c⁄fig
->
cu°om_œn_if
, 
loˇl_ù
);

30 
	`•rötf
(
comm⁄_buf
, 
comm⁄_f‹m©
, 
loˇl_ù
);

31 
	`°rˇt
(
buf
, 
comm⁄_buf
);

32 
	`‰ì
(
dump_c⁄fig
);

35 
	}
}

37 
	$búd_c⁄fig_o•f
(*
buf
)

39 
i
=0;

40 
ötf_fú°
[] = "protocol ospf { \n"

48 *
ötf_f‹m©
 = "\t\tinterface \"%s\" { \n"

52 
ötf_œ°
[] = "\t}; \n"

55 
	`°rˇt
(
buf
, 
ötf_fú°
);

57 
i
 = 0; i < 5; i++)

59 
öãrÁ˚_buf
[100];

60 
	`•rötf
(
öãrÁ˚_buf
, "sôe%d", 
i
);

61 
c⁄ã¡
[400] = {0};

62 
	`•rötf
(
c⁄ã¡
, 
ötf_f‹m©
, 
öãrÁ˚_buf
);

63 
	`°rˇt
(
buf
, 
c⁄ã¡
);

66 
	`°rˇt
(
buf
, 
ötf_œ°
);

69 
	}
}

71 
	$búd_c⁄fig_ebgp
(*
buf
, 
cJSON
 *
≥îs
)

73 
i
=0;

74 
n
=0;

77 
èbÀ_«me
[30] = {0};

79 
ö_addr
 
loˇl_vù
;

80 
ö_addr
 
≥î_vù
;

82 *
ebgp_f‹m©
 = "table %s \n"

105 
loˇl_sub
[100] = "";

106 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

107 
	`√t_toﬁ_gë_if_sub√t
(
dump_c⁄fig
->
cu°om_œn_if
, 
loˇl_sub
);

108 
	`‰ì
(
dump_c⁄fig
);

110 
n
 = 
	`cJSON_GëAºaySize
(
≥îs
);

111 
i
=0; i<
n
; i++)

113 
cJSON
 *
obj
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

114 
cJSON
 *
≥î_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "peer_vip");

115 
cJSON
 *
loˇl_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "local_vip");

116 
cJSON
 *
tun_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "tunnel_id");

118 
	`öë_©⁄
(
≥î_ôem
->
vÆue°rög
, &
≥î_vù
);

119 
≥î_vù
.
s_addr
 = 
	`ht⁄l
(peer_vip.s_addr);

121 
	`öë_©⁄
(
loˇl_ôem
->
vÆue°rög
, &
loˇl_vù
);

122 
loˇl_vù
.
s_addr
 = 
	`ht⁄l
(local_vip.s_addr);

124 
loˇl_as
 = 
loˇl_vù
.
s_addr
%1022 + 64512;

125 
≥î_as
 = 
≥î_vù
.
s_addr
%1022 + 64512;

127 
	`•rötf
(
èbÀ_«me
, "tun%d_%d", 
tun_ôem
->
vÆueöt
, 
≥î_vù
.
s_addr
 & 0xffff);

128 
c⁄ã¡
[1024] = {0};

129 
	`•rötf
(
c⁄ã¡
, 
ebgp_f‹m©
,

130 
èbÀ_«me
,ÅabÀ_«me,ÅabÀ_«me, 
loˇl_sub
,

131 
èbÀ_«me
,ÅabÀ_«me, 
loˇl_ôem
->
vÆue°rög
, 
loˇl_as
, 
≥î_ôem
->vÆue°rög, 
≥î_as
,

132 
èbÀ_«me
,Åable_name);

134 
	`°rˇt
(
buf
, 
c⁄ã¡
);

136 
	}
}

138 
	$√w_ãmp_≥îs_c⁄f
(
cJSON
 *
≥îs
, 
tu¬ñ_id
)

140 
ãmp_búd_≥îs_fûe
[100];

141 
	`•rötf
(
ãmp_búd_≥îs_fûe
, "/ëc/sôe/vµn%d_ãmp_≥îs.txt", 
tu¬ñ_id
);

142 
	`ªmove
(
ãmp_búd_≥îs_fûe
);

143 
	`wrôe_js⁄_to_fûe
(
ãmp_búd_≥îs_fûe
, 
≥îs
);

145 
	}
}

147 
cJSON
* 
	$mîge_ãmp_≥îs_c⁄f
()

149 
cJSON
 *
≥îs
 = 
	`cJSON_Cª©eAºay
();

150 
i
;

151 
ãmp_búd_≥îs_fûe
[100];

152 
i
 = 0; i < 5; i++)

154 
	`•rötf
(
ãmp_búd_≥îs_fûe
, "/ëc/sôe/vµn%d_ãmp_≥îs.txt", 
i
);

155 
cJSON
 *
tu¬ñ_≥îs
 = 
	`ªad_js⁄_‰om_fûe
(
ãmp_búd_≥îs_fûe
);

156 i‡(
tu¬ñ_≥îs
)

158 
j
;

159 
tu¬ñ_≥îs_˙t
 = 
	`cJSON_GëAºaySize
(
tu¬ñ_≥îs
);

160 
j
 = 0; j < 
tu¬ñ_≥îs_˙t
; j++)

162 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
tu¬ñ_≥îs
, 
j
);

163 
	`cJSON_AddIãmToAºay
(
≥îs
, 
	`cJSON_Du∂iˇã
(
ôem
, 1));

165 
	`cJSON_Dñëe
(
tu¬ñ_≥îs
);

168  
≥îs
;

169 
	}
}

171 
	$wrôe_búd_c⁄f
(
cJSON
 *
≥îs
)

173 *
buf
 = 
	`mÆloc
(256 * 1024);

174 i‡(
buf
)

176 
buf
[0] = 0;

177 
	`búd_c⁄fig_comm⁄
(
buf
);

178 
	`búd_c⁄fig_o•f
(
buf
);

179 
	`búd_c⁄fig_ebgp
(
buf
, 
≥îs
);

180 
	`wrôe_ãxt
("/ëc/búd.c⁄f", 
buf
);

181 
	`‰ì
(
buf
);

184 
	}
}

186 
	$lﬂd_≥î
(
cJSON
 *
tŸÆ_≥îs
, 
id
, * 
ãamid
)

188 
c⁄f_≥î_fûe
[100];

189 
loˇl_vù
[100] = "";

190 
v_öãrÁ˚
[100];

191 
	`•rötf
(
v_öãrÁ˚
, "sôe%d", 
id
);

193 
ù_îr
 = 
	`√t_toﬁ_gë_if_ù
(
v_öãrÁ˚
, 
loˇl_vù
);

194 i‡(
ù_îr
 =0 && 
loˇl_vù
[0])

196 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

197 
cJSON
 *
≥îs
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_≥î_fûe
);

198 i‡(
≥îs
)

200 
i
;

201 
ôem_˙t
 = 
	`cJSON_GëAºaySize
(
≥îs
);

202 
i
 = 0; i < 
ôem_˙t
; i++)

204 
cJSON
 *
≥î
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

205 
cJSON
 *
≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_vip");

206 
cJSON
 *
≥î_ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_teamid");

207 i‡(
	`°rcmp
(
≥î_ãamid_ôem
->
vÆue°rög
, 
ãamid
) == 0)

209 
cJSON
 *
√w_obj
 = 
	`cJSON_Cª©eObje˘
();

210 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "≥î_vù", 
≥î_vù_ôem
->
vÆue°rög
);

211 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "loˇl_vù", 
loˇl_vù
);

212 
	`cJSON_AddNumbîToObje˘
(
√w_obj
, "tu¬ñ_id", 
id
);

213 
	`cJSON_AddIãmToAºay
(
tŸÆ_≥îs
, 
√w_obj
);

216 
	`cJSON_Dñëe
(
≥îs
);

220 
	}
}

222 
	$ªlﬂd_búd_c⁄f
(
tu¬ñ_id
, * 
ãamid
)

224 
cJSON
 *
≥îs
 = 
	`cJSON_Cª©eAºay
();

225 i‡(
≥îs
)

227 
	`lﬂd_≥î
(
≥îs
, 
tu¬ñ_id
, 
ãamid
);

228 
	`√w_ãmp_≥îs_c⁄f
(
≥îs
, 
tu¬ñ_id
);

229 
cJSON
 *
búd_≥îs
 = 
	`mîge_ãmp_≥îs_c⁄f
();

230 i‡(
búd_≥îs
)

232 
	`wrôe_búd_c⁄f
(
búd_≥îs
);

233 
	`cJSON_Dñëe
(
búd_≥îs
);

235 
	`cJSON_Dñëe
(
≥îs
);

238 
	}
}

	@bird_conf.h

1 #i‚de‡
__BIRD_CONF_H__


2 
	#__BIRD_CONF_H__


	)

4 
£t_búd_fûe
();

	@cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~"cJSON.h
"

35 c⁄° *
	gï
;

37 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

39 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

41 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

42 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

43  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

44 
	}
}

46 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

47 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

49 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

51 
size_t
 
Àn
;

52 * 
c›y
;

54 
Àn
 = 
	`°æí
(
°r
) + 1;

55 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

56 
	`mem˝y
(
c›y
,
°r
,
Àn
);

57  
c›y
;

58 
	}
}

60 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

62 i‡(!
hooks
) {

63 
cJSON_mÆloc
 = 
mÆloc
;

64 
cJSON_‰ì
 = 
‰ì
;

68 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

69 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

70 
	}
}

73 
cJSON
 *
	$cJSON_New_Iãm
()

75 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

76 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

77  
node
;

78 
	}
}

81 
	$cJSON_Dñëe
(
cJSON
 *
c
)

83 
cJSON
 *
√xt
;

84 
c
)

86 
√xt
=
c
->next;

87 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

89 i‡(!(
c
->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& c->
°rög
Ë
	`cJSON_‰ì
(c->string);

90 
	`cJSON_‰ì
(
c
);

91 
c
=
√xt
;

93 
	}
}

96 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

98 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

100 i‡(*
num
=='-'Ë
sign
=-1,num++;

101 i‡(*
num
=='0')Çum++;

102 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

103 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

104 i‡(*
num
=='e' || *num=='E')

105 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

106 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

109 
n
=
sign
*n*
	`pow
(10.0,(
sˇÀ
+
subsˇÀ
*
signsubsˇÀ
));

111 
ôem
->
vÆuedoubÀ
=
n
;

112 
ôem
->
vÆueöt
=()
n
;

113 
ôem
->
ty≥
=
cJSON_Numbî
;

114  
num
;

115 
	}
}

117 
	$pow2gt
 (
x
Ë{ --x; x|=x>>1; x|=x>>2; x|=x>>4; x|=x>>8; x|=x>>16;  x+1; 
	}
}

119 °ru˘ {*
	mbuf„r
; 
	mÀngth
; 
	moff£t
; } 
	t¥ötbuf„r
;

121 * 
	$ísuª
(
¥ötbuf„r
 *
p
,
√eded
)

123 *
√wbuf„r
;
√wsize
;

124 i‡(!
p
 || !p->
buf„r
)  0;

125 
√eded
+=
p
->
off£t
;

126 i‡(
√eded
<=
p
->
Àngth
ËÖ->
buf„r
+p->
off£t
;

128 
√wsize
=
	`pow2gt
(
√eded
);

129 
√wbuf„r
=(*)
	`cJSON_mÆloc
(
√wsize
);

130 i‡(!
√wbuf„r
Ë{
	`cJSON_‰ì
(
p
->
buf„r
);p->
Àngth
=0,p->buffer=0; 0;}

131 i‡(
√wbuf„r
Ë
	`mem˝y
“ewbuf„r,
p
->
buf„r
,p->
Àngth
);

132 
	`cJSON_‰ì
(
p
->
buf„r
);

133 
p
->
Àngth
=
√wsize
;

134 
p
->
buf„r
=
√wbuf„r
;

135  
√wbuf„r
+
p
->
off£t
;

136 
	}
}

138 
	$upd©e
(
¥ötbuf„r
 *
p
)

140 *
°r
;

141 i‡(!
p
 || !p->
buf„r
)  0;

142 
°r
=
p
->
buf„r
+p->
off£t
;

143  
p
->
off£t
+
	`°æí
(
°r
);

144 
	}
}

147 *
	$¥öt_numbî
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
)

149 *
°r
=0;

150 
d
=
ôem
->
vÆuedoubÀ
;

151 i‡(
d
==0)

153 i‡(
p
Ë
°r
=
	`ísuª
(p,2);

154 
°r
=(*)
	`cJSON_mÆloc
(2);

155 i‡(
°r
Ë
	`°r˝y
(str,"0");

157 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

159 i‡(
p
Ë
°r
=
	`ísuª
(p,21);

160 
°r
=(*)
	`cJSON_mÆloc
(21);

161 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

165 i‡(
p
Ë
°r
=
	`ísuª
(p,64);

166 
°r
=(*)
	`cJSON_mÆloc
(64);

167 i‡(
°r
)

169 i‡(
	`Ábs
(
	`Êo‹
(
d
)-d)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

170 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

171 
	`•rötf
(
°r
,"%f",
d
);

174  
°r
;

175 
	}
}

177 
	$∑r£_hex4
(c⁄° *
°r
)

179 
h
=0;

180 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

181 
h
=h<<4;
°r
++;

182 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

183 
h
=h<<4;
°r
++;

184 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

185 
h
=h<<4;
°r
++;

186 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

187  
h
;

188 
	}
}

191 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

192 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

194 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

195 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

197 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

199 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

200 i‡(!
out
)  0;

202 
±r
=
°r
+1;
±r2
=
out
;

203 *
±r
!='\"' && *ptr)

205 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

208 
±r
++;

209 *
±r
)

211 'b': *
±r2
++='\b'; ;

212 'f': *
±r2
++='\f'; ;

213 'n': *
±r2
++='\n'; ;

214 'r': *
±r2
++='\r'; ;

215 't': *
±r2
++='\t'; ;

217 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

219 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

221 i‡(
uc
>=0xD800 && uc<=0xDBFF)

223 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

224 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

225 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

226 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

229 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

231 
Àn
) {

232 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

233 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

234 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

235 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

237 
±r2
+=
Àn
;

239 : *
±r2
++=*
±r
; ;

241 
±r
++;

244 *
±r2
=0;

245 i‡(*
±r
=='\"')Ötr++;

246 
ôem
->
vÆue°rög
=
out
;

247 
ôem
->
ty≥
=
cJSON_Såög
;

248  
±r
;

249 
	}
}

252 *
	$¥öt_°rög_±r
(c⁄° *
°r
,
¥ötbuf„r
 *
p
)

254 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0,
Êag
=0;
tokí
;

256 
±r
=
°r
;*±r;±r++Ë
Êag
|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;

257 i‡(!
Êag
)

259 
Àn
=
±r
-
°r
;

260 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

261 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

262 i‡(!
out
)  0;

263 
±r2
=
out
;*ptr2++='\"';

264 
	`°r˝y
(
±r2
,
°r
);

265 
±r2
[
Àn
]='\"';

266 
±r2
[
Àn
+1]=0;

267  
out
;

270 i‡(!
°r
)

272 i‡(
p
Ë
out
=
	`ísuª
(p,3);

273 
out
=(*)
	`cJSON_mÆloc
(3);

274 i‡(!
out
)  0;

275 
	`°r˝y
(
out
,"\"\"");

276  
out
;

278 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

280 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

281 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

282 i‡(!
out
)  0;

284 
±r2
=
out
;
±r
=
°r
;

285 *
±r2
++='\"';

286 *
±r
)

288 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

291 *
±r2
++='\\';

292 
tokí
=*
±r
++)

294 '\\': *
±r2
++='\\'; ;

295 '\"': *
±r2
++='\"'; ;

296 '\b': *
±r2
++='b'; ;

297 '\f': *
±r2
++='f'; ;

298 '\n': *
±r2
++='n'; ;

299 '\r': *
±r2
++='r'; ;

300 '\t': *
±r2
++='t'; ;

301 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

305 *
±r2
++='\"';*ptr2++=0;

306  
out
;

307 
	}
}

309 *
	$¥öt_°rög
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
,p);
	}
}

312 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

313 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

314 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

315 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

316 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

317 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

320 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

323 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

325 c⁄° *
íd
=0;

326 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

327 
ï
=0;

328 i‡(!
c
)  0;

330 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

331 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

334 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

335 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

336  
c
;

337 
	}
}

339 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

342 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1,0);
	}
}

343 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0,0);
	}
}

345 *
	$cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
)

347 
¥ötbuf„r
 
p
;

348 
p
.
buf„r
=(*)
	`cJSON_mÆloc
(
¥ebuf„r
);

349 
p
.
Àngth
=
¥ebuf„r
;

350 
p
.
off£t
=0;

351  
	`¥öt_vÆue
(
ôem
,0,
fmt
,&
p
);

352  
p
.
buf„r
;

353 
	}
}

357 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

359 i‡(!
vÆue
)  0;

360 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

361 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

362 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

363 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

364 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

365 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

366 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

368 
ï
=
vÆue
; 0;

369 
	}
}

372 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

374 *
out
=0;

375 i‡(!
ôem
)  0;

376 i‡(
p
)

378 (
ôem
->
ty≥
)&255)

380 
cJSON_NULL
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"null"); ;}

381 
cJSON_FÆ£
: {
out
=
	`ísuª
(
p
,6); i‡(outË
	`°r˝y
(out,"false"); ;}

382 
cJSON_True
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"true"); ;}

383 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,
p
);;

384 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,
p
);;

385 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,
p
);;

386 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,
p
);;

391 (
ôem
->
ty≥
)&255)

393 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

394 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

395 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

396 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,0);;

397 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,0);;

398 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,0);;

399 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,0);;

402  
out
;

403 
	}
}

406 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

408 
cJSON
 *
chûd
;

409 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

411 
ôem
->
ty≥
=
cJSON_Aºay
;

412 
vÆue
=
	`skù
(value+1);

413 i‡(*
vÆue
==']')  value+1;

415 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

416 i‡(!
ôem
->
chûd
)  0;

417 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

418 i‡(!
vÆue
)  0;

420 *
vÆue
==',')

422 
cJSON
 *
√w_ôem
;

423 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

424 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

425 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

426 i‡(!
vÆue
)  0;

429 i‡(*
vÆue
==']')  value+1;

430 
ï
=
vÆue
; 0;

431 
	}
}

434 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

436 **
íåõs
;

437 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

438 
cJSON
 *
chûd
=
ôem
->child;

439 
numíåõs
=0,
i
=0,
Áû
=0;

440 
size_t
 
tm∂í
=0;

443 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

445 i‡(!
numíåõs
)

447 i‡(
p
Ë
out
=
	`ísuª
(p,3);

448 
out
=(*)
	`cJSON_mÆloc
(3);

449 i‡(
out
Ë
	`°r˝y
(out,"[]");

450  
out
;

453 i‡(
p
)

456 
i
=
p
->
off£t
;

457 
±r
=
	`ísuª
(
p
,1);i‡(!±rË 0; *±r='[';Ö->
off£t
++;

458 
chûd
=
ôem
->child;

459 
chûd
 && !
Áû
)

461 
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,
p
);

462 
p
->
off£t
=
	`upd©e
(p);

463 i‡(
chûd
->
√xt
Ë{
Àn
=
fmt
?2:1;
±r
=
	`ísuª
(
p
,Àn+1);i‡(!±rË 0;*±r++=',';if(fmt)*±r++=' ';*±r=0;p->
off£t
+=len;}

464 
chûd
=chûd->
√xt
;

466 
±r
=
	`ísuª
(
p
,2);if (!ptr)  0; *ptr++=']';*ptr=0;

467 
out
=(
p
->
buf„r
)+
i
;

472 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

473 i‡(!
íåõs
)  0;

474 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

476 
chûd
=
ôem
->child;

477 
chûd
 && !
Áû
)

479 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,0);

480 
íåõs
[
i
++]=
ªt
;

481 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

482 
chûd
=chûd->
√xt
;

486 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

488 i‡(!
out
Ë
Áû
=1;

491 i‡(
Áû
)

493 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

494 
	`cJSON_‰ì
(
íåõs
);

499 *
out
='[';

500 
±r
=
out
+1;*ptr=0;

501 
i
=0;i<
numíåõs
;i++)

503 
tm∂í
=
	`°æí
(
íåõs
[
i
]);
	`mem˝y
(
±r
,entries[i],tmplen);ptr+=tmplen;

504 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

505 
	`cJSON_‰ì
(
íåõs
[
i
]);

507 
	`cJSON_‰ì
(
íåõs
);

508 *
±r
++=']';*ptr++=0;

510  
out
;

511 
	}
}

514 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

516 
cJSON
 *
chûd
;

517 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

519 
ôem
->
ty≥
=
cJSON_Obje˘
;

520 
vÆue
=
	`skù
(value+1);

521 i‡(*
vÆue
=='}')  value+1;

523 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

524 i‡(!
ôem
->
chûd
)  0;

525 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

526 i‡(!
vÆue
)  0;

527 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

528 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

529 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

530 i‡(!
vÆue
)  0;

532 *
vÆue
==',')

534 
cJSON
 *
√w_ôem
;

535 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

536 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

537 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

538 i‡(!
vÆue
)  0;

539 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

540 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

541 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

542 i‡(!
vÆue
)  0;

545 i‡(*
vÆue
=='}')  value+1;

546 
ï
=
vÆue
; 0;

547 
	}
}

550 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

552 **
íåõs
=0,**
«mes
=0;

553 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

554 
cJSON
 *
chûd
=
ôem
->child;

555 
numíåõs
=0,
Áû
=0;

556 
size_t
 
tm∂í
=0;

558 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

560 i‡(!
numíåõs
)

562 i‡(
p
Ë
out
=
	`ísuª
’,
fmt
?
dïth
+4:3);

563 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

564 i‡(!
out
)  0;

565 
±r
=
out
;*ptr++='{';

566 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

567 *
±r
++='}';*ptr++=0;

568  
out
;

570 i‡(
p
)

573 
i
=
p
->
off£t
;

574 
Àn
=
fmt
?2:1; 
±r
=
	`ísuª
(
p
,len+1); if (!ptr)  0;

575 *
±r
++='{'; i‡(
fmt
Ë*±r++='\n'; *±r=0; 
p
->
off£t
+=
Àn
;

576 
chûd
=
ôem
->chûd;
dïth
++;

577 
chûd
)

579 i‡(
fmt
)

581 
±r
=
	`ísuª
(
p
,
dïth
); if (!ptr)  0;

582 
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

583 
p
->
off£t
+=
dïth
;

585 
	`¥öt_°rög_±r
(
chûd
->
°rög
,
p
);

586 
p
->
off£t
=
	`upd©e
(p);

588 
Àn
=
fmt
?2:1;

589 
±r
=
	`ísuª
(
p
,
Àn
); if (!ptr)  0;

590 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

591 
p
->
off£t
+=
Àn
;

593 
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,
p
);

594 
p
->
off£t
=
	`upd©e
(p);

596 
Àn
=(
fmt
?1:0)+(
chûd
->
√xt
?1:0);

597 
±r
=
	`ísuª
(
p
,
Àn
+1); if (!ptr)  0;

598 i‡(
chûd
->
√xt
Ë*
±r
++=',';

599 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

600 
p
->
off£t
+=
Àn
;

601 
chûd
=chûd->
√xt
;

603 
±r
=
	`ísuª
(
p
,
fmt
?(
dïth
+1):2); if (!ptr)  0;

604 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

605 *
±r
++='}';*ptr=0;

606 
out
=(
p
->
buf„r
)+
i
;

611 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

612 i‡(!
íåõs
)  0;

613 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

614 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

615 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

616 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

619 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

620 
chûd
)

622 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
,0);

623 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,0);

624 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

625 
chûd
=chûd->
√xt
;

629 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

630 i‡(!
out
Ë
Áû
=1;

633 i‡(
Áû
)

635 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

636 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

641 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

642 
i
=0;i<
numíåõs
;i++)

644 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

645 
tm∂í
=
	`°æí
(
«mes
[
i
]);
	`mem˝y
(
±r
,names[i],tmplen);ptr+=tmplen;

646 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

647 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

648 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

649 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

650 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

653 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

654 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

655 *
±r
++='}';*ptr++=0;

657  
out
;

658 
	}
}

661 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

662 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

663 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

666 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

668 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

671 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

672 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

673 
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(!(ôem->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& iãm->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=(*)°rög;ôem->ty≥|=cJSON_SåögIsC⁄°;
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

674 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

675 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

677 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

678 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

679 
cJSON
 *
	$cJSON_DëachIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
) {

680 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

681 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

682 
	$cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay2
◊ºay,c));
	}
}

683 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

684 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

687 
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;i‡(!cË{
	`cJSON_AddIãmToAºay
(array,newitem);;}

688 
√wôem
->
√xt
=
c
;√wôem->
¥ev
=c->¥ev;c->¥evÚewôem;i‡(c==
¨øy
->
chûd
Ë¨øy->chûdÚewôem; √wôem->¥ev->√xtÚewôem;
	}
}

689 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

690 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

691 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

692 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

695 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

696 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

697 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

698 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

699 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

700 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

701 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

702 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

705 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

706 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

707 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

708 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

711 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

713 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

715 i‡(!
ôem
)  0;

717 
√wôem
=
	`cJSON_New_Iãm
();

718 i‡(!
√wôem
)  0;

720 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

721 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

722 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

724 i‡(!
ªcur£
Ë 
√wôem
;

726 
˝å
=
ôem
->
chûd
;

727 
˝å
)

729 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

730 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

731 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

732 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

733 
˝å
=˝å->
√xt
;

735  
√wôem
;

736 
	}
}

738 
	$cJSON_Möify
(*
js⁄
)

740 *
öto
=
js⁄
;

741 *
js⁄
)

743 i‡(*
js⁄
==' ') json++;

744 i‡(*
js⁄
=='\t') json++;

745 i‡(*
js⁄
=='\r') json++;

746 i‡(*
js⁄
=='\n') json++;

747 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

748 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

749 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

750 *
öto
++=*
js⁄
++;

752 *
öto
=0;

753 
	}
}

	@cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

40 
	#cJSON_IsRe„ªn˚
 256

	)

41 
	#cJSON_SåögIsC⁄°
 512

	)

44 
	scJSON
 {

45 
cJSON
 *
√xt
,*
¥ev
;

46 
cJSON
 *
chûd
;

48 
ty≥
;

50 *
vÆue°rög
;

51 
vÆueöt
;

52 
vÆuedoubÀ
;

54 *
°rög
;

55 } 
	tcJSON
;

57 
	scJSON_Hooks
 {

58 *(*
mÆloc_‚
)(
size_t
 
sz
);

59 (*
‰ì_‚
)(*
±r
);

60 } 
	tcJSON_Hooks
;

63 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

67 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

69 *
cJSON_Pröt
(
cJSON
 *
ôem
);

71 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

73 *
cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
);

75 
cJSON_Dñëe
(
cJSON
 *
c
);

78 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

80 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

82 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

85 c⁄° *
cJSON_GëEº‹På
();

88 
cJSON
 *
cJSON_Cª©eNuŒ
();

89 
cJSON
 *
cJSON_Cª©eTrue
();

90 
cJSON
 *
cJSON_Cª©eFÆ£
();

91 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

92 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

93 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

94 
cJSON
 *
cJSON_Cª©eAºay
();

95 
cJSON
 *
cJSON_Cª©eObje˘
();

98 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

99 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

100 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

101 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

104 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

105 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

106 
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

108 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

109 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

112 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

113 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

114 
cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
);

115 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

116 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

119 
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

120 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

121 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

124 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

130 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

132 
cJSON_Möify
(*
js⁄
);

135 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

136 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

137 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

138 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

139 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

140 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

143 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

144 
	#cJSON_SëNumbîVÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

146 #ifde‡
__˝lu•lus


	@cgi/cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~"cJSON.h
"

35 c⁄° *
	gï
;

37 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

39 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

41 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

42 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

43  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

44 
	}
}

46 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

47 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

49 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

51 
size_t
 
Àn
;

52 * 
c›y
;

54 
Àn
 = 
	`°æí
(
°r
) + 1;

55 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

56 
	`mem˝y
(
c›y
,
°r
,
Àn
);

57  
c›y
;

58 
	}
}

60 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

62 i‡(!
hooks
) {

63 
cJSON_mÆloc
 = 
mÆloc
;

64 
cJSON_‰ì
 = 
‰ì
;

68 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

69 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

70 
	}
}

73 
cJSON
 *
	$cJSON_New_Iãm
()

75 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

76 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

77  
node
;

78 
	}
}

81 
	$cJSON_Dñëe
(
cJSON
 *
c
)

83 
cJSON
 *
√xt
;

84 
c
)

86 
√xt
=
c
->next;

87 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

89 i‡(!(
c
->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& c->
°rög
Ë
	`cJSON_‰ì
(c->string);

90 
	`cJSON_‰ì
(
c
);

91 
c
=
√xt
;

93 
	}
}

96 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

98 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

100 i‡(*
num
=='-'Ë
sign
=-1,num++;

101 i‡(*
num
=='0')Çum++;

102 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

103 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

104 i‡(*
num
=='e' || *num=='E')

105 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

106 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

109 
n
=
sign
*n*
	`pow
(10.0,(
sˇÀ
+
subsˇÀ
*
signsubsˇÀ
));

111 
ôem
->
vÆuedoubÀ
=
n
;

112 
ôem
->
vÆueöt
=()
n
;

113 
ôem
->
ty≥
=
cJSON_Numbî
;

114  
num
;

115 
	}
}

117 
	$pow2gt
 (
x
Ë{ --x; x|=x>>1; x|=x>>2; x|=x>>4; x|=x>>8; x|=x>>16;  x+1; 
	}
}

119 °ru˘ {*
	mbuf„r
; 
	mÀngth
; 
	moff£t
; } 
	t¥ötbuf„r
;

121 * 
	$ísuª
(
¥ötbuf„r
 *
p
,
√eded
)

123 *
√wbuf„r
;
√wsize
;

124 i‡(!
p
 || !p->
buf„r
)  0;

125 
√eded
+=
p
->
off£t
;

126 i‡(
√eded
<=
p
->
Àngth
ËÖ->
buf„r
+p->
off£t
;

128 
√wsize
=
	`pow2gt
(
√eded
);

129 
√wbuf„r
=(*)
	`cJSON_mÆloc
(
√wsize
);

130 i‡(!
√wbuf„r
Ë{
	`cJSON_‰ì
(
p
->
buf„r
);p->
Àngth
=0,p->buffer=0; 0;}

131 i‡(
√wbuf„r
Ë
	`mem˝y
“ewbuf„r,
p
->
buf„r
,p->
Àngth
);

132 
	`cJSON_‰ì
(
p
->
buf„r
);

133 
p
->
Àngth
=
√wsize
;

134 
p
->
buf„r
=
√wbuf„r
;

135  
√wbuf„r
+
p
->
off£t
;

136 
	}
}

138 
	$upd©e
(
¥ötbuf„r
 *
p
)

140 *
°r
;

141 i‡(!
p
 || !p->
buf„r
)  0;

142 
°r
=
p
->
buf„r
+p->
off£t
;

143  
p
->
off£t
+
	`°æí
(
°r
);

144 
	}
}

147 *
	$¥öt_numbî
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
)

149 *
°r
=0;

150 
d
=
ôem
->
vÆuedoubÀ
;

151 i‡(
d
==0)

153 i‡(
p
Ë
°r
=
	`ísuª
(p,2);

154 
°r
=(*)
	`cJSON_mÆloc
(2);

155 i‡(
°r
Ë
	`°r˝y
(str,"0");

157 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

159 i‡(
p
Ë
°r
=
	`ísuª
(p,21);

160 
°r
=(*)
	`cJSON_mÆloc
(21);

161 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

165 i‡(
p
Ë
°r
=
	`ísuª
(p,64);

166 
°r
=(*)
	`cJSON_mÆloc
(64);

167 i‡(
°r
)

169 i‡(
	`Ábs
(
	`Êo‹
(
d
)-d)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

170 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

171 
	`•rötf
(
°r
,"%f",
d
);

174  
°r
;

175 
	}
}

177 
	$∑r£_hex4
(c⁄° *
°r
)

179 
h
=0;

180 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

181 
h
=h<<4;
°r
++;

182 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

183 
h
=h<<4;
°r
++;

184 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

185 
h
=h<<4;
°r
++;

186 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

187  
h
;

188 
	}
}

191 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

192 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

194 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

195 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

197 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

199 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

200 i‡(!
out
)  0;

202 
±r
=
°r
+1;
±r2
=
out
;

203 *
±r
!='\"' && *ptr)

205 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

208 
±r
++;

209 *
±r
)

211 'b': *
±r2
++='\b'; ;

212 'f': *
±r2
++='\f'; ;

213 'n': *
±r2
++='\n'; ;

214 'r': *
±r2
++='\r'; ;

215 't': *
±r2
++='\t'; ;

217 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

219 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

221 i‡(
uc
>=0xD800 && uc<=0xDBFF)

223 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

224 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

225 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

226 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

229 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

231 
Àn
) {

232 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

233 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

234 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

235 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

237 
±r2
+=
Àn
;

239 : *
±r2
++=*
±r
; ;

241 
±r
++;

244 *
±r2
=0;

245 i‡(*
±r
=='\"')Ötr++;

246 
ôem
->
vÆue°rög
=
out
;

247 
ôem
->
ty≥
=
cJSON_Såög
;

248  
±r
;

249 
	}
}

252 *
	$¥öt_°rög_±r
(c⁄° *
°r
,
¥ötbuf„r
 *
p
)

254 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0,
Êag
=0;
tokí
;

256 
±r
=
°r
;*±r;±r++Ë
Êag
|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;

257 i‡(!
Êag
)

259 
Àn
=
±r
-
°r
;

260 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

261 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

262 i‡(!
out
)  0;

263 
±r2
=
out
;*ptr2++='\"';

264 
	`°r˝y
(
±r2
,
°r
);

265 
±r2
[
Àn
]='\"';

266 
±r2
[
Àn
+1]=0;

267  
out
;

270 i‡(!
°r
)

272 i‡(
p
Ë
out
=
	`ísuª
(p,3);

273 
out
=(*)
	`cJSON_mÆloc
(3);

274 i‡(!
out
)  0;

275 
	`°r˝y
(
out
,"\"\"");

276  
out
;

278 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

280 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

281 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

282 i‡(!
out
)  0;

284 
±r2
=
out
;
±r
=
°r
;

285 *
±r2
++='\"';

286 *
±r
)

288 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

291 *
±r2
++='\\';

292 
tokí
=*
±r
++)

294 '\\': *
±r2
++='\\'; ;

295 '\"': *
±r2
++='\"'; ;

296 '\b': *
±r2
++='b'; ;

297 '\f': *
±r2
++='f'; ;

298 '\n': *
±r2
++='n'; ;

299 '\r': *
±r2
++='r'; ;

300 '\t': *
±r2
++='t'; ;

301 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

305 *
±r2
++='\"';*ptr2++=0;

306  
out
;

307 
	}
}

309 *
	$¥öt_°rög
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
,p);
	}
}

312 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

313 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

314 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

315 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

316 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

317 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

320 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

323 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

325 c⁄° *
íd
=0;

326 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

327 
ï
=0;

328 i‡(!
c
)  0;

330 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

331 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

334 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

335 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

336  
c
;

337 
	}
}

339 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

342 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1,0);
	}
}

343 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0,0);
	}
}

345 *
	$cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
)

347 
¥ötbuf„r
 
p
;

348 
p
.
buf„r
=(*)
	`cJSON_mÆloc
(
¥ebuf„r
);

349 
p
.
Àngth
=
¥ebuf„r
;

350 
p
.
off£t
=0;

351  
	`¥öt_vÆue
(
ôem
,0,
fmt
,&
p
);

352  
p
.
buf„r
;

353 
	}
}

357 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

359 i‡(!
vÆue
)  0;

360 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

361 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

362 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

363 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

364 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

365 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

366 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

368 
ï
=
vÆue
; 0;

369 
	}
}

372 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

374 *
out
=0;

375 i‡(!
ôem
)  0;

376 i‡(
p
)

378 (
ôem
->
ty≥
)&255)

380 
cJSON_NULL
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"null"); ;}

381 
cJSON_FÆ£
: {
out
=
	`ísuª
(
p
,6); i‡(outË
	`°r˝y
(out,"false"); ;}

382 
cJSON_True
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"true"); ;}

383 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,
p
);;

384 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,
p
);;

385 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,
p
);;

386 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,
p
);;

391 (
ôem
->
ty≥
)&255)

393 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

394 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

395 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

396 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,0);;

397 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,0);;

398 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,0);;

399 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,0);;

402  
out
;

403 
	}
}

406 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

408 
cJSON
 *
chûd
;

409 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

411 
ôem
->
ty≥
=
cJSON_Aºay
;

412 
vÆue
=
	`skù
(value+1);

413 i‡(*
vÆue
==']')  value+1;

415 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

416 i‡(!
ôem
->
chûd
)  0;

417 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

418 i‡(!
vÆue
)  0;

420 *
vÆue
==',')

422 
cJSON
 *
√w_ôem
;

423 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

424 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

425 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

426 i‡(!
vÆue
)  0;

429 i‡(*
vÆue
==']')  value+1;

430 
ï
=
vÆue
; 0;

431 
	}
}

434 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

436 **
íåõs
;

437 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

438 
cJSON
 *
chûd
=
ôem
->child;

439 
numíåõs
=0,
i
=0,
Áû
=0;

440 
size_t
 
tm∂í
=0;

443 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

445 i‡(!
numíåõs
)

447 i‡(
p
Ë
out
=
	`ísuª
(p,3);

448 
out
=(*)
	`cJSON_mÆloc
(3);

449 i‡(
out
Ë
	`°r˝y
(out,"[]");

450  
out
;

453 i‡(
p
)

456 
i
=
p
->
off£t
;

457 
±r
=
	`ísuª
(
p
,1);i‡(!±rË 0; *±r='[';Ö->
off£t
++;

458 
chûd
=
ôem
->child;

459 
chûd
 && !
Áû
)

461 
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,
p
);

462 
p
->
off£t
=
	`upd©e
(p);

463 i‡(
chûd
->
√xt
Ë{
Àn
=
fmt
?2:1;
±r
=
	`ísuª
(
p
,Àn+1);i‡(!±rË 0;*±r++=',';if(fmt)*±r++=' ';*±r=0;p->
off£t
+=len;}

464 
chûd
=chûd->
√xt
;

466 
±r
=
	`ísuª
(
p
,2);if (!ptr)  0; *ptr++=']';*ptr=0;

467 
out
=(
p
->
buf„r
)+
i
;

472 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

473 i‡(!
íåõs
)  0;

474 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

476 
chûd
=
ôem
->child;

477 
chûd
 && !
Áû
)

479 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,0);

480 
íåõs
[
i
++]=
ªt
;

481 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

482 
chûd
=chûd->
√xt
;

486 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

488 i‡(!
out
Ë
Áû
=1;

491 i‡(
Áû
)

493 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

494 
	`cJSON_‰ì
(
íåõs
);

499 *
out
='[';

500 
±r
=
out
+1;*ptr=0;

501 
i
=0;i<
numíåõs
;i++)

503 
tm∂í
=
	`°æí
(
íåõs
[
i
]);
	`mem˝y
(
±r
,entries[i],tmplen);ptr+=tmplen;

504 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

505 
	`cJSON_‰ì
(
íåõs
[
i
]);

507 
	`cJSON_‰ì
(
íåõs
);

508 *
±r
++=']';*ptr++=0;

510  
out
;

511 
	}
}

514 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

516 
cJSON
 *
chûd
;

517 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

519 
ôem
->
ty≥
=
cJSON_Obje˘
;

520 
vÆue
=
	`skù
(value+1);

521 i‡(*
vÆue
=='}')  value+1;

523 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

524 i‡(!
ôem
->
chûd
)  0;

525 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

526 i‡(!
vÆue
)  0;

527 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

528 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

529 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

530 i‡(!
vÆue
)  0;

532 *
vÆue
==',')

534 
cJSON
 *
√w_ôem
;

535 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

536 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

537 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

538 i‡(!
vÆue
)  0;

539 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

540 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

541 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

542 i‡(!
vÆue
)  0;

545 i‡(*
vÆue
=='}')  value+1;

546 
ï
=
vÆue
; 0;

547 
	}
}

550 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

552 **
íåõs
=0,**
«mes
=0;

553 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

554 
cJSON
 *
chûd
=
ôem
->child;

555 
numíåõs
=0,
Áû
=0;

556 
size_t
 
tm∂í
=0;

558 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

560 i‡(!
numíåõs
)

562 i‡(
p
Ë
out
=
	`ísuª
’,
fmt
?
dïth
+4:3);

563 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

564 i‡(!
out
)  0;

565 
±r
=
out
;*ptr++='{';

566 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

567 *
±r
++='}';*ptr++=0;

568  
out
;

570 i‡(
p
)

573 
i
=
p
->
off£t
;

574 
Àn
=
fmt
?2:1; 
±r
=
	`ísuª
(
p
,len+1); if (!ptr)  0;

575 *
±r
++='{'; i‡(
fmt
Ë*±r++='\n'; *±r=0; 
p
->
off£t
+=
Àn
;

576 
chûd
=
ôem
->chûd;
dïth
++;

577 
chûd
)

579 i‡(
fmt
)

581 
±r
=
	`ísuª
(
p
,
dïth
); if (!ptr)  0;

582 
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

583 
p
->
off£t
+=
dïth
;

585 
	`¥öt_°rög_±r
(
chûd
->
°rög
,
p
);

586 
p
->
off£t
=
	`upd©e
(p);

588 
Àn
=
fmt
?2:1;

589 
±r
=
	`ísuª
(
p
,
Àn
); if (!ptr)  0;

590 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

591 
p
->
off£t
+=
Àn
;

593 
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,
p
);

594 
p
->
off£t
=
	`upd©e
(p);

596 
Àn
=(
fmt
?1:0)+(
chûd
->
√xt
?1:0);

597 
±r
=
	`ísuª
(
p
,
Àn
+1); if (!ptr)  0;

598 i‡(
chûd
->
√xt
Ë*
±r
++=',';

599 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

600 
p
->
off£t
+=
Àn
;

601 
chûd
=chûd->
√xt
;

603 
±r
=
	`ísuª
(
p
,
fmt
?(
dïth
+1):2); if (!ptr)  0;

604 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

605 *
±r
++='}';*ptr=0;

606 
out
=(
p
->
buf„r
)+
i
;

611 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

612 i‡(!
íåõs
)  0;

613 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

614 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

615 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

616 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

619 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

620 
chûd
)

622 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
,0);

623 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,0);

624 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

625 
chûd
=chûd->
√xt
;

629 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

630 i‡(!
out
Ë
Áû
=1;

633 i‡(
Áû
)

635 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

636 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

641 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

642 
i
=0;i<
numíåõs
;i++)

644 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

645 
tm∂í
=
	`°æí
(
«mes
[
i
]);
	`mem˝y
(
±r
,names[i],tmplen);ptr+=tmplen;

646 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

647 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

648 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

649 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

650 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

653 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

654 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

655 *
±r
++='}';*ptr++=0;

657  
out
;

658 
	}
}

661 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

662 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

663 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

666 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

668 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

671 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

672 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

673 
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(!(ôem->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& iãm->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=(*)°rög;ôem->ty≥|=cJSON_SåögIsC⁄°;
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

674 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

675 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

677 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

678 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

679 
cJSON
 *
	$cJSON_DëachIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
) {

680 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

681 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

682 
	$cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay2
◊ºay,c));
	}
}

683 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

684 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

687 
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;i‡(!cË{
	`cJSON_AddIãmToAºay
(array,newitem);;}

688 
√wôem
->
√xt
=
c
;√wôem->
¥ev
=c->¥ev;c->¥evÚewôem;i‡(c==
¨øy
->
chûd
Ë¨øy->chûdÚewôem; √wôem->¥ev->√xtÚewôem;
	}
}

689 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

690 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

691 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

692 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

695 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

696 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

697 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

698 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

699 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

700 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

701 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

702 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

705 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

706 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

707 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

708 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

711 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

713 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

715 i‡(!
ôem
)  0;

717 
√wôem
=
	`cJSON_New_Iãm
();

718 i‡(!
√wôem
)  0;

720 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

721 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

722 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

724 i‡(!
ªcur£
Ë 
√wôem
;

726 
˝å
=
ôem
->
chûd
;

727 
˝å
)

729 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

730 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

731 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

732 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

733 
˝å
=˝å->
√xt
;

735  
√wôem
;

736 
	}
}

738 
	$cJSON_Möify
(*
js⁄
)

740 *
öto
=
js⁄
;

741 *
js⁄
)

743 i‡(*
js⁄
==' ') json++;

744 i‡(*
js⁄
=='\t') json++;

745 i‡(*
js⁄
=='\r') json++;

746 i‡(*
js⁄
=='\n') json++;

747 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

748 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

749 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

750 *
öto
++=*
js⁄
++;

752 *
öto
=0;

753 
	}
}

	@cgi/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

40 
	#cJSON_IsRe„ªn˚
 256

	)

41 
	#cJSON_SåögIsC⁄°
 512

	)

44 
	scJSON
 {

45 
cJSON
 *
√xt
,*
¥ev
;

46 
cJSON
 *
chûd
;

48 
ty≥
;

50 *
vÆue°rög
;

51 
vÆueöt
;

52 
vÆuedoubÀ
;

54 *
°rög
;

55 } 
	tcJSON
;

57 
	scJSON_Hooks
 {

58 *(*
mÆloc_‚
)(
size_t
 
sz
);

59 (*
‰ì_‚
)(*
±r
);

60 } 
	tcJSON_Hooks
;

63 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

67 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

69 *
cJSON_Pröt
(
cJSON
 *
ôem
);

71 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

73 *
cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
);

75 
cJSON_Dñëe
(
cJSON
 *
c
);

78 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

80 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

82 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

85 c⁄° *
cJSON_GëEº‹På
();

88 
cJSON
 *
cJSON_Cª©eNuŒ
();

89 
cJSON
 *
cJSON_Cª©eTrue
();

90 
cJSON
 *
cJSON_Cª©eFÆ£
();

91 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

92 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

93 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

94 
cJSON
 *
cJSON_Cª©eAºay
();

95 
cJSON
 *
cJSON_Cª©eObje˘
();

98 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

99 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

100 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

101 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

104 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

105 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

106 
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

108 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

109 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

112 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

113 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

114 
cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
);

115 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

116 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

119 
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

120 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

121 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

124 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

130 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

132 
cJSON_Möify
(*
js⁄
);

135 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

136 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

137 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

138 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

139 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

140 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

143 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

144 
	#cJSON_SëNumbîVÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

146 #ifde‡
__˝lu•lus


	@cgi/main.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<f˙é.h
>

9 
	~<¨∑/öë.h
>

10 
	~<sys/sockë.h
>

11 
	~<¨∑/öë.h
>

12 
	~<√töë/ö.h
>

14 
	~"cJSON.h
"

15 
	~"√t_toﬁ.h
"

17 
	gcgi_mode
=1;

19 
	$gë_ch¨_‰om_utf8
(*
utf8
)

21 
ªt
 = 0xff;

22 i‡(*
utf8
 >= '0' && *utf8 <= '9')

24 
ªt
 = *
utf8
 - '0';

26 i‡(*
utf8
 >= 'a' && *utf8 <= 'f')

28 
ªt
 = *
utf8
 - 'a' + 10;

30 i‡(*
utf8
 >= 'A' && *utf8 <= 'F')

32 
ªt
 = *
utf8
 - 'A' + 10;

34  
ªt
;

35 
	}
}

37 
	$decode_utf8_ch¨
(*
utf8
)

39 
tmp1
 = 0;

40 
tmp2
 = 0;

41 
ªt
 = 0;

42 
tmp1
 = 
	`gë_ch¨_‰om_utf8
(
utf8
);

43 
tmp2
 = 
	`gë_ch¨_‰om_utf8
(
utf8
 + 1);

44 
ªt
 = 
tmp1
 * 16 + 
tmp2
;

45  
ªt
;

46 
	}
}

48 *
	$decode_utf8_°r
(*
°r
)

52 
Àn
 = 
	`°æí
((c⁄° *)
°r
);

53 *
tmp_°r
 = (*)
	`mÆloc
(
Àn
 + 1);

54 i‡(
tmp_°r
)

56 
	`mem£t
(
tmp_°r
, 0, 
Àn
 + 1);

57 
i
 = 0, 
j
 = 0;

59 
i
 < 
Àn
)

61 
tmp
;

62 i‡(
°r
[
i
] == '%')

64 
tmp
 = 
	`decode_utf8_ch¨
(
°r
 + 
i
 + 1);

65 
i
 += 3;

69 
tmp
 = 
°r
[
i
];

70 
i
++;

72 
tmp_°r
[
j
] = 
tmp
;

73 
j
++;

76  
tmp_°r
;

77 
	}
}

79 * 
	$gëcgid©a
(
FILE
* 
Â
, * 
ªque°mëhod
)

81 * 
öput
;

82 *
gë_öput
;

83 
Àn
;

84 
i
 = 0;

85 *
ªt
 = 
NULL
;

87 i‡(!
	`°rcmp
(
ªque°mëhod
, "GET"))

89 
gë_öput
 = 
	`gëív
("QUERY_STRING");

90 i‡(
gë_öput
)

92 
öput
 = 
	`°rdup
(
gë_öput
);

96 
öput
 = 
NULL
;

98 
ªt
 = 
öput
;

100 i‡(!
	`°rcmp
(
ªque°mëhod
, "POST"))

102 
Àn
 = 
	`©oi
(
	`gëív
("CONTENT_LENGTH"));

103 i‡(
Àn
 > 0)

105 
öput
 = (*)
	`mÆloc
(
Àn
 + 1);

107 
ªmaö_Àn
 = 
Àn
;

108 
ªmaö_Àn
--)

110 i‡(
	`„of
(
Â
))

114 
öput
[
i
++] = ()
	`fgëc
(
Â
);

116 
öput
[
Àn
] = 0;

117 
ªt
 = 
öput
;

120  
ªt
;

121 
	}
}

123 
	$dump_JSON
(
cJSON
 *
obj
)

125 *
∑ylﬂd
 = 
	`cJSON_Pröt
(
obj
);

126 i‡(
∑ylﬂd
)

128 
	`¥ötf
("%s\n", 
∑ylﬂd
);

129 
	`‰ì
(
∑ylﬂd
);

132 
	}
}

134 
	$ouçut_js⁄
(
cJSON
 *
obj
)

136 i‡(
cgi_mode
)

138 
	`¥ötf
("Content-type:Åext/plain\r\n\r\n");

140 i‡(
obj
)

142 
	`dump_JSON
(
obj
);

146 
	`¥ötf
("null\n");

149 
	}
}

151 
	#VPNCTRL_SERVER_BASE
 (4100)

	)

152 
	#VPNCTRL_MAX_TUNNELS
 (5)

	)

154 
	$maö
(
¨gc
, **
¨gv
)

156 *
ªq_mëhod
 = 
NULL
;

157 *
öput
 = 
NULL
;

158 *
swôch_öput
 = 
NULL
;

159 
ªlﬂd_c⁄fig
 = 0;

164 i‡(
¨gc
 < 2)

166 
ªq_mëhod
 = 
	`gëív
("REQUEST_METHOD");

167 i‡(
ªq_mëhod
)

169 
öput
 = 
	`gëcgid©a
(
°dö
, 
ªq_mëhod
);

174 
cgi_mode
 = 0;

175 
öput
 = 
	`°rdup
(
¨gv
[1]);

178 
cJSON
 *
˘æ_ª•⁄£
 = 
NULL
;

179 i‡(
öput
)

181 
cJSON
 *
ªq
 = 
	`cJSON_P¨£
(
öput
);

182 i‡(
ªq
)

184 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ªq
, "channel");

185 i‡(
ch™√l_ôem
)

187 
cJSON
 *
èrgë_ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ªq
, "target_host");

188 *
èrgë_ho°
 = "127.0.0.1";

189 i‡(
èrgë_ho°_ôem
)

191 
èrgë_ho°
 = 
èrgë_ho°_ôem
->
vÆue°rög
;

194 
ch™√l
 = 
ch™√l_ôem
->
vÆueöt
;

196 i‡(
ch™√l
 == -1)

198 
˘æ_ª•⁄£
 = 
	`cJSON_Cª©eAºay
();

199 
i
;

200 
i
 = 0; i < 
VPNCTRL_MAX_TUNNELS
; i++)

202 
ch™√l_ôem
->
vÆueöt
 = 
i
;

203 
ch™√l_ôem
->
vÆuedoubÀ
 = ()
i
;

204 
cJSON
* 
tu¬ñ_ªs
 = 
	`√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(
èrgë_ho°
, 
i
 + 
VPNCTRL_SERVER_BASE
, 
ªq
, "js⁄", 
	`°æí
("json"));

205 i‡(
tu¬ñ_ªs
)

207 
	`cJSON_AddIãmToAºay
(
˘æ_ª•⁄£
, 
tu¬ñ_ªs
);

211 
	`cJSON_AddIãmToAºay
(
˘æ_ª•⁄£
, 
	`cJSON_Cª©eNuŒ
());

217 
˘æ_ª•⁄£
 = 
	`√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(
èrgë_ho°
, 
ch™√l
 + 
VPNCTRL_SERVER_BASE
, 
ªq
, "js⁄", 
	`°æí
("json"));

219 i‡(!
˘æ_ª•⁄£
)

221 
˘æ_ª•⁄£
 = 
	`cJSON_Cª©eObje˘
();

222 
	`cJSON_AddSåögToObje˘
(
˘æ_ª•⁄£
, "cgi-error", "can't connectÅo ctrl server");

223 
	`cJSON_AddSåögToObje˘
(
˘æ_ª•⁄£
, "˘æ-ho°", 
èrgë_ho°
);

224 
	`cJSON_AddNumbîToObje˘
(
˘æ_ª•⁄£
, "˘æ-p‹t", 
ch™√l
 + 
VPNCTRL_SERVER_BASE
);

227 
	`cJSON_Dñëe
(
ªq
);

229 
	`‰ì
(
öput
);

232 i‡(!
˘æ_ª•⁄£
)

234 
˘æ_ª•⁄£
 = 
	`cJSON_Cª©eObje˘
();

235 
	`cJSON_AddSåögToObje˘
(
˘æ_ª•⁄£
, "cgi-error", "param wrong");

237 
	`ouçut_js⁄
(
˘æ_ª•⁄£
);

238 
	`cJSON_Dñëe
(
˘æ_ª•⁄£
);

240 
	}
}

	@cgi/net_tool.c

1 
	~<°dio.h
>

2 
	~<sys/sockë.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/time.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/£À˘.h
>

7 
	~<√töë/ö.h
>

8 
	~<√töë/ù.h
>

9 
	~<√töë/ù_icmp.h
>

10 
	~<√t/rouã.h
>

11 
	~<√t/if.h
>

12 
	~<löux/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<°rögs.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<√tdb.h
>

19 
	~<¨∑/öë.h
>

20 
	~"cJSON.h
"

22 
	#PACKET_SIZE
 (4096)

	)

23 
	#MAX_ALLOC_LEN
 (4096)

	)

25 #i‚de‡
FREE_PTR


26 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

29 
	$gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

31 
ªt
 = -1;

32 
i‰eq
 
i‰
;

33 
sockaddr
 
ù_addr
;

34 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

35 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

36 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

37 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

38 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

39 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

40 
ªt
 = 0;

41 
	`˛o£
(
sockfd
);

43  
ªt
;

44 
	}
}

46 
	$gë_if_√tmask
(*
if_«me
, 
sockaddr
 *
sock
)

48 
ªt
 = -1;

49 
i‰eq
 
i‰
;

50 
sockaddr
 
ù_addr
;

51 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

52 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

53 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

54 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

55 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFNETMASK
, &
i‰
) == 0) {

56 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

57 
ªt
 = 0;

58 
	`˛o£
(
sockfd
);

60  
ªt
;

61 
	}
}

63 
	$√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
)

65 
ªt
 = -1;

66 
sockaddr
 
ù_addr
;

67 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

68 
ªt
 = 
	`gë_if_addr
(
if_«me
, &
ù_addr
);

69 i‡(
ªt
 == 0)

71 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

73  
ªt
;

74 
	}
}

76 
	$√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
)

78 
ªt
 = -1;

79 
sockaddr
 
ù_addr
;

80 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

81 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
ù_addr
);

82 i‡(
ªt
 == 0)

84 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

86  
ªt
;

87 
	}
}

89 
	$c⁄vît_sub√t_to_°rög
(
sockaddr
 *
ù
, sockadd∏*
mask
, *
ªt_buf
)

91 
sockaddr_ö
 *
√tw‹k_∑π
 = (sockaddr_ö *)
ù
;;

92 
sockaddr_ö
 *
mask_ö
 = (sockaddr_ö *)
mask
;

93 
√tw‹k_∑π_Àn
 = 0;

95 
√tw‹k_∑π
->
sö_addr
.
s_addr
 =Çëw‹k_∑π->sö_addr.s_add∏& 
mask_ö
->sin_addr.s_addr;

96 
	`¥ötf
("mask = %08x\n", 
mask_ö
->
sö_addr
.
s_addr
);

97 
i
;

98 
i
 = 0; i < 32; i++)

100 
bô
 = 1 << 
i
;

101 i‡(
mask_ö
->
sö_addr
.
s_addr
 & 
bô
)

103 
√tw‹k_∑π_Àn
++;

107 
	`öë_¡›
(
AF_INET
, &
√tw‹k_∑π
->
sö_addr
, 
ªt_buf
, 20);

108 
√tw‹k_∑π_Àn_buf
[10];

109 
	`•rötf
(
√tw‹k_∑π_Àn_buf
, "/%d", 
√tw‹k_∑π_Àn
);

110 
	`°rˇt
(
ªt_buf
, 
√tw‹k_∑π_Àn_buf
);

112 
	}
}

114 
	$√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
)

116 
ªt
 = -1;

117 
sockaddr
 
ù_addr
;

118 
sockaddr
 
mask_addr
;

119 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
mask_addr
Ë|| 
	`gë_if_addr
(if_«me, &
ù_addr
);

120 i‡(
ªt
 == 0)

122 
	`c⁄vît_sub√t_to_°rög
(&
ù_addr
, &
mask_addr
, 
buf
);

124  
ªt
;

125 
	}
}

127 
	$√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
)

129 
ªt
 = -1;

130 
i‰eq
 
i‰
;

131 
sockaddr
 
ù_addr
;

132 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

133 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

134 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

135 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

136 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) == 0) {

137 
i
;

138 
i
 = 0; i < 6; i++)

140 
	`•rötf
(
buf
 + 2*
i
, "%02x", ()
i‰
.
i‰_hwaddr
.
ß_d©a
[i]);

142 
ªt
 = 0;

143 
	`˛o£
(
sockfd
);

145  
ªt
;

146 
	}
}

148 
	$ˇl_chksum
(*
addr
, 
Àn
)

150 
∆e·
=
Àn
;

151 
sum
=0;

152 *
w
=
addr
;

153 
™swî
=0;

154 
∆e·
 > 1)

156 
sum
 +*
w
++;

157 
∆e·
 -= 2;

160 if–
∆e·
 == 1)

162 *(*)(&
™swî
Ë*(*)
w
;

163 
sum
 +
™swî
;

166 
sum
 = (sum >> 16) + (sum & 0xffff);

167 
sum
 += (sum >> 16);

168 
™swî
 = ~
sum
;

169  
™swî
;

170 
	}
}

173 
	$ˇl_time_öãrvÆ
(
timevÆ
 *
ﬁd_time
, timevÆ *
now_time
)

175 
öãrvÆ_m£c_öt
 = 0;

176 
öãrvÆ_m£c_dŸ
 = 0;

177 
u£d_time
 = 0;

178 
buf
[20];

179 i‡(
now_time
->
tv_u£c
 < 
ﬁd_time
->tv_usec)

181 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec - 1) * 1000;

182 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec)/1000;

183 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec))%1000;

187 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec) * 1000;

188 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec)/1000;

189 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec))%1000;

191 
	`•rötf
(
buf
, "%Œu.%Œu", 
öãrvÆ_m£c_öt
, 
öãrvÆ_m£c_dŸ
);

192 
u£d_time
 = 
	`©of
(
buf
);

193  
u£d_time
;

194 
	}
}

197 
	$pög
(
ö_addr
 *
d°ù
, 
timeout
)

199 
timevÆ
 *
tvÆ
;

200 
maxfds
 = 0;

201 
fd_£t
 
ªadfds
;

202 
u£d_time
 = 0;

204 
sockaddr_ö
 
addr
;

205 
sockaddr_ö
 
‰om
;

207 
	`bzîo
(&
addr
,(addr));

208 
addr
.
sö_Ámûy
 = 
AF_INET
;

209 
addr
.
sö_addr
.
s_addr
 = 
d°ù
->s_addr;

211 
sockfd
;

213 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

214 i‡(
sockfd
 > 0)

216 
timevÆ
 
timeo
;

218 
timeo
.
tv_£c
 = 
timeout
;

219 
timeo
.
tv_u£c
 = 0;

221 i‡(
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
timeo
, (timeo)) == 0)

223 
£nd∑ckë
[
PACKET_SIZE
];

224 
ªcv∑ckë
[
PACKET_SIZE
];

226 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

228 
pid_t
 
pid
;

230 
pid
=
	`gëpid
();

232 
ù
 *
ùh
;

233 
icmp
 *icmp;

235 
icmp
=(icmp*)
£nd∑ckë
;

236 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

237 
icmp
->
icmp_code
=0;

238 
icmp
->
icmp_cksum
=0;

239 
icmp
->
icmp_£q
=0;

240 
icmp
->
icmp_id
=
pid
;

241 
tvÆ
(
timevÆ
 *)
icmp
->
icmp_d©a
;

242 
	`gëtimeofday
(
tvÆ
,
NULL
);

243 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

245 
n
;

247 
i
;

248 
i
 = 0; i < 5; i++)

250 
n
 = 
	`£ndto
(
sockfd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

252 i‡(
n
 > 0)

259 
	`FD_ZERO
(&
ªadfds
);

260 
	`FD_SET
(
sockfd
, &
ªadfds
);

261 
maxfds
 = 
sockfd
 + 1;

262 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

263 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

266 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

267 
‰omÀn
 = (
‰om
);

268 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

269 i‡(
n
 > 1)

271 
timevÆ
 *
pkt_tv
;

272 
timevÆ
 
now_tv
;

273 
	`gëtimeofday
(&
now_tv
, 
NULL
);

274 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

276 i‡(
‰om
.
sö_addr
.
s_addr
 =
d°ù
->s_addr)

278 
ùh
 = (
ù
 *)
ªcv∑ckë
;

279 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

282 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
 && icmp->
icmp_id
 =
pid
)

285 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

302 
	`˛o£
(
sockfd
);

304  
u£d_time
;

305 
	}
}

307 
	$√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
)

309 
u£d_time
 = 0;

310 
ho°ít
 *
he
 = 
	`gëho°by«me
(
ho°
);

311 i‡(
he
 && he->
h_addπy≥
 =
AF_INET
)

313 
u£d_time
 = 
	`pög
((
ö_addr
 *)
he
->
h_addr
, 
timeout
);

317 
	`¥ötf
("C™'àgë ho° o‡%s\n", 
ho°
);

319  
u£d_time
;

320 
	}
}

322 
	$¸óã_pög_sockë
()

324  
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

325 
	}
}

327 
	$£nd_pög_∑ckës
(
fd
, 
cJSON
 *
ho°s
)

329 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

330 
i
;

331 
i
 = 0; i < 
¨øy_cou¡
; i++)

333 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

334 i‡(
ôm
)

336 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, "ip");

337 i‡(
ho°_ôem
)

339 
sockaddr_ö
 
addr
;

342 
	`bzîo
(&
addr
,(addr));

343 
addr
.
sö_Ámûy
 = 
AF_INET
;

344 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

346 
£nd∑ckë
[
PACKET_SIZE
];

348 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

351 
pid_t
 
pid
;

352 
pid
=
	`gëpid
();

353 
pid
 +
i
;

355 
icmp
 *icmp;

357 
icmp
=(icmp*)
£nd∑ckë
;

358 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

359 
icmp
->
icmp_code
=0;

360 
icmp
->
icmp_cksum
=0;

361 
icmp
->
icmp_£q
=0;

362 
icmp
->
icmp_id
=
pid
;

363 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

364 
	`gëtimeofday
(
tvÆ
,
NULL
);

365 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

367 
j
;

368 
j
 = 0; j < 2; j++)

370 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

376 
	}
}

378 
	$£nd_pög_∑ckës2
(
fd
, 
cJSON
 *
ho°s
, *
ù_«me
)

380 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

381 
i
;

382 
i
 = 0; i < 
¨øy_cou¡
; i++)

384 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

385 i‡(
ôm
)

387 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, 
ù_«me
);

388 i‡(
ho°_ôem
)

390 
sockaddr_ö
 
addr
;

393 
	`bzîo
(&
addr
,(addr));

394 
addr
.
sö_Ámûy
 = 
AF_INET
;

395 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

397 
£nd∑ckë
[
PACKET_SIZE
];

399 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

402 
pid_t
 
pid
;

403 
pid
=
	`gëpid
();

404 
pid
 +
i
;

406 
icmp
 *icmp;

408 
icmp
=(icmp*)
£nd∑ckë
;

409 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

410 
icmp
->
icmp_code
=0;

411 
icmp
->
icmp_cksum
=0;

412 
icmp
->
icmp_£q
=0;

413 
icmp
->
icmp_id
=
pid
;

414 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

415 
	`gëtimeofday
(
tvÆ
,
NULL
);

416 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

418 
j
;

419 
j
 = 0; j < 2; j++)

421 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

427 
	}
}

429 
	$£t_deÁut_œãncy
(
cJSON
 *
ho°s
)

431 
j
;

432 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

433 
j
 = 0; j < 
¨øy_cou¡
; j++)

435 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

436 i‡(
ôem
)

438 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

439 i‡(!
œãncy_ôem
)

441 
	`cJSON_AddNumbîToObje˘
(
ôem
, "latency", 0);

446 
	}
}

448 
	$£t_deÁut_œãncy2
(
cJSON
 *
ho°s
, *
œãncy_«me
)

450 
j
;

451 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

452 
j
 = 0; j < 
¨øy_cou¡
; j++)

454 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

455 i‡(
ôem
)

457 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

458 i‡(!
œãncy_ôem
)

460 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 0);

465 
	}
}

467 
	$ªcv_pög_∑ckës
(
sockfd
, 
cJSON
 *
ho°s
, 
timeout
)

469 
timevÆ
 
timeo
;

471 
timeo
.
tv_£c
 = 0;

472 
timeo
.
tv_u£c
 = 1000;

473 
sockaddr_ö
 
addr
;

474 
sockaddr_ö
 
‰om
;

475 
fd_£t
 
ªadfds
;

476 
u£d_time
;

477 
pid_t
 
pid
 = 
	`gëpid
();

479 
timevÆ
 
°¨t_time
;

480 
timevÆ
 
íd_time
;

481 
ªcv∑ckë
[
PACKET_SIZE
];

482 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

486 
	`FD_ZERO
(&
ªadfds
);

487 
	`FD_SET
(
sockfd
, &
ªadfds
);

488 
maxfds
 = 
sockfd
 + 1;

489 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

490 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

493 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

494 
‰omÀn
 = (
‰om
);

495 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

496 i‡(
n
 > 1)

498 
timevÆ
 *
pkt_tv
;

499 
timevÆ
 
now_tv
;

500 
	`gëtimeofday
(&
now_tv
, 
NULL
);

501 
ù
 *
ùh
;

502 
icmp
 *icmp;

503 
ùh
 = (
ù
 *)
ªcv∑ckë
;

504 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

505 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

506 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

508 
i
;

509 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

510 
i
 = 0; i < 
¨øy_cou¡
; i++)

512 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

513 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

514 i‡(
ôem
)

516 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "ip");

517 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

519 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

521 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

523 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

524 i‡(!
œãncy_ôem
)

526 
	`cJSON_AddNumbîToObje˘
(
ôem
, "œãncy", 
u£d_time
);

535 
	`gëtimeofday
(&
íd_time
, 
NULL
);

536 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

538 
	}
}

540 
	$ªcv_pög_∑ckës2
(
sockfd
, 
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

542 
timevÆ
 
timeo
;

544 
timeo
.
tv_£c
 = 0;

545 
timeo
.
tv_u£c
 = 1000;

546 
sockaddr_ö
 
addr
;

547 
sockaddr_ö
 
‰om
;

548 
fd_£t
 
ªadfds
;

549 
u£d_time
;

550 
pid_t
 
pid
 = 
	`gëpid
();

552 
timevÆ
 
°¨t_time
;

553 
timevÆ
 
íd_time
;

554 
ªcv∑ckë
[
PACKET_SIZE
];

555 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

559 
	`FD_ZERO
(&
ªadfds
);

560 
	`FD_SET
(
sockfd
, &
ªadfds
);

561 
maxfds
 = 
sockfd
 + 1;

562 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

563 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

566 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

567 
‰omÀn
 = (
‰om
);

568 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

569 i‡(
n
 > 1)

571 
timevÆ
 *
pkt_tv
;

572 
timevÆ
 
now_tv
;

573 
	`gëtimeofday
(&
now_tv
, 
NULL
);

574 
ù
 *
ùh
;

575 
icmp
 *icmp;

576 
ùh
 = (
ù
 *)
ªcv∑ckë
;

577 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

578 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

579 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

581 
i
;

582 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

583 
i
 = 0; i < 
¨øy_cou¡
; i++)

585 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

586 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

587 i‡(
ôem
)

589 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
ù_«me
);

590 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

592 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

594 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

596 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

597 i‡(!
œãncy_ôem
)

599 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 
u£d_time
);

608 
	`gëtimeofday
(&
íd_time
, 
NULL
);

609 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

611 
	}
}

638 
	$√t_toﬁ_pög_ho°s
(
cJSON
 *
ho°s
, 
timeout
)

640 
fd
 = 
	`¸óã_pög_sockë
();

641 i‡(
fd
 > 0)

643 
	`£nd_pög_∑ckës
(
fd
, 
ho°s
);

644 
	`ªcv_pög_∑ckës
(
fd
, 
ho°s
, 
timeout
);

645 
	`˛o£
(
fd
);

647 
	`£t_deÁut_œãncy
(
ho°s
);

649 
	}
}

651 
	$√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

653 
fd
 = 
	`¸óã_pög_sockë
();

654 i‡(
fd
 > 0)

656 
	`£nd_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
);

657 
	`ªcv_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
, 
œãncy_«me
, 
timeout
);

658 
	`˛o£
(
fd
);

660 
	`£t_deÁut_œãncy2
(
ho°s
, 
œãncy_«me
);

662 
	}
}

664 
	#ROUTE_FILE
 "/¥oc/√t/rouã"

	)

666 
	srouã_öfo


668 
	möãrÁ˚_buf
[20];

669 
	md°_buf
[20];

670 
	mgw_buf
[20];

671 
	mÊags_buf
[20];

672 
	mªf_buf
[20];

673 
	mu£_buf
[20];

674 
	mmëric_buf
[20];

675 
	mmask_buf
[20];

676 
	mmtu_buf
[20];

677 
	mwödow_buf
[20];

678 
rouã_öfo
 *
	m√xt
;

681 
	$dump_rouã
(
rouã_öfo
 *
rouã
)

683 
rouã_öfo
 *
cur
 = 
rouã
;

684 
	`¥ötf
("cur:%p\äext:%p\nd°: %s\tgw:%s\tmask:%s\n", 
cur
, cur->
√xt
, cur->
d°_buf
, cur->
gw_buf
, cur->
mask_buf
);

685 
	}
}

687 
	$check_rouã_if
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
)

689 
ªt
 = 0;

690 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

692 
ªt
 = 1;

694  
ªt
;

695 
	}
}

697 
	$gë_rouã_öfo
(*
buf
, 
rouã_öfo
 *
⁄e_rouã
)

699 *
tokí
 = 
NULL
;

700 *
ßve_±r1
 = 
NULL
;

701 
	`mem£t
(
⁄e_rouã
, 0, (
rouã_öfo
));

702 
tokí
 = 
	`°πok_r
(
buf
, "\t", &
ßve_±r1
);

703 
i
 = 0;

704 
tokí
)

706 
i
)

709 
	`°r˝y
(
⁄e_rouã
->
öãrÁ˚_buf
, 
tokí
);

712 
	`°r˝y
(
⁄e_rouã
->
d°_buf
, 
tokí
);

715 
	`°r˝y
(
⁄e_rouã
->
gw_buf
, 
tokí
);

718 
	`°r˝y
(
⁄e_rouã
->
Êags_buf
, 
tokí
);

721 
	`°r˝y
(
⁄e_rouã
->
ªf_buf
, 
tokí
);

724 
	`°r˝y
(
⁄e_rouã
->
u£_buf
, 
tokí
);

727 
	`°r˝y
(
⁄e_rouã
->
mëric_buf
, 
tokí
);

730 
	`°r˝y
(
⁄e_rouã
->
mask_buf
, 
tokí
);

733 
	`°r˝y
(
⁄e_rouã
->
mtu_buf
, 
tokí
);

736 
	`°r˝y
(
⁄e_rouã
->
wödow_buf
, 
tokí
);

744 
i
++;

745 
tokí
 = 
	`°πok_r
(
NULL
, "\t", &
ßve_±r1
);

748 
	}
}

750 
rouã_öfo
 *
	$gë_rouã_li°
()

752 
löe_buf
[1000];

753 
FILE
 *
fûe
 = 
	`f›í
(
ROUTE_FILE
, "r");

754 
rouã_öfo
 *
ªt
 = 
NULL
;

755 i‡(
fûe
)

757 
	`mem£t
(
löe_buf
, 0, (line_buf));

759 
	`fgës
(
löe_buf
, ÷öe_buf),
fûe
);

760 
rouã_öfo
 *
tmp
 = 
NULL
;

761 
	`fgës
(
löe_buf
, ÷öe_buf), 
fûe
))

763 
rouã_öfo
 *
⁄e_rouã
 = 
	`mÆloc
((route_info));

764 
	`gë_rouã_öfo
(
löe_buf
, 
⁄e_rouã
);

766 i‡(
tmp
 =
NULL
)

768 
ªt
 = 
⁄e_rouã
;

772 
tmp
->
√xt
 = 
⁄e_rouã
;

775 
tmp
 = 
⁄e_rouã
;

777 
	`f˛o£
(
fûe
);

779  
ªt
;

780 
	}
}

782 
	$‰ì_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

784 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

785 
cur
)

787 
rouã_öfo
 *
tmp
 = 
cur
;

788 
cur
 = cur->
√xt
;

789 
	`‰ì
(
tmp
);

792 
	}
}

794 
sockaddr
 
	$gë_sockaddr
(*
buf
)

796 *
íd±r
;

797 
sockaddr
 
addr
;

798 
numbî
 = 0;

799 
sockaddr_ö
 *
ùv4_addr
 = (sockaddr_ö *)&
addr
;

800 
ùv4_addr
->
sö_Ámûy
 = 
AF_INET
;

801 
ùv4_addr
->
sö_p‹t
 = 0;

802 
numbî
 = 
	`°πﬁl
(
buf
, &
íd±r
, 16);

803 
ùv4_addr
->
sö_addr
.
s_addr
 = (
ö_addr_t
)
numbî
;

804  
addr
;

805 
	}
}

807 
	$dñ_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

809 
πíåy
 
π
;

810 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

811 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

812 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

813 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

814 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

815 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

816 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

817 i‡(
sockfd
 > 0)

819 
	`io˘l
(
sockfd
, 
SIOCDELRT
, &
π
);

820 
	`˛o£
(
sockfd
);

823 
	}
}

825 
	$add_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

827 
πíåy
 
π
;

828 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

829 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

830 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

831 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

832 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

833 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

834 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

835 i‡(
sockfd
 > 0)

837 
	`io˘l
(
sockfd
, 
SIOCADDRT
, &
π
);

838 
	`˛o£
(
sockfd
);

841 
	}
}

843 
	$√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

845 
ªt
 = -1;

846 
i‰eq
 
i‰
;

847 
sockaddr
 
ù_addr
;

848 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

849 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

850 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

851 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

852 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

853 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

854 
ªt
 = 0;

855 
	`˛o£
(
sockfd
);

857  
ªt
;

858 
	}
}

860 
	$rouã_√ed_dñëe
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
, 
sockaddr
 *
if_addr
)

862 
ªt
 = 0;

863 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

866 
sockaddr
 
rouã_d°
;

867 
sockaddr
 
rouã_mask
;

868 
rouã_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

869 
rouã_mask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

870 
sockaddr_ö
 *
ö_rouã_d°
 = (sockaddr_ö *)&
rouã_d°
;

871 
sockaddr_ö
 *
ö_rouã_mask
 = (sockaddr_ö *)&
rouã_mask
;

872 
sockaddr_ö
 *
ö_if_addr
 = (sockaddr_ö *)
if_addr
;

873 i‡((
ö_rouã_d°
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr) !=

874 (
ö_if_addr
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr))

876 
ªt
 = 1;

879  
ªt
;

880 
	}
}

882 
	$dñ_rouãs_by_if
(
rouã_öfo
 *
fú°_rouã
, *
dev
)

884 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

885 
sockaddr
 
addr
;

886 
	`mem£t
(&
addr
, 0, (
sockaddr
));

887 
ªt
 = 
	`√t_toﬁ_gë_if_addr
(
dev
, &
addr
);

888 i‡(
ªt
 == 0)

890 
cur
)

892 i‡(
	`rouã_√ed_dñëe
(
cur
, 
dev
, &
addr
))

894 
	`dñ_⁄e_rouã
(
cur
);

896 
cur
 = cur->
√xt
;

900 
	}
}

902 
	$dump_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

904 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

905 
cur
)

907 
	`dump_rouã
(
cur
);

908 
cur
 = cur->
√xt
;

910 
	}
}

913 
	$√t_toﬁ_ª£t_rouãs
(*
dev
)

915 
rouã_öfo
 *
rouã_li°
 = 
	`gë_rouã_li°
();

916 i‡(
rouã_li°
)

919 
	`dñ_rouãs_by_if
(
rouã_li°
, 
dev
);

920 
	`‰ì_rouã_li°
(
rouã_li°
);

922 
	}
}

924 *
	$ªcv_d©a
(
sockfd
, *
Àn
)

926 
ssize_t
 
ªcv_Àn
 = 0;

927 
ssize_t
 
ªcv_Àn_tŸÆ
 = 0;

928 *
ªcv_±r
 = 
NULL
;

929 i‡(
sockfd
 > 0)

933 
ªcv_±r
 = 
	`ªÆloc
‘ecv_±r, 
ªcv_Àn_tŸÆ
 + 
MAX_ALLOC_LEN
);

934 i‡(
ªcv_±r
)

937 
	`mem£t
(
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 0, 
MAX_ALLOC_LEN
);

938 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 
MAX_ALLOC_LEN
, 0);

939 i‡(
ªcv_Àn
 > 0)

941 
ªcv_Àn_tŸÆ
 +
ªcv_Àn
;

943 if(
ªcv_Àn
 == 0)

949 
	`FREE_PTR
(
ªcv_±r
);

955 *
Àn
 = 
ªcv_Àn_tŸÆ
;

956  
ªcv_±r
;

957 
	}
}

959 *
	$√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
)

961 *
web
 = 
NULL
;

962 
ho°ít
 *
he
;

963 
sockaddr_ö
 
£rvî
;

964 
£nd_num
;

965 
sockfd
;

966 
ªt
;

967 if((
he
=
	`gëho°by«me
(
ho°
)))

969 
sockfd
=
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

970 
timevÆ
 
timeout
 = {8, 0};

971 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
timeout
, (timeout));

972 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
timeout
, (timeout));

973 if(
sockfd
 >= 0)

975 
	`bzîo
(&
£rvî
,(server));

976 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

977 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

978 
£rvî
.
sö_addr
 = *((
ö_addr
 *)
he
->
h_addr
);

979 
ªt
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *)&
£rvî
, (server));

980 if(
ªt
 >= 0)

982 
£nd_num
 = 
	`£nd
(
sockfd
, 
£nd_buf
, 
£nd_Àn
, 0);

983 i‡(
£nd_num
 > 0)

985 
web
 = 
	`ªcv_d©a
(
sockfd
, 
ªcv_Àn
);

988 
	`˛o£
(
sockfd
);

991  
web
;

992 
	}
}

994 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
)

996 
cJSON
 *
ªt
 = 
NULL
;

997 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

998 i‡(
°r_ªq
)

1000 
£nd_Àn
 = 
¥efix_size
 + 
	`°æí
(
°r_ªq
) + 1;

1002 *
£nd_buf
 = 
	`mÆloc
(
£nd_Àn
 + 4);

1003 *
£nd_d©a
 = 
£nd_buf
 + 4;

1004 *(
uöt32_t
*)
£nd_buf
 = 
	`ht⁄l
((uöt32_t)
£nd_Àn
);

1005 
	`mem˝y
(
£nd_d©a
, 
¥efix
, 
¥efix_size
);

1006 
	`mem˝y
(
£nd_d©a
 + 
¥efix_size
, 
°r_ªq
, 
	`°æí
(str_req) + 1);

1007 
ªcv_Àn
 = 0;

1008 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
£nd_Àn
 + 4, &
ªcv_Àn
);

1009 i‡(
ª•⁄£
)

1011 i‡(
ªcv_Àn
 > 0)

1013 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1015 
	`‰ì
(
ª•⁄£
);

1017 
	`‰ì
(
£nd_buf
);

1018 
	`‰ì
(
°r_ªq
);

1020  
ªt
;

1021 
	}
}

1023 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
)

1025 
cJSON
 *
ªt
 = 
NULL
;

1026 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1027 i‡(
°r_ªq
)

1029 
ªcv_Àn
 = 0;

1030 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
°r_ªq
, 
	`°æí
(°r_ªqË+ 1, &
ªcv_Àn
);

1031 i‡(
ª•⁄£
)

1033 i‡(
ªcv_Àn
 > 0)

1035 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1037 
	`‰ì
(
ª•⁄£
);

1039 
	`‰ì
(
°r_ªq
);

1041  
ªt
;

1042 
	}
}

1044 *
	$√t_toﬁ_hâp_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, *
body
, *
ªcv_Àn
)

1046 *
ªt
 = 
NULL
;

1047 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1058 
hód_buf
[1000];

1059 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
	`°æí
(
body
));

1061 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ såÀn(
body
) + 1;

1062 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1063 i‡(
£nd_buf
)

1065 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1066 
	`°rˇt
(
£nd_buf
, 
body
);

1067 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1068 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
	`°æí
(£nd_buf), 
ªcv_Àn
);

1069 
	`‰ì
(
£nd_buf
);

1071  
ªt
;

1072 
	}
}

1074 *
	$√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
)

1076 *
ªt
 = 
NULL
;

1077 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1089 
hód_buf
[1000];

1090 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
body_Àn
);

1092 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ 
body_Àn
 + 1;

1093 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1094 i‡(
£nd_buf
)

1096 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1097 
	`mem˝y
(
£nd_buf
 + 
	`°æí
(
hód_buf
), 
body
, 
body_Àn
);

1098 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1099 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
tŸÆ_Àn
 - 1, 
ªcv_Àn
);

1100 
	`‰ì
(
£nd_buf
);

1102  
ªt
;

1103 
	}
}

1105 
cJSON
 *
	$√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
)

1107 
cJSON
 *
ªt
 = 
NULL
;

1108 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1109 i‡(
°r_ªq
)

1111 
ªcv_Àn
 = 0;

1112 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_˛õ¡
(
ho°
, 
p‹t
, 
uri
, 
°r_ªq
, &
ªcv_Àn
);

1113 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

1116 *
±r
 = 
	`°r°r
(
ª•⁄£
, "\r\n\r\n");

1117 i‡(
±r
)

1119 
±r
 += 4;

1123 
±r
 = 
	`°r°r
(
ª•⁄£
, "\n\n");

1124 i‡(
±r
)

1126 
±r
 += 2;

1129 i‡(
±r
)

1131 
ªt
 = 
	`cJSON_P¨£
(
±r
);

1133 
	`‰ì
(
ª•⁄£
);

1135 
	`‰ì
(
°r_ªq
);

1137  
ªt
;

1138 
	}
}

1141 
	#DNS_HOST
 0x01

	)

1142 
	#DNS_CNAME
 0x05

	)

1144 
cJSON
 *

1145 
my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
);

1147 
cJSON
 *

1148 
∑r£_dns_ª•⁄£
(
sockëfd
);

1154 
gíî©e_que°i⁄
(c⁄° *
dns_«me


1155 , *
buf
 , *
Àn
);

1162 
is_poöãr
(
ö
);

1172 
∑r£_dns_«me
(*
chunk
 , *
±r


1173 , *
out
 , *
Àn
);

1175 
cJSON
 *
	$√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
)

1177 
cJSON
 *
ªt
 = 
NULL
;

1178 
ªt
 = 
	`my_dns_∑r£
(
dns_£rvî
, 
ªque°_«me
);

1179  
ªt
;

1180 
	}
}

1189 
cJSON
 *
	$∑r£_dns_ª•⁄£
(
sockëfd
) {

1190 
buf
[1024];

1191 *
±r
 = 
buf
;

1192 
sockaddr_ö
 
addr
;

1193 
n
 , 
i
 , 
Êag
 , 
quîys
 , 
™swîs
;

1194 
ty≥
 , 
d©Æí
 , 
Àn
;

1196 
˙ame
[128] , 
™ame
[128] , 
ù
[20];

1197 
√tù
[4];

1199 
sockÀn_t
 
addr_Àn
 = (
sockaddr_ö
);

1200 
cJSON
 *
ªt
 = 
NULL
;

1201 
cJSON
 *
Æüs_¨øy
 = 
	`cJSON_Cª©eAºay
();

1202 
cJSON
 *
ù_¨øy
 = 
	`cJSON_Cª©eAºay
();

1203 
ªt
 = 
	`cJSON_Cª©eObje˘
();

1204 
	`cJSON_AddIãmToObje˘
(
ªt
, "Æüs", 
Æüs_¨øy
);

1205 
	`cJSON_AddIãmToObje˘
(
ªt
, "ù", 
ù_¨øy
);

1207 
n
 = 
	`ªcv‰om
(
sockëfd
 , 
buf
 , (buf) , 0

1208 , (
sockaddr
*)&
addr
 , &
addr_Àn
);

1209 i‡(
n
 > 0)

1211 
±r
 += 4;

1212 
quîys
 = 
	`¡ohs
(*((*)
±r
));

1213 
±r
 += 2;

1214 
™swîs
 = 
	`¡ohs
(*((*)
±r
));

1215 
±r
 += 6;

1217 
i
0 ; i < 
quîys
 ; i ++){

1219 
Êag
 = ()
±r
[0];

1220 
±r
 +(
Êag
 + 1);

1221 if(
Êag
 == 0)

1224 
±r
 += 4;

1228 
i
 = 0 ; i < 
™swîs
 ; i ++)

1230 
	`bzîo
(
™ame
 , (aname));

1231 
Àn
 = 0;

1232 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
™ame
 , &
Àn
);

1233 
±r
 += 2;

1234 
ty≥
 = 
	`ht⁄s
(*((*)
±r
));

1235 
±r
 += 4;

1237 
±r
 += 4;

1238 
d©Æí
 = 
	`¡ohs
(*((*)
±r
));

1239 
±r
 += 2;

1240 if(
ty≥
 =
DNS_CNAME
){

1241 
	`bzîo
(
˙ame
 , (cname));

1242 
Àn
 = 0;

1243 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
˙ame
 , &
Àn
);

1245 
	`cJSON_AddIãmToAºay
(
Æüs_¨øy
, 
	`cJSON_Cª©eSåög
(
˙ame
));

1246 
±r
 +
d©Æí
;

1248 if(
ty≥
 =
DNS_HOST
){

1249 
	`bzîo
(
ù
 , (ip));

1250 if(
d©Æí
 == 4){

1251 
	`mem˝y
(
√tù
 , 
±r
 , 
d©Æí
);

1252 
	`öë_¡›
(
AF_INET
 , 
√tù
 , 
ù
 , (
sockaddr
));

1253 
	`cJSON_AddIãmToAºay
(
ù_¨øy
, 
	`cJSON_Cª©eSåög
(
ù
));

1258 
±r
 +
d©Æí
;

1262 
±r
 += 2;

1264  
ªt
;

1265 
	}
}

1268 
	$∑r£_dns_«me
(*
chunk


1269 , *
±r
 , *
out
 , *
Àn
){

1270 
n
 , 
Êag
;

1271 *
pos
 = 
out
 + (*
Àn
);

1274 
Êag
 = ()
±r
[0];

1275 if(
Êag
 == 0)

1277 if(
	`is_poöãr
(
Êag
)){

1278 
n
 = ()
±r
[1];

1279 
±r
 = 
chunk
 + 
n
;

1280 
	`∑r£_dns_«me
(
chunk
 , 
±r
 , 
out
 , 
Àn
);

1283 
±r
 ++;

1284 
	`mem˝y
(
pos
 , 
±r
 , 
Êag
);

1285 
pos
 +
Êag
;

1286 
±r
 +
Êag
;

1287 *
Àn
 +
Êag
;

1288 if(()
±r
[0] != 0){

1289 
	`mem˝y
(
pos
 , "." , 1);

1290 
pos
 += 1;

1291 (*
Àn
) += 1;

1296 
	}
}

1298 
	$is_poöãr
(
ö
){

1299  ((
ö
 & 0xc0) == 0xc0);

1300 
	}
}

1302 
cJSON
 *
	$my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
) {

1303 
ªque°
[256];

1304 *
±r
 = 
ªque°
;

1305 
que°i⁄
[128];

1306 
que°i⁄_Àn
;

1307 
cJSON
 *
ªt
 = 
NULL
;

1309 
sockaddr_ö
 
de°
;

1310 
	`bzîo
(&
de°
 , (dest));

1311 
de°
.
sö_Ámûy
 = 
AF_INET
;

1312 
de°
.
sö_p‹t
 = 
	`ht⁄s
(53);

1313 
de°
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
dns_£rvî
);

1315 
	`gíî©e_que°i⁄
(
dns_«me
 , 
que°i⁄
 , &
que°i⁄_Àn
);

1316 *((*)
±r
Ë
	`ht⁄s
(0xff00);

1317 
±r
 += 2;

1318 *((*)
±r
Ë
	`ht⁄s
(0x0100);

1319 
±r
 += 2;

1320 *((*)
±r
Ë
	`ht⁄s
(1);

1321 
±r
 += 2;

1322 *((*)
±r
) = 0;

1323 
±r
 += 2;

1324 *((*)
±r
) = 0;

1325 
±r
 += 2;

1326 *((*)
±r
) = 0;

1327 
±r
 += 2;

1328 
	`mem˝y
(
±r
 , 
que°i⁄
 , 
que°i⁄_Àn
);

1329 
±r
 +
que°i⁄_Àn
;

1331 
sockëfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1332 i‡(
sockëfd
 > 0)

1334 
	`£ndto
(
sockëfd
 , 
ªque°
 , 
que°i⁄_Àn
 + 12 , 0

1335 , (
sockaddr
*)&
de°
 , (sockaddr));

1336 
ªt
 = 
	`∑r£_dns_ª•⁄£
(
sockëfd
);

1338  
ªt
;

1339 
	}
}

1342 
	$gíî©e_que°i⁄
(c⁄° *
dns_«me
 , *
buf
 , *
Àn
){

1343 *
pos
;

1344 *
±r
;

1345 
n
;

1347 *
Àn
 = 0;

1348 
±r
 = 
buf
;

1349 
pos
 = (*)
dns_«me
;

1351 
n
 = 
	`°æí
(
pos
Ë- (
	`°r°r
(pos , ".") ? strlen(strstr(pos , ".")) : 0);

1352 *
±r
 ++ = ()
n
;

1353 
	`mem˝y
(
±r
 , 
pos
 , 
n
);

1354 *
Àn
 +
n
 + 1;

1355 
±r
 +
n
;

1356 if(!
	`°r°r
(
pos
 , ".")){

1357 *
±r
 = ()0;

1358 
±r
 ++;

1359 *
Àn
 += 1;

1362 
pos
 +
n
 + 1;

1364 *((*)
±r
Ë
	`ht⁄s
(1);

1365 *
Àn
 += 2;

1366 
±r
 += 2;

1367 *((*)
±r
Ë
	`ht⁄s
(1);

1368 *
Àn
 += 2;

1370 
	}
}

	@cgi/net_tool.h

1 #i‚de‡
_NET_TOOL_H_


2 
	#_NET_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<√t/rouã.h
>

10 
	~<√t/if.h
>

11 
	~"cJSON.h
"

17 
√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
);

20 
√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
);

23 
√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
);

29 
√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
*);

40 
√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
);

51 
√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
);

82 
√t_toﬁ_pög_ho°s
(
cJSON
* 
ho°s
, 
timeout
);

84 
√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
);

91 
√t_toﬁ_ª£t_rouãs
(*
dev
);

105 
√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
);

116 
cJSON
 *

117 
√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
);

118 
cJSON
 *

119 
√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
);

135 
√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
);

147 
cJSON
 *

148 
√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
);

158 
cJSON
 *

159 
√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
);

	@client_tool/cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~"cJSON.h
"

35 c⁄° *
	gï
;

37 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

39 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

41 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

42 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

43  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

44 
	}
}

46 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

47 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

49 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

51 
size_t
 
Àn
;

52 * 
c›y
;

54 
Àn
 = 
	`°æí
(
°r
) + 1;

55 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

56 
	`mem˝y
(
c›y
,
°r
,
Àn
);

57  
c›y
;

58 
	}
}

60 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

62 i‡(!
hooks
) {

63 
cJSON_mÆloc
 = 
mÆloc
;

64 
cJSON_‰ì
 = 
‰ì
;

68 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

69 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

70 
	}
}

73 
cJSON
 *
	$cJSON_New_Iãm
()

75 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

76 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

77  
node
;

78 
	}
}

81 
	$cJSON_Dñëe
(
cJSON
 *
c
)

83 
cJSON
 *
√xt
;

84 
c
)

86 
√xt
=
c
->next;

87 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

89 i‡(!(
c
->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& c->
°rög
Ë
	`cJSON_‰ì
(c->string);

90 
	`cJSON_‰ì
(
c
);

91 
c
=
√xt
;

93 
	}
}

96 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

98 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

100 i‡(*
num
=='-'Ë
sign
=-1,num++;

101 i‡(*
num
=='0')Çum++;

102 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

103 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

104 i‡(*
num
=='e' || *num=='E')

105 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

106 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

109 
n
=
sign
*n*
	`pow
(10.0,(
sˇÀ
+
subsˇÀ
*
signsubsˇÀ
));

111 
ôem
->
vÆuedoubÀ
=
n
;

112 
ôem
->
vÆueöt
=()
n
;

113 
ôem
->
ty≥
=
cJSON_Numbî
;

114  
num
;

115 
	}
}

117 
	$pow2gt
 (
x
Ë{ --x; x|=x>>1; x|=x>>2; x|=x>>4; x|=x>>8; x|=x>>16;  x+1; 
	}
}

119 °ru˘ {*
	mbuf„r
; 
	mÀngth
; 
	moff£t
; } 
	t¥ötbuf„r
;

121 * 
	$ísuª
(
¥ötbuf„r
 *
p
,
√eded
)

123 *
√wbuf„r
;
√wsize
;

124 i‡(!
p
 || !p->
buf„r
)  0;

125 
√eded
+=
p
->
off£t
;

126 i‡(
√eded
<=
p
->
Àngth
ËÖ->
buf„r
+p->
off£t
;

128 
√wsize
=
	`pow2gt
(
√eded
);

129 
√wbuf„r
=(*)
	`cJSON_mÆloc
(
√wsize
);

130 i‡(!
√wbuf„r
Ë{
	`cJSON_‰ì
(
p
->
buf„r
);p->
Àngth
=0,p->buffer=0; 0;}

131 i‡(
√wbuf„r
Ë
	`mem˝y
“ewbuf„r,
p
->
buf„r
,p->
Àngth
);

132 
	`cJSON_‰ì
(
p
->
buf„r
);

133 
p
->
Àngth
=
√wsize
;

134 
p
->
buf„r
=
√wbuf„r
;

135  
√wbuf„r
+
p
->
off£t
;

136 
	}
}

138 
	$upd©e
(
¥ötbuf„r
 *
p
)

140 *
°r
;

141 i‡(!
p
 || !p->
buf„r
)  0;

142 
°r
=
p
->
buf„r
+p->
off£t
;

143  
p
->
off£t
+
	`°æí
(
°r
);

144 
	}
}

147 *
	$¥öt_numbî
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
)

149 *
°r
=0;

150 
d
=
ôem
->
vÆuedoubÀ
;

151 i‡(
d
==0)

153 i‡(
p
Ë
°r
=
	`ísuª
(p,2);

154 
°r
=(*)
	`cJSON_mÆloc
(2);

155 i‡(
°r
Ë
	`°r˝y
(str,"0");

157 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

159 i‡(
p
Ë
°r
=
	`ísuª
(p,21);

160 
°r
=(*)
	`cJSON_mÆloc
(21);

161 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

165 i‡(
p
Ë
°r
=
	`ísuª
(p,64);

166 
°r
=(*)
	`cJSON_mÆloc
(64);

167 i‡(
°r
)

169 i‡(
	`Ábs
(
	`Êo‹
(
d
)-d)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

170 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

171 
	`•rötf
(
°r
,"%f",
d
);

174  
°r
;

175 
	}
}

177 
	$∑r£_hex4
(c⁄° *
°r
)

179 
h
=0;

180 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

181 
h
=h<<4;
°r
++;

182 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

183 
h
=h<<4;
°r
++;

184 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

185 
h
=h<<4;
°r
++;

186 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

187  
h
;

188 
	}
}

191 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

192 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

194 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

195 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

197 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

199 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

200 i‡(!
out
)  0;

202 
±r
=
°r
+1;
±r2
=
out
;

203 *
±r
!='\"' && *ptr)

205 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

208 
±r
++;

209 *
±r
)

211 'b': *
±r2
++='\b'; ;

212 'f': *
±r2
++='\f'; ;

213 'n': *
±r2
++='\n'; ;

214 'r': *
±r2
++='\r'; ;

215 't': *
±r2
++='\t'; ;

217 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

219 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

221 i‡(
uc
>=0xD800 && uc<=0xDBFF)

223 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

224 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

225 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

226 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

229 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

231 
Àn
) {

232 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

233 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

234 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

235 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

237 
±r2
+=
Àn
;

239 : *
±r2
++=*
±r
; ;

241 
±r
++;

244 *
±r2
=0;

245 i‡(*
±r
=='\"')Ötr++;

246 
ôem
->
vÆue°rög
=
out
;

247 
ôem
->
ty≥
=
cJSON_Såög
;

248  
±r
;

249 
	}
}

252 *
	$¥öt_°rög_±r
(c⁄° *
°r
,
¥ötbuf„r
 *
p
)

254 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0,
Êag
=0;
tokí
;

256 
±r
=
°r
;*±r;±r++Ë
Êag
|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;

257 i‡(!
Êag
)

259 
Àn
=
±r
-
°r
;

260 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

261 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

262 i‡(!
out
)  0;

263 
±r2
=
out
;*ptr2++='\"';

264 
	`°r˝y
(
±r2
,
°r
);

265 
±r2
[
Àn
]='\"';

266 
±r2
[
Àn
+1]=0;

267  
out
;

270 i‡(!
°r
)

272 i‡(
p
Ë
out
=
	`ísuª
(p,3);

273 
out
=(*)
	`cJSON_mÆloc
(3);

274 i‡(!
out
)  0;

275 
	`°r˝y
(
out
,"\"\"");

276  
out
;

278 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

280 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

281 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

282 i‡(!
out
)  0;

284 
±r2
=
out
;
±r
=
°r
;

285 *
±r2
++='\"';

286 *
±r
)

288 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

291 *
±r2
++='\\';

292 
tokí
=*
±r
++)

294 '\\': *
±r2
++='\\'; ;

295 '\"': *
±r2
++='\"'; ;

296 '\b': *
±r2
++='b'; ;

297 '\f': *
±r2
++='f'; ;

298 '\n': *
±r2
++='n'; ;

299 '\r': *
±r2
++='r'; ;

300 '\t': *
±r2
++='t'; ;

301 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

305 *
±r2
++='\"';*ptr2++=0;

306  
out
;

307 
	}
}

309 *
	$¥öt_°rög
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
,p);
	}
}

312 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

313 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

314 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

315 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

316 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

317 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

320 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

323 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

325 c⁄° *
íd
=0;

326 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

327 
ï
=0;

328 i‡(!
c
)  0;

330 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

331 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

334 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

335 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

336  
c
;

337 
	}
}

339 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

342 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1,0);
	}
}

343 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0,0);
	}
}

345 *
	$cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
)

347 
¥ötbuf„r
 
p
;

348 
p
.
buf„r
=(*)
	`cJSON_mÆloc
(
¥ebuf„r
);

349 
p
.
Àngth
=
¥ebuf„r
;

350 
p
.
off£t
=0;

351  
	`¥öt_vÆue
(
ôem
,0,
fmt
,&
p
);

352  
p
.
buf„r
;

353 
	}
}

357 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

359 i‡(!
vÆue
)  0;

360 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

361 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

362 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

363 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

364 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

365 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

366 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

368 
ï
=
vÆue
; 0;

369 
	}
}

372 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

374 *
out
=0;

375 i‡(!
ôem
)  0;

376 i‡(
p
)

378 (
ôem
->
ty≥
)&255)

380 
cJSON_NULL
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"null"); ;}

381 
cJSON_FÆ£
: {
out
=
	`ísuª
(
p
,6); i‡(outË
	`°r˝y
(out,"false"); ;}

382 
cJSON_True
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"true"); ;}

383 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,
p
);;

384 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,
p
);;

385 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,
p
);;

386 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,
p
);;

391 (
ôem
->
ty≥
)&255)

393 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

394 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

395 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

396 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,0);;

397 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,0);;

398 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,0);;

399 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,0);;

402  
out
;

403 
	}
}

406 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

408 
cJSON
 *
chûd
;

409 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

411 
ôem
->
ty≥
=
cJSON_Aºay
;

412 
vÆue
=
	`skù
(value+1);

413 i‡(*
vÆue
==']')  value+1;

415 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

416 i‡(!
ôem
->
chûd
)  0;

417 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

418 i‡(!
vÆue
)  0;

420 *
vÆue
==',')

422 
cJSON
 *
√w_ôem
;

423 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

424 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

425 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

426 i‡(!
vÆue
)  0;

429 i‡(*
vÆue
==']')  value+1;

430 
ï
=
vÆue
; 0;

431 
	}
}

434 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

436 **
íåõs
;

437 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

438 
cJSON
 *
chûd
=
ôem
->child;

439 
numíåõs
=0,
i
=0,
Áû
=0;

440 
size_t
 
tm∂í
=0;

443 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

445 i‡(!
numíåõs
)

447 i‡(
p
Ë
out
=
	`ísuª
(p,3);

448 
out
=(*)
	`cJSON_mÆloc
(3);

449 i‡(
out
Ë
	`°r˝y
(out,"[]");

450  
out
;

453 i‡(
p
)

456 
i
=
p
->
off£t
;

457 
±r
=
	`ísuª
(
p
,1);i‡(!±rË 0; *±r='[';Ö->
off£t
++;

458 
chûd
=
ôem
->child;

459 
chûd
 && !
Áû
)

461 
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,
p
);

462 
p
->
off£t
=
	`upd©e
(p);

463 i‡(
chûd
->
√xt
Ë{
Àn
=
fmt
?2:1;
±r
=
	`ísuª
(
p
,Àn+1);i‡(!±rË 0;*±r++=',';if(fmt)*±r++=' ';*±r=0;p->
off£t
+=len;}

464 
chûd
=chûd->
√xt
;

466 
±r
=
	`ísuª
(
p
,2);if (!ptr)  0; *ptr++=']';*ptr=0;

467 
out
=(
p
->
buf„r
)+
i
;

472 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

473 i‡(!
íåõs
)  0;

474 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

476 
chûd
=
ôem
->child;

477 
chûd
 && !
Áû
)

479 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,0);

480 
íåõs
[
i
++]=
ªt
;

481 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

482 
chûd
=chûd->
√xt
;

486 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

488 i‡(!
out
Ë
Áû
=1;

491 i‡(
Áû
)

493 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

494 
	`cJSON_‰ì
(
íåõs
);

499 *
out
='[';

500 
±r
=
out
+1;*ptr=0;

501 
i
=0;i<
numíåõs
;i++)

503 
tm∂í
=
	`°æí
(
íåõs
[
i
]);
	`mem˝y
(
±r
,entries[i],tmplen);ptr+=tmplen;

504 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

505 
	`cJSON_‰ì
(
íåõs
[
i
]);

507 
	`cJSON_‰ì
(
íåõs
);

508 *
±r
++=']';*ptr++=0;

510  
out
;

511 
	}
}

514 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

516 
cJSON
 *
chûd
;

517 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

519 
ôem
->
ty≥
=
cJSON_Obje˘
;

520 
vÆue
=
	`skù
(value+1);

521 i‡(*
vÆue
=='}')  value+1;

523 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

524 i‡(!
ôem
->
chûd
)  0;

525 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

526 i‡(!
vÆue
)  0;

527 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

528 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

529 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

530 i‡(!
vÆue
)  0;

532 *
vÆue
==',')

534 
cJSON
 *
√w_ôem
;

535 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

536 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

537 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

538 i‡(!
vÆue
)  0;

539 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

540 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

541 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

542 i‡(!
vÆue
)  0;

545 i‡(*
vÆue
=='}')  value+1;

546 
ï
=
vÆue
; 0;

547 
	}
}

550 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

552 **
íåõs
=0,**
«mes
=0;

553 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

554 
cJSON
 *
chûd
=
ôem
->child;

555 
numíåõs
=0,
Áû
=0;

556 
size_t
 
tm∂í
=0;

558 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

560 i‡(!
numíåõs
)

562 i‡(
p
Ë
out
=
	`ísuª
’,
fmt
?
dïth
+4:3);

563 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

564 i‡(!
out
)  0;

565 
±r
=
out
;*ptr++='{';

566 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

567 *
±r
++='}';*ptr++=0;

568  
out
;

570 i‡(
p
)

573 
i
=
p
->
off£t
;

574 
Àn
=
fmt
?2:1; 
±r
=
	`ísuª
(
p
,len+1); if (!ptr)  0;

575 *
±r
++='{'; i‡(
fmt
Ë*±r++='\n'; *±r=0; 
p
->
off£t
+=
Àn
;

576 
chûd
=
ôem
->chûd;
dïth
++;

577 
chûd
)

579 i‡(
fmt
)

581 
±r
=
	`ísuª
(
p
,
dïth
); if (!ptr)  0;

582 
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

583 
p
->
off£t
+=
dïth
;

585 
	`¥öt_°rög_±r
(
chûd
->
°rög
,
p
);

586 
p
->
off£t
=
	`upd©e
(p);

588 
Àn
=
fmt
?2:1;

589 
±r
=
	`ísuª
(
p
,
Àn
); if (!ptr)  0;

590 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

591 
p
->
off£t
+=
Àn
;

593 
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,
p
);

594 
p
->
off£t
=
	`upd©e
(p);

596 
Àn
=(
fmt
?1:0)+(
chûd
->
√xt
?1:0);

597 
±r
=
	`ísuª
(
p
,
Àn
+1); if (!ptr)  0;

598 i‡(
chûd
->
√xt
Ë*
±r
++=',';

599 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

600 
p
->
off£t
+=
Àn
;

601 
chûd
=chûd->
√xt
;

603 
±r
=
	`ísuª
(
p
,
fmt
?(
dïth
+1):2); if (!ptr)  0;

604 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

605 *
±r
++='}';*ptr=0;

606 
out
=(
p
->
buf„r
)+
i
;

611 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

612 i‡(!
íåõs
)  0;

613 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

614 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

615 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

616 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

619 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

620 
chûd
)

622 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
,0);

623 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,0);

624 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

625 
chûd
=chûd->
√xt
;

629 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

630 i‡(!
out
Ë
Áû
=1;

633 i‡(
Áû
)

635 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

636 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

641 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

642 
i
=0;i<
numíåõs
;i++)

644 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

645 
tm∂í
=
	`°æí
(
«mes
[
i
]);
	`mem˝y
(
±r
,names[i],tmplen);ptr+=tmplen;

646 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

647 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

648 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

649 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

650 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

653 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

654 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

655 *
±r
++='}';*ptr++=0;

657  
out
;

658 
	}
}

661 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

662 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

663 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

666 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

668 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

671 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

672 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

673 
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(!(ôem->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& iãm->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=(*)°rög;ôem->ty≥|=cJSON_SåögIsC⁄°;
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

674 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

675 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

677 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

678 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

679 
cJSON
 *
	$cJSON_DëachIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
) {

680 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

681 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

682 
	$cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay2
◊ºay,c));
	}
}

683 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

684 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

687 
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;i‡(!cË{
	`cJSON_AddIãmToAºay
(array,newitem);;}

688 
√wôem
->
√xt
=
c
;√wôem->
¥ev
=c->¥ev;c->¥evÚewôem;i‡(c==
¨øy
->
chûd
Ë¨øy->chûdÚewôem; √wôem->¥ev->√xtÚewôem;
	}
}

689 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

690 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

691 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

692 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

695 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

696 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

697 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

698 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

699 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

700 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

701 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

702 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

705 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

706 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

707 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

708 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

711 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

713 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

715 i‡(!
ôem
)  0;

717 
√wôem
=
	`cJSON_New_Iãm
();

718 i‡(!
√wôem
)  0;

720 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

721 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

722 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

724 i‡(!
ªcur£
Ë 
√wôem
;

726 
˝å
=
ôem
->
chûd
;

727 
˝å
)

729 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

730 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

731 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

732 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

733 
˝å
=˝å->
√xt
;

735  
√wôem
;

736 
	}
}

738 
	$cJSON_Möify
(*
js⁄
)

740 *
öto
=
js⁄
;

741 *
js⁄
)

743 i‡(*
js⁄
==' ') json++;

744 i‡(*
js⁄
=='\t') json++;

745 i‡(*
js⁄
=='\r') json++;

746 i‡(*
js⁄
=='\n') json++;

747 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

748 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

749 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

750 *
öto
++=*
js⁄
++;

752 *
öto
=0;

753 
	}
}

	@client_tool/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

40 
	#cJSON_IsRe„ªn˚
 256

	)

41 
	#cJSON_SåögIsC⁄°
 512

	)

44 
	scJSON
 {

45 
cJSON
 *
√xt
,*
¥ev
;

46 
cJSON
 *
chûd
;

48 
ty≥
;

50 *
vÆue°rög
;

51 
vÆueöt
;

52 
vÆuedoubÀ
;

54 *
°rög
;

55 } 
	tcJSON
;

57 
	scJSON_Hooks
 {

58 *(*
mÆloc_‚
)(
size_t
 
sz
);

59 (*
‰ì_‚
)(*
±r
);

60 } 
	tcJSON_Hooks
;

63 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

67 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

69 *
cJSON_Pröt
(
cJSON
 *
ôem
);

71 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

73 *
cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
);

75 
cJSON_Dñëe
(
cJSON
 *
c
);

78 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

80 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

82 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

85 c⁄° *
cJSON_GëEº‹På
();

88 
cJSON
 *
cJSON_Cª©eNuŒ
();

89 
cJSON
 *
cJSON_Cª©eTrue
();

90 
cJSON
 *
cJSON_Cª©eFÆ£
();

91 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

92 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

93 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

94 
cJSON
 *
cJSON_Cª©eAºay
();

95 
cJSON
 *
cJSON_Cª©eObje˘
();

98 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

99 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

100 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

101 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

104 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

105 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

106 
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

108 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

109 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

112 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

113 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

114 
cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
);

115 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

116 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

119 
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

120 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

121 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

124 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

130 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

132 
cJSON_Möify
(*
js⁄
);

135 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

136 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

137 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

138 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

139 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

140 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

143 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

144 
	#cJSON_SëNumbîVÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

146 #ifde‡
__˝lu•lus


	@client_tool/file_tool.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<löux/io˘l.h
>

4 
	~<löux/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<uni°d.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~"fûe_toﬁ.h
"

13 
	$gë_fûe_Àn
(*
fûe_«me
)

15 
ªt
 = -1;

16 
°©
 
fûe_°©
;

17 
ªt
 = 
	`°©
(
fûe_«me
, &
fûe_°©
);

18 i‡(
ªt
 == 0)

20 
ªt
 = 
fûe_°©
.
°_size
;

22  
ªt
;

23 
	}
}

25 *
	$ªad_ãxt
(*
fûe_«me
)

27 *
ªt_±r
 = 
NULL
;

28 
fûe_Àn
 = 
	`gë_fûe_Àn
(
fûe_«me
);

29 i‡(
fûe_Àn
 > 0)

31 
fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
);

32 i‡(
fd
 > 0)

34 
ªt_±r
 = 
	`mÆloc
(
fûe_Àn
 + 1);

35 
	`ªad
(
fd
, 
ªt_±r
, 
fûe_Àn
);

36 
ªt_±r
[
fûe_Àn
] = 0;

37 
	`˛o£
(
fd
);

40  
ªt_±r
;

41 
	}
}

43 
	$wrôe_fûe
(*
fûe_«me
, 
mode
, *
buf
, 
size
)

45 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 
mode
);

46 i‡(
fd
 > 0)

48 
	`wrôe
(
fd
, 
buf
, 
size
);

49 
	`˛o£
(
fd
);

52 
	}
}

54 
	$wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
)

56 
	`wrôe_fûe
(
fûe_«me
, 0644, 
c⁄ã¡
, 
	`°æí
(content));

58 
	}
}

60 
cJSON
 *
	$ªad_js⁄_‰om_fûe
(*
fûe_«me
)

62 
cJSON
 *
±r
 = 
NULL
;

63 *
ãxt
 = 
	`ªad_ãxt
(
fûe_«me
);

64 i‡(
ãxt
)

66 
±r
 = 
	`cJSON_P¨£
(
ãxt
);

67 
	`‰ì
(
ãxt
);

69  
±r
;

70 
	}
}

72 
	$wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
)

74 *
°r
 = 
	`cJSON_Pröt
(
js⁄
);

75 i‡(
°r
)

77 
	`wrôe_ãxt
(
fûe_«me
, 
°r
);

78 
	`‰ì
(
°r
);

81 
	}
}

83 
	$wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
)

85 
	`wrôe_fûe
(
fûe_«me
, 0755, 
c⁄ã¡
, 
	`°æí
(content));

87 
	}
}

89 
	$≠≥nd_löe
(*
fûe_«me
, *
löe
)

91 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_APPEND
 | 
O_WRONLY
);

92 i‡(
fd
 > 0)

94 
	`wrôe
(
fd
, 
löe
, 
	`°æí
(line));

95 
	`˛o£
(
fd
);

98 
	}
}

103 
	$fûe_toﬁ_föd_dú
(*
∑th
)

105 
ªt
 = 0;

106 
°©
 
fûe_°©
;

107 
°©_ªt
 = 
	`°©
(
∑th
, &
fûe_°©
);

108 i‡(
°©_ªt
 == 0)

110 
mode_t
 
∑th_mode
 = 
fûe_°©
.
°_mode
;

111 i‡(
	`S_ISDIR
(
∑th_mode
))

113 
ªt
 = 1;

117 
ªt
 = -1;

120  
ªt
;

122 
	}
}

124 
	$fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
)

126 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

127 i‡(
föd
 == 0)

129 
	`mkdú
(
∑th
, 
mode
);

132 
	}
}

134 
	$fûe_toﬁ_ªmove_dú
(*
∑th
)

136 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

137 i‡(
föd
 == 1)

140 
	`rmdú
(
∑th
);

143 
	}
}

	@client_tool/file_tool.h

1 #i‚de‡
_FILE_TOOL_H_


2 
	#_FILE_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~"cJSON.h
"

7 *
ªad_ãxt
(*
fûe_«me
);

8 
wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
);

9 
wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
);

10 
≠≥nd_löe
(*
fûe_«me
, *
löe
);

13 
wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
);

14 
cJSON
 *
ªad_js⁄_‰om_fûe
(*
fûe_«me
);

16 
fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
);

17 
fûe_toﬁ_ªmove_dú
(*
∑th
);

	@client_tool/main.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<f˙é.h
>

9 
	~<¨∑/öë.h
>

10 
	~<sys/sockë.h
>

11 
	~<¨∑/öë.h
>

12 
	~<√töë/ö.h
>

14 
	~"cJSON.h
"

15 
	~"√t_toﬁ.h
"

16 
	~"fûe_toﬁ.h
"

18 
	gcgi_mode
=0;

20 
	$gë_ch¨_‰om_utf8
(*
utf8
)

22 
ªt
 = 0xff;

23 i‡(*
utf8
 >= '0' && *utf8 <= '9')

25 
ªt
 = *
utf8
 - '0';

27 i‡(*
utf8
 >= 'a' && *utf8 <= 'f')

29 
ªt
 = *
utf8
 - 'a' + 10;

31 i‡(*
utf8
 >= 'A' && *utf8 <= 'F')

33 
ªt
 = *
utf8
 - 'A' + 10;

35  
ªt
;

36 
	}
}

38 
	$decode_utf8_ch¨
(*
utf8
)

40 
tmp1
 = 0;

41 
tmp2
 = 0;

42 
ªt
 = 0;

43 
tmp1
 = 
	`gë_ch¨_‰om_utf8
(
utf8
);

44 
tmp2
 = 
	`gë_ch¨_‰om_utf8
(
utf8
 + 1);

45 
ªt
 = 
tmp1
 * 16 + 
tmp2
;

46  
ªt
;

47 
	}
}

49 *
	$decode_utf8_°r
(*
°r
)

53 
Àn
 = 
	`°æí
((c⁄° *)
°r
);

54 *
tmp_°r
 = (*)
	`mÆloc
(
Àn
 + 1);

55 i‡(
tmp_°r
)

57 
	`mem£t
(
tmp_°r
, 0, 
Àn
 + 1);

58 
i
 = 0, 
j
 = 0;

60 
i
 < 
Àn
)

62 
tmp
;

63 i‡(
°r
[
i
] == '%')

65 
tmp
 = 
	`decode_utf8_ch¨
(
°r
 + 
i
 + 1);

66 
i
 += 3;

70 
tmp
 = 
°r
[
i
];

71 
i
++;

73 
tmp_°r
[
j
] = 
tmp
;

74 
j
++;

77  
tmp_°r
;

78 
	}
}

80 * 
	$gëcgid©a
(
FILE
* 
Â
, * 
ªque°mëhod
)

82 * 
öput
;

83 *
gë_öput
;

84 
Àn
;

85 
i
 = 0;

86 *
ªt
 = 
NULL
;

88 i‡(!
	`°rcmp
(
ªque°mëhod
, "GET"))

90 
gë_öput
 = 
	`gëív
("QUERY_STRING");

91 i‡(
gë_öput
)

93 
öput
 = 
	`°rdup
(
gë_öput
);

97 
öput
 = 
NULL
;

99 
ªt
 = 
öput
;

101 i‡(!
	`°rcmp
(
ªque°mëhod
, "POST"))

103 
Àn
 = 
	`©oi
(
	`gëív
("CONTENT_LENGTH"));

104 i‡(
Àn
 > 0)

106 
öput
 = (*)
	`mÆloc
(
Àn
 + 1);

108 
ªmaö_Àn
 = 
Àn
;

109 
ªmaö_Àn
--)

111 i‡(
	`„of
(
Â
))

115 
öput
[
i
++] = ()
	`fgëc
(
Â
);

117 
öput
[
Àn
] = 0;

118 
ªt
 = 
öput
;

121  
ªt
;

122 
	}
}

124 
	$dump_JSON
(
cJSON
 *
obj
)

126 *
∑ylﬂd
 = 
	`cJSON_Pröt
(
obj
);

127 i‡(
∑ylﬂd
)

129 
	`¥ötf
("%s\n", 
∑ylﬂd
);

130 
	`‰ì
(
∑ylﬂd
);

133 
	}
}

135 
	$ouçut_js⁄
(
cJSON
 *
obj
)

137 i‡(
cgi_mode
)

139 
	`¥ötf
("Content-type:Åext/plain\r\n\r\n");

141 i‡(
obj
)

143 
	`dump_JSON
(
obj
);

147 
	`¥ötf
("null\n");

150 
	}
}

152 
	#VPNCTRL_SERVER_BASE
 (4100)

	)

153 
	#VPNCTRL_MAX_TUNNELS
 (5)

	)

155 
	$h™dÀ_gë_vp‹t_⁄
()

157 
cJSON
 *
˘æ_ª•⁄£
 = 
	`cJSON_Cª©eAºay
();

158 
i
;

159 
i
 = 0; i < 
VPNCTRL_MAX_TUNNELS
; i++)

161 
fûe
[200];

162 
	`•rötf
(
fûe
, "/ëc/sôe/sôe%d.c⁄f", 
i
);

163 
cJSON
 *
ôem
 = 
	`ªad_js⁄_‰om_fûe
(
fûe
);

164 i‡(!
ôem
)

166 
ôem
 = 
	`cJSON_Cª©eObje˘
();

170 
if_«me
[100];

171 
	`•rötf
(
if_«me
, "sôe%d", 
i
);

172 
buf
[100] = "";

173 
ªt
 = 
	`√t_toﬁ_gë_if_ù
(
if_«me
, 
buf
);

174 i‡(
ªt
 == 0)

176 
	`cJSON_AddSåögToObje˘
(
ôem
, "vù", 
buf
);

179 
	`cJSON_AddIãmToAºay
(
˘æ_ª•⁄£
, 
ôem
);

181 
	`ouçut_js⁄
(
˘æ_ª•⁄£
);

182 
	`cJSON_Dñëe
(
˘æ_ª•⁄£
);

184 
	}
}

186 
	$maö
(
¨gc
, **
¨gv
)

188 
ªt
 = 0;

190 *
a˘i⁄
 = 
NULL
;

191 *
èrgë_ho°
 = 
NULL
;;

192 i‡(
¨gc
 == 2)

194 
a˘i⁄
 = 
¨gv
[1];

195 i‡(
	`°rcmp
(
a˘i⁄
, "vport_on") == 0)

197 
	`h™dÀ_gë_vp‹t_⁄
();

202 
ªt
 = -1;

205  
ªt
;

206 
	}
}

	@client_tool/net_tool.c

1 
	~<°dio.h
>

2 
	~<sys/sockë.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/time.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/£À˘.h
>

7 
	~<√töë/ö.h
>

8 
	~<√töë/ù.h
>

9 
	~<√töë/ù_icmp.h
>

10 
	~<√t/rouã.h
>

11 
	~<√t/if.h
>

12 
	~<löux/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<°rögs.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<√tdb.h
>

19 
	~<¨∑/öë.h
>

20 
	~"cJSON.h
"

22 
	#PACKET_SIZE
 (4096)

	)

23 
	#MAX_ALLOC_LEN
 (4096)

	)

25 #i‚de‡
FREE_PTR


26 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

29 
	$gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

31 
ªt
 = -1;

32 
i‰eq
 
i‰
;

33 
sockaddr
 
ù_addr
;

34 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

35 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

36 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

37 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

38 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

39 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

40 
ªt
 = 0;

41 
	`˛o£
(
sockfd
);

43  
ªt
;

44 
	}
}

46 
	$gë_if_√tmask
(*
if_«me
, 
sockaddr
 *
sock
)

48 
ªt
 = -1;

49 
i‰eq
 
i‰
;

50 
sockaddr
 
ù_addr
;

51 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

52 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

53 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

54 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

55 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFNETMASK
, &
i‰
) == 0) {

56 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

57 
ªt
 = 0;

58 
	`˛o£
(
sockfd
);

60  
ªt
;

61 
	}
}

63 
	$√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
)

65 
ªt
 = -1;

66 
sockaddr
 
ù_addr
;

67 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

68 
ªt
 = 
	`gë_if_addr
(
if_«me
, &
ù_addr
);

69 i‡(
ªt
 == 0)

71 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

73  
ªt
;

74 
	}
}

76 
	$√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
)

78 
ªt
 = -1;

79 
sockaddr
 
ù_addr
;

80 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

81 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
ù_addr
);

82 i‡(
ªt
 == 0)

84 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

86  
ªt
;

87 
	}
}

89 
	$c⁄vît_sub√t_to_°rög
(
sockaddr
 *
ù
, sockadd∏*
mask
, *
ªt_buf
)

91 
sockaddr_ö
 *
√tw‹k_∑π
 = (sockaddr_ö *)
ù
;;

92 
sockaddr_ö
 *
mask_ö
 = (sockaddr_ö *)
mask
;

93 
√tw‹k_∑π_Àn
 = 0;

95 
√tw‹k_∑π
->
sö_addr
.
s_addr
 =Çëw‹k_∑π->sö_addr.s_add∏& 
mask_ö
->sin_addr.s_addr;

96 
	`¥ötf
("mask = %08x\n", 
mask_ö
->
sö_addr
.
s_addr
);

97 
i
;

98 
i
 = 0; i < 32; i++)

100 
bô
 = 1 << 
i
;

101 i‡(
mask_ö
->
sö_addr
.
s_addr
 & 
bô
)

103 
√tw‹k_∑π_Àn
++;

107 
	`öë_¡›
(
AF_INET
, &
√tw‹k_∑π
->
sö_addr
, 
ªt_buf
, 20);

108 
√tw‹k_∑π_Àn_buf
[10];

109 
	`•rötf
(
√tw‹k_∑π_Àn_buf
, "/%d", 
√tw‹k_∑π_Àn
);

110 
	`°rˇt
(
ªt_buf
, 
√tw‹k_∑π_Àn_buf
);

112 
	}
}

114 
	$√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
)

116 
ªt
 = -1;

117 
sockaddr
 
ù_addr
;

118 
sockaddr
 
mask_addr
;

119 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
mask_addr
Ë|| 
	`gë_if_addr
(if_«me, &
ù_addr
);

120 i‡(
ªt
 == 0)

122 
	`c⁄vît_sub√t_to_°rög
(&
ù_addr
, &
mask_addr
, 
buf
);

124  
ªt
;

125 
	}
}

127 
	$√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
)

129 
ªt
 = -1;

130 
i‰eq
 
i‰
;

131 
sockaddr
 
ù_addr
;

132 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

133 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

134 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

135 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

136 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) == 0) {

137 
i
;

138 
i
 = 0; i < 6; i++)

140 
	`•rötf
(
buf
 + 2*
i
, "%02x", ()
i‰
.
i‰_hwaddr
.
ß_d©a
[i]);

142 
ªt
 = 0;

143 
	`˛o£
(
sockfd
);

145  
ªt
;

146 
	}
}

148 
	$ˇl_chksum
(*
addr
, 
Àn
)

150 
∆e·
=
Àn
;

151 
sum
=0;

152 *
w
=
addr
;

153 
™swî
=0;

154 
∆e·
 > 1)

156 
sum
 +*
w
++;

157 
∆e·
 -= 2;

160 if–
∆e·
 == 1)

162 *(*)(&
™swî
Ë*(*)
w
;

163 
sum
 +
™swî
;

166 
sum
 = (sum >> 16) + (sum & 0xffff);

167 
sum
 += (sum >> 16);

168 
™swî
 = ~
sum
;

169  
™swî
;

170 
	}
}

173 
	$ˇl_time_öãrvÆ
(
timevÆ
 *
ﬁd_time
, timevÆ *
now_time
)

175 
öãrvÆ_m£c_öt
 = 0;

176 
öãrvÆ_m£c_dŸ
 = 0;

177 
u£d_time
 = 0;

178 
buf
[20];

179 i‡(
now_time
->
tv_u£c
 < 
ﬁd_time
->tv_usec)

181 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec - 1) * 1000;

182 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec)/1000;

183 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec))%1000;

187 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec) * 1000;

188 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec)/1000;

189 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec))%1000;

191 
	`•rötf
(
buf
, "%Œu.%Œu", 
öãrvÆ_m£c_öt
, 
öãrvÆ_m£c_dŸ
);

192 
u£d_time
 = 
	`©of
(
buf
);

193  
u£d_time
;

194 
	}
}

197 
	$pög
(
ö_addr
 *
d°ù
, 
timeout
)

199 
timevÆ
 *
tvÆ
;

200 
maxfds
 = 0;

201 
fd_£t
 
ªadfds
;

202 
u£d_time
 = 0;

204 
sockaddr_ö
 
addr
;

205 
sockaddr_ö
 
‰om
;

207 
	`bzîo
(&
addr
,(addr));

208 
addr
.
sö_Ámûy
 = 
AF_INET
;

209 
addr
.
sö_addr
.
s_addr
 = 
d°ù
->s_addr;

211 
sockfd
;

213 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

214 i‡(
sockfd
 > 0)

216 
timevÆ
 
timeo
;

218 
timeo
.
tv_£c
 = 
timeout
;

219 
timeo
.
tv_u£c
 = 0;

221 i‡(
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
timeo
, (timeo)) == 0)

223 
£nd∑ckë
[
PACKET_SIZE
];

224 
ªcv∑ckë
[
PACKET_SIZE
];

226 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

228 
pid_t
 
pid
;

230 
pid
=
	`gëpid
();

232 
ù
 *
ùh
;

233 
icmp
 *icmp;

235 
icmp
=(icmp*)
£nd∑ckë
;

236 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

237 
icmp
->
icmp_code
=0;

238 
icmp
->
icmp_cksum
=0;

239 
icmp
->
icmp_£q
=0;

240 
icmp
->
icmp_id
=
pid
;

241 
tvÆ
(
timevÆ
 *)
icmp
->
icmp_d©a
;

242 
	`gëtimeofday
(
tvÆ
,
NULL
);

243 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

245 
n
;

247 
i
;

248 
i
 = 0; i < 5; i++)

250 
n
 = 
	`£ndto
(
sockfd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

252 i‡(
n
 > 0)

259 
	`FD_ZERO
(&
ªadfds
);

260 
	`FD_SET
(
sockfd
, &
ªadfds
);

261 
maxfds
 = 
sockfd
 + 1;

262 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

263 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

266 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

267 
‰omÀn
 = (
‰om
);

268 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

269 i‡(
n
 > 1)

271 
timevÆ
 *
pkt_tv
;

272 
timevÆ
 
now_tv
;

273 
	`gëtimeofday
(&
now_tv
, 
NULL
);

274 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

276 i‡(
‰om
.
sö_addr
.
s_addr
 =
d°ù
->s_addr)

278 
ùh
 = (
ù
 *)
ªcv∑ckë
;

279 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

282 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
 && icmp->
icmp_id
 =
pid
)

285 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

302 
	`˛o£
(
sockfd
);

304  
u£d_time
;

305 
	}
}

307 
	$√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
)

309 
u£d_time
 = 0;

310 
ho°ít
 *
he
 = 
	`gëho°by«me
(
ho°
);

311 i‡(
he
 && he->
h_addπy≥
 =
AF_INET
)

313 
u£d_time
 = 
	`pög
((
ö_addr
 *)
he
->
h_addr
, 
timeout
);

317 
	`¥ötf
("C™'àgë ho° o‡%s\n", 
ho°
);

319  
u£d_time
;

320 
	}
}

322 
	$¸óã_pög_sockë
()

324  
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

325 
	}
}

327 
	$£nd_pög_∑ckës
(
fd
, 
cJSON
 *
ho°s
)

329 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

330 
i
;

331 
i
 = 0; i < 
¨øy_cou¡
; i++)

333 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

334 i‡(
ôm
)

336 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, "ip");

337 i‡(
ho°_ôem
)

339 
sockaddr_ö
 
addr
;

342 
	`bzîo
(&
addr
,(addr));

343 
addr
.
sö_Ámûy
 = 
AF_INET
;

344 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

346 
£nd∑ckë
[
PACKET_SIZE
];

348 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

351 
pid_t
 
pid
;

352 
pid
=
	`gëpid
();

353 
pid
 +
i
;

355 
icmp
 *icmp;

357 
icmp
=(icmp*)
£nd∑ckë
;

358 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

359 
icmp
->
icmp_code
=0;

360 
icmp
->
icmp_cksum
=0;

361 
icmp
->
icmp_£q
=0;

362 
icmp
->
icmp_id
=
pid
;

363 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

364 
	`gëtimeofday
(
tvÆ
,
NULL
);

365 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

367 
j
;

368 
j
 = 0; j < 2; j++)

370 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

376 
	}
}

378 
	$£nd_pög_∑ckës2
(
fd
, 
cJSON
 *
ho°s
, *
ù_«me
)

380 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

381 
i
;

382 
i
 = 0; i < 
¨øy_cou¡
; i++)

384 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

385 i‡(
ôm
)

387 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, 
ù_«me
);

388 i‡(
ho°_ôem
)

390 
sockaddr_ö
 
addr
;

393 
	`bzîo
(&
addr
,(addr));

394 
addr
.
sö_Ámûy
 = 
AF_INET
;

395 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

397 
£nd∑ckë
[
PACKET_SIZE
];

399 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

402 
pid_t
 
pid
;

403 
pid
=
	`gëpid
();

404 
pid
 +
i
;

406 
icmp
 *icmp;

408 
icmp
=(icmp*)
£nd∑ckë
;

409 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

410 
icmp
->
icmp_code
=0;

411 
icmp
->
icmp_cksum
=0;

412 
icmp
->
icmp_£q
=0;

413 
icmp
->
icmp_id
=
pid
;

414 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

415 
	`gëtimeofday
(
tvÆ
,
NULL
);

416 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

418 
j
;

419 
j
 = 0; j < 2; j++)

421 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

427 
	}
}

429 
	$£t_deÁut_œãncy
(
cJSON
 *
ho°s
)

431 
j
;

432 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

433 
j
 = 0; j < 
¨øy_cou¡
; j++)

435 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

436 i‡(
ôem
)

438 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

439 i‡(!
œãncy_ôem
)

441 
	`cJSON_AddNumbîToObje˘
(
ôem
, "latency", 0);

446 
	}
}

448 
	$£t_deÁut_œãncy2
(
cJSON
 *
ho°s
, *
œãncy_«me
)

450 
j
;

451 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

452 
j
 = 0; j < 
¨øy_cou¡
; j++)

454 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

455 i‡(
ôem
)

457 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

458 i‡(!
œãncy_ôem
)

460 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 0);

465 
	}
}

467 
	$ªcv_pög_∑ckës
(
sockfd
, 
cJSON
 *
ho°s
, 
timeout
)

469 
timevÆ
 
timeo
;

471 
timeo
.
tv_£c
 = 0;

472 
timeo
.
tv_u£c
 = 1000;

473 
sockaddr_ö
 
addr
;

474 
sockaddr_ö
 
‰om
;

475 
fd_£t
 
ªadfds
;

476 
u£d_time
;

477 
pid_t
 
pid
 = 
	`gëpid
();

479 
timevÆ
 
°¨t_time
;

480 
timevÆ
 
íd_time
;

481 
ªcv∑ckë
[
PACKET_SIZE
];

482 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

486 
	`FD_ZERO
(&
ªadfds
);

487 
	`FD_SET
(
sockfd
, &
ªadfds
);

488 
maxfds
 = 
sockfd
 + 1;

489 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

490 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

493 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

494 
‰omÀn
 = (
‰om
);

495 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

496 i‡(
n
 > 1)

498 
timevÆ
 *
pkt_tv
;

499 
timevÆ
 
now_tv
;

500 
	`gëtimeofday
(&
now_tv
, 
NULL
);

501 
ù
 *
ùh
;

502 
icmp
 *icmp;

503 
ùh
 = (
ù
 *)
ªcv∑ckë
;

504 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

505 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

506 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

508 
i
;

509 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

510 
i
 = 0; i < 
¨øy_cou¡
; i++)

512 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

513 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

514 i‡(
ôem
)

516 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "ip");

517 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

519 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

521 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

523 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

524 i‡(!
œãncy_ôem
)

526 
	`cJSON_AddNumbîToObje˘
(
ôem
, "œãncy", 
u£d_time
);

535 
	`gëtimeofday
(&
íd_time
, 
NULL
);

536 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

538 
	}
}

540 
	$ªcv_pög_∑ckës2
(
sockfd
, 
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

542 
timevÆ
 
timeo
;

544 
timeo
.
tv_£c
 = 0;

545 
timeo
.
tv_u£c
 = 1000;

546 
sockaddr_ö
 
addr
;

547 
sockaddr_ö
 
‰om
;

548 
fd_£t
 
ªadfds
;

549 
u£d_time
;

550 
pid_t
 
pid
 = 
	`gëpid
();

552 
timevÆ
 
°¨t_time
;

553 
timevÆ
 
íd_time
;

554 
ªcv∑ckë
[
PACKET_SIZE
];

555 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

559 
	`FD_ZERO
(&
ªadfds
);

560 
	`FD_SET
(
sockfd
, &
ªadfds
);

561 
maxfds
 = 
sockfd
 + 1;

562 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

563 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

566 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

567 
‰omÀn
 = (
‰om
);

568 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

569 i‡(
n
 > 1)

571 
timevÆ
 *
pkt_tv
;

572 
timevÆ
 
now_tv
;

573 
	`gëtimeofday
(&
now_tv
, 
NULL
);

574 
ù
 *
ùh
;

575 
icmp
 *icmp;

576 
ùh
 = (
ù
 *)
ªcv∑ckë
;

577 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

578 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

579 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

581 
i
;

582 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

583 
i
 = 0; i < 
¨øy_cou¡
; i++)

585 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

586 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

587 i‡(
ôem
)

589 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
ù_«me
);

590 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

592 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

594 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

596 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

597 i‡(!
œãncy_ôem
)

599 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 
u£d_time
);

608 
	`gëtimeofday
(&
íd_time
, 
NULL
);

609 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

611 
	}
}

638 
	$√t_toﬁ_pög_ho°s
(
cJSON
 *
ho°s
, 
timeout
)

640 
fd
 = 
	`¸óã_pög_sockë
();

641 i‡(
fd
 > 0)

643 
	`£nd_pög_∑ckës
(
fd
, 
ho°s
);

644 
	`ªcv_pög_∑ckës
(
fd
, 
ho°s
, 
timeout
);

645 
	`˛o£
(
fd
);

647 
	`£t_deÁut_œãncy
(
ho°s
);

649 
	}
}

651 
	$√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

653 
fd
 = 
	`¸óã_pög_sockë
();

654 i‡(
fd
 > 0)

656 
	`£nd_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
);

657 
	`ªcv_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
, 
œãncy_«me
, 
timeout
);

658 
	`˛o£
(
fd
);

660 
	`£t_deÁut_œãncy2
(
ho°s
, 
œãncy_«me
);

662 
	}
}

664 
	#ROUTE_FILE
 "/¥oc/√t/rouã"

	)

666 
	srouã_öfo


668 
	möãrÁ˚_buf
[20];

669 
	md°_buf
[20];

670 
	mgw_buf
[20];

671 
	mÊags_buf
[20];

672 
	mªf_buf
[20];

673 
	mu£_buf
[20];

674 
	mmëric_buf
[20];

675 
	mmask_buf
[20];

676 
	mmtu_buf
[20];

677 
	mwödow_buf
[20];

678 
rouã_öfo
 *
	m√xt
;

681 
	$dump_rouã
(
rouã_öfo
 *
rouã
)

683 
rouã_öfo
 *
cur
 = 
rouã
;

684 
	`¥ötf
("cur:%p\äext:%p\nd°: %s\tgw:%s\tmask:%s\n", 
cur
, cur->
√xt
, cur->
d°_buf
, cur->
gw_buf
, cur->
mask_buf
);

685 
	}
}

687 
	$check_rouã_if
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
)

689 
ªt
 = 0;

690 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

692 
ªt
 = 1;

694  
ªt
;

695 
	}
}

697 
	$gë_rouã_öfo
(*
buf
, 
rouã_öfo
 *
⁄e_rouã
)

699 *
tokí
 = 
NULL
;

700 *
ßve_±r1
 = 
NULL
;

701 
	`mem£t
(
⁄e_rouã
, 0, (
rouã_öfo
));

702 
tokí
 = 
	`°πok_r
(
buf
, "\t", &
ßve_±r1
);

703 
i
 = 0;

704 
tokí
)

706 
i
)

709 
	`°r˝y
(
⁄e_rouã
->
öãrÁ˚_buf
, 
tokí
);

712 
	`°r˝y
(
⁄e_rouã
->
d°_buf
, 
tokí
);

715 
	`°r˝y
(
⁄e_rouã
->
gw_buf
, 
tokí
);

718 
	`°r˝y
(
⁄e_rouã
->
Êags_buf
, 
tokí
);

721 
	`°r˝y
(
⁄e_rouã
->
ªf_buf
, 
tokí
);

724 
	`°r˝y
(
⁄e_rouã
->
u£_buf
, 
tokí
);

727 
	`°r˝y
(
⁄e_rouã
->
mëric_buf
, 
tokí
);

730 
	`°r˝y
(
⁄e_rouã
->
mask_buf
, 
tokí
);

733 
	`°r˝y
(
⁄e_rouã
->
mtu_buf
, 
tokí
);

736 
	`°r˝y
(
⁄e_rouã
->
wödow_buf
, 
tokí
);

744 
i
++;

745 
tokí
 = 
	`°πok_r
(
NULL
, "\t", &
ßve_±r1
);

748 
	}
}

750 
rouã_öfo
 *
	$gë_rouã_li°
()

752 
löe_buf
[1000];

753 
FILE
 *
fûe
 = 
	`f›í
(
ROUTE_FILE
, "r");

754 
rouã_öfo
 *
ªt
 = 
NULL
;

755 i‡(
fûe
)

757 
	`mem£t
(
löe_buf
, 0, (line_buf));

759 
	`fgës
(
löe_buf
, ÷öe_buf),
fûe
);

760 
rouã_öfo
 *
tmp
 = 
NULL
;

761 
	`fgës
(
löe_buf
, ÷öe_buf), 
fûe
))

763 
rouã_öfo
 *
⁄e_rouã
 = 
	`mÆloc
((route_info));

764 
	`gë_rouã_öfo
(
löe_buf
, 
⁄e_rouã
);

766 i‡(
tmp
 =
NULL
)

768 
ªt
 = 
⁄e_rouã
;

772 
tmp
->
√xt
 = 
⁄e_rouã
;

775 
tmp
 = 
⁄e_rouã
;

777 
	`f˛o£
(
fûe
);

779  
ªt
;

780 
	}
}

782 
	$‰ì_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

784 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

785 
cur
)

787 
rouã_öfo
 *
tmp
 = 
cur
;

788 
cur
 = cur->
√xt
;

789 
	`‰ì
(
tmp
);

792 
	}
}

794 
sockaddr
 
	$gë_sockaddr
(*
buf
)

796 *
íd±r
;

797 
sockaddr
 
addr
;

798 
numbî
 = 0;

799 
sockaddr_ö
 *
ùv4_addr
 = (sockaddr_ö *)&
addr
;

800 
ùv4_addr
->
sö_Ámûy
 = 
AF_INET
;

801 
ùv4_addr
->
sö_p‹t
 = 0;

802 
numbî
 = 
	`°πﬁl
(
buf
, &
íd±r
, 16);

803 
ùv4_addr
->
sö_addr
.
s_addr
 = (
ö_addr_t
)
numbî
;

804  
addr
;

805 
	}
}

807 
	$dñ_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

809 
πíåy
 
π
;

810 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

811 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

812 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

813 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

814 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

815 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

816 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

817 i‡(
sockfd
 > 0)

819 
	`io˘l
(
sockfd
, 
SIOCDELRT
, &
π
);

820 
	`˛o£
(
sockfd
);

823 
	}
}

825 
	$add_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

827 
πíåy
 
π
;

828 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

829 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

830 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

831 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

832 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

833 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

834 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

835 i‡(
sockfd
 > 0)

837 
	`io˘l
(
sockfd
, 
SIOCADDRT
, &
π
);

838 
	`˛o£
(
sockfd
);

841 
	}
}

843 
	$√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

845 
ªt
 = -1;

846 
i‰eq
 
i‰
;

847 
sockaddr
 
ù_addr
;

848 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

849 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

850 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

851 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

852 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

853 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

854 
ªt
 = 0;

855 
	`˛o£
(
sockfd
);

857  
ªt
;

858 
	}
}

860 
	$rouã_√ed_dñëe
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
, 
sockaddr
 *
if_addr
)

862 
ªt
 = 0;

863 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

866 
sockaddr
 
rouã_d°
;

867 
sockaddr
 
rouã_mask
;

868 
rouã_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

869 
rouã_mask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

870 
sockaddr_ö
 *
ö_rouã_d°
 = (sockaddr_ö *)&
rouã_d°
;

871 
sockaddr_ö
 *
ö_rouã_mask
 = (sockaddr_ö *)&
rouã_mask
;

872 
sockaddr_ö
 *
ö_if_addr
 = (sockaddr_ö *)
if_addr
;

873 i‡((
ö_rouã_d°
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr) !=

874 (
ö_if_addr
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr))

876 
ªt
 = 1;

879  
ªt
;

880 
	}
}

882 
	$dñ_rouãs_by_if
(
rouã_öfo
 *
fú°_rouã
, *
dev
)

884 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

885 
sockaddr
 
addr
;

886 
	`mem£t
(&
addr
, 0, (
sockaddr
));

887 
ªt
 = 
	`√t_toﬁ_gë_if_addr
(
dev
, &
addr
);

888 i‡(
ªt
 == 0)

890 
cur
)

892 i‡(
	`rouã_√ed_dñëe
(
cur
, 
dev
, &
addr
))

894 
	`dñ_⁄e_rouã
(
cur
);

896 
cur
 = cur->
√xt
;

900 
	}
}

902 
	$dump_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

904 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

905 
cur
)

907 
	`dump_rouã
(
cur
);

908 
cur
 = cur->
√xt
;

910 
	}
}

913 
	$√t_toﬁ_ª£t_rouãs
(*
dev
)

915 
rouã_öfo
 *
rouã_li°
 = 
	`gë_rouã_li°
();

916 i‡(
rouã_li°
)

919 
	`dñ_rouãs_by_if
(
rouã_li°
, 
dev
);

920 
	`‰ì_rouã_li°
(
rouã_li°
);

922 
	}
}

924 *
	$ªcv_d©a
(
sockfd
, *
Àn
)

926 
ssize_t
 
ªcv_Àn
 = 0;

927 
ssize_t
 
ªcv_Àn_tŸÆ
 = 0;

928 *
ªcv_±r
 = 
NULL
;

929 i‡(
sockfd
 > 0)

933 
ªcv_±r
 = 
	`ªÆloc
‘ecv_±r, 
ªcv_Àn_tŸÆ
 + 
MAX_ALLOC_LEN
);

934 i‡(
ªcv_±r
)

937 
	`mem£t
(
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 0, 
MAX_ALLOC_LEN
);

938 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 
MAX_ALLOC_LEN
, 0);

939 i‡(
ªcv_Àn
 > 0)

941 
ªcv_Àn_tŸÆ
 +
ªcv_Àn
;

943 if(
ªcv_Àn
 == 0)

949 
	`FREE_PTR
(
ªcv_±r
);

955 *
Àn
 = 
ªcv_Àn_tŸÆ
;

956  
ªcv_±r
;

957 
	}
}

959 *
	$√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
)

961 *
web
 = 
NULL
;

962 
ho°ít
 *
he
;

963 
sockaddr_ö
 
£rvî
;

964 
£nd_num
;

965 
sockfd
;

966 
ªt
;

967 if((
he
=
	`gëho°by«me
(
ho°
)))

969 
sockfd
=
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

970 
timevÆ
 
timeout
 = {8, 0};

971 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
timeout
, (timeout));

972 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
timeout
, (timeout));

973 if(
sockfd
 >= 0)

975 
	`bzîo
(&
£rvî
,(server));

976 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

977 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

978 
£rvî
.
sö_addr
 = *((
ö_addr
 *)
he
->
h_addr
);

979 
ªt
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *)&
£rvî
, (server));

980 if(
ªt
 >= 0)

982 
£nd_num
 = 
	`£nd
(
sockfd
, 
£nd_buf
, 
£nd_Àn
, 0);

983 i‡(
£nd_num
 > 0)

985 
web
 = 
	`ªcv_d©a
(
sockfd
, 
ªcv_Àn
);

988 
	`˛o£
(
sockfd
);

991  
web
;

992 
	}
}

994 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
)

996 
cJSON
 *
ªt
 = 
NULL
;

997 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

998 i‡(
°r_ªq
)

1000 
£nd_Àn
 = 
¥efix_size
 + 
	`°æí
(
°r_ªq
) + 1;

1002 *
£nd_buf
 = 
	`mÆloc
(
£nd_Àn
 + 4);

1003 *
£nd_d©a
 = 
£nd_buf
 + 4;

1004 *(
uöt32_t
*)
£nd_buf
 = 
	`ht⁄l
((uöt32_t)
£nd_Àn
);

1005 
	`mem˝y
(
£nd_d©a
, 
¥efix
, 
¥efix_size
);

1006 
	`mem˝y
(
£nd_d©a
 + 
¥efix_size
, 
°r_ªq
, 
	`°æí
(str_req) + 1);

1007 
ªcv_Àn
 = 0;

1008 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
£nd_Àn
 + 4, &
ªcv_Àn
);

1009 i‡(
ª•⁄£
)

1011 i‡(
ªcv_Àn
 > 0)

1013 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1015 
	`‰ì
(
ª•⁄£
);

1017 
	`‰ì
(
£nd_buf
);

1018 
	`‰ì
(
°r_ªq
);

1020  
ªt
;

1021 
	}
}

1023 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
)

1025 
cJSON
 *
ªt
 = 
NULL
;

1026 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1027 i‡(
°r_ªq
)

1029 
ªcv_Àn
 = 0;

1030 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
°r_ªq
, 
	`°æí
(°r_ªqË+ 1, &
ªcv_Àn
);

1031 i‡(
ª•⁄£
)

1033 i‡(
ªcv_Àn
 > 0)

1035 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1037 
	`‰ì
(
ª•⁄£
);

1039 
	`‰ì
(
°r_ªq
);

1041  
ªt
;

1042 
	}
}

1044 *
	$√t_toﬁ_hâp_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, *
body
, *
ªcv_Àn
)

1046 *
ªt
 = 
NULL
;

1047 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1058 
hód_buf
[1000];

1059 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
	`°æí
(
body
));

1061 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ såÀn(
body
) + 1;

1062 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1063 i‡(
£nd_buf
)

1065 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1066 
	`°rˇt
(
£nd_buf
, 
body
);

1067 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1068 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
	`°æí
(£nd_buf), 
ªcv_Àn
);

1069 
	`‰ì
(
£nd_buf
);

1071  
ªt
;

1072 
	}
}

1074 *
	$√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
)

1076 *
ªt
 = 
NULL
;

1077 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1089 
hód_buf
[1000];

1090 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
body_Àn
);

1092 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ 
body_Àn
 + 1;

1093 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1094 i‡(
£nd_buf
)

1096 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1097 
	`mem˝y
(
£nd_buf
 + 
	`°æí
(
hód_buf
), 
body
, 
body_Àn
);

1098 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1099 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
tŸÆ_Àn
 - 1, 
ªcv_Àn
);

1100 
	`‰ì
(
£nd_buf
);

1102  
ªt
;

1103 
	}
}

1105 
cJSON
 *
	$√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
)

1107 
cJSON
 *
ªt
 = 
NULL
;

1108 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1109 i‡(
°r_ªq
)

1111 
ªcv_Àn
 = 0;

1112 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_˛õ¡
(
ho°
, 
p‹t
, 
uri
, 
°r_ªq
, &
ªcv_Àn
);

1113 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

1116 *
±r
 = 
	`°r°r
(
ª•⁄£
, "\r\n\r\n");

1117 i‡(
±r
)

1119 
±r
 += 4;

1123 
±r
 = 
	`°r°r
(
ª•⁄£
, "\n\n");

1124 i‡(
±r
)

1126 
±r
 += 2;

1129 i‡(
±r
)

1131 
ªt
 = 
	`cJSON_P¨£
(
±r
);

1133 
	`‰ì
(
ª•⁄£
);

1135 
	`‰ì
(
°r_ªq
);

1137  
ªt
;

1138 
	}
}

1141 
	#DNS_HOST
 0x01

	)

1142 
	#DNS_CNAME
 0x05

	)

1144 
cJSON
 *

1145 
my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
);

1147 
cJSON
 *

1148 
∑r£_dns_ª•⁄£
(
sockëfd
);

1154 
gíî©e_que°i⁄
(c⁄° *
dns_«me


1155 , *
buf
 , *
Àn
);

1162 
is_poöãr
(
ö
);

1172 
∑r£_dns_«me
(*
chunk
 , *
±r


1173 , *
out
 , *
Àn
);

1175 
cJSON
 *
	$√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
)

1177 
cJSON
 *
ªt
 = 
NULL
;

1178 
ªt
 = 
	`my_dns_∑r£
(
dns_£rvî
, 
ªque°_«me
);

1179  
ªt
;

1180 
	}
}

1189 
cJSON
 *
	$∑r£_dns_ª•⁄£
(
sockëfd
) {

1190 
buf
[1024];

1191 *
±r
 = 
buf
;

1192 
sockaddr_ö
 
addr
;

1193 
n
 , 
i
 , 
Êag
 , 
quîys
 , 
™swîs
;

1194 
ty≥
 , 
d©Æí
 , 
Àn
;

1196 
˙ame
[128] , 
™ame
[128] , 
ù
[20];

1197 
√tù
[4];

1199 
sockÀn_t
 
addr_Àn
 = (
sockaddr_ö
);

1200 
cJSON
 *
ªt
 = 
NULL
;

1201 
cJSON
 *
Æüs_¨øy
 = 
	`cJSON_Cª©eAºay
();

1202 
cJSON
 *
ù_¨øy
 = 
	`cJSON_Cª©eAºay
();

1203 
ªt
 = 
	`cJSON_Cª©eObje˘
();

1204 
	`cJSON_AddIãmToObje˘
(
ªt
, "Æüs", 
Æüs_¨øy
);

1205 
	`cJSON_AddIãmToObje˘
(
ªt
, "ù", 
ù_¨øy
);

1207 
n
 = 
	`ªcv‰om
(
sockëfd
 , 
buf
 , (buf) , 0

1208 , (
sockaddr
*)&
addr
 , &
addr_Àn
);

1209 i‡(
n
 > 0)

1211 
±r
 += 4;

1212 
quîys
 = 
	`¡ohs
(*((*)
±r
));

1213 
±r
 += 2;

1214 
™swîs
 = 
	`¡ohs
(*((*)
±r
));

1215 
±r
 += 6;

1217 
i
0 ; i < 
quîys
 ; i ++){

1219 
Êag
 = ()
±r
[0];

1220 
±r
 +(
Êag
 + 1);

1221 if(
Êag
 == 0)

1224 
±r
 += 4;

1228 
i
 = 0 ; i < 
™swîs
 ; i ++)

1230 
	`bzîo
(
™ame
 , (aname));

1231 
Àn
 = 0;

1232 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
™ame
 , &
Àn
);

1233 
±r
 += 2;

1234 
ty≥
 = 
	`ht⁄s
(*((*)
±r
));

1235 
±r
 += 4;

1237 
±r
 += 4;

1238 
d©Æí
 = 
	`¡ohs
(*((*)
±r
));

1239 
±r
 += 2;

1240 if(
ty≥
 =
DNS_CNAME
){

1241 
	`bzîo
(
˙ame
 , (cname));

1242 
Àn
 = 0;

1243 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
˙ame
 , &
Àn
);

1245 
	`cJSON_AddIãmToAºay
(
Æüs_¨øy
, 
	`cJSON_Cª©eSåög
(
˙ame
));

1246 
±r
 +
d©Æí
;

1248 if(
ty≥
 =
DNS_HOST
){

1249 
	`bzîo
(
ù
 , (ip));

1250 if(
d©Æí
 == 4){

1251 
	`mem˝y
(
√tù
 , 
±r
 , 
d©Æí
);

1252 
	`öë_¡›
(
AF_INET
 , 
√tù
 , 
ù
 , (
sockaddr
));

1253 
	`cJSON_AddIãmToAºay
(
ù_¨øy
, 
	`cJSON_Cª©eSåög
(
ù
));

1258 
±r
 +
d©Æí
;

1262 
±r
 += 2;

1264  
ªt
;

1265 
	}
}

1268 
	$∑r£_dns_«me
(*
chunk


1269 , *
±r
 , *
out
 , *
Àn
){

1270 
n
 , 
Êag
;

1271 *
pos
 = 
out
 + (*
Àn
);

1274 
Êag
 = ()
±r
[0];

1275 if(
Êag
 == 0)

1277 if(
	`is_poöãr
(
Êag
)){

1278 
n
 = ()
±r
[1];

1279 
±r
 = 
chunk
 + 
n
;

1280 
	`∑r£_dns_«me
(
chunk
 , 
±r
 , 
out
 , 
Àn
);

1283 
±r
 ++;

1284 
	`mem˝y
(
pos
 , 
±r
 , 
Êag
);

1285 
pos
 +
Êag
;

1286 
±r
 +
Êag
;

1287 *
Àn
 +
Êag
;

1288 if(()
±r
[0] != 0){

1289 
	`mem˝y
(
pos
 , "." , 1);

1290 
pos
 += 1;

1291 (*
Àn
) += 1;

1296 
	}
}

1298 
	$is_poöãr
(
ö
){

1299  ((
ö
 & 0xc0) == 0xc0);

1300 
	}
}

1302 
cJSON
 *
	$my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
) {

1303 
ªque°
[256];

1304 *
±r
 = 
ªque°
;

1305 
que°i⁄
[128];

1306 
que°i⁄_Àn
;

1307 
cJSON
 *
ªt
 = 
NULL
;

1309 
sockaddr_ö
 
de°
;

1310 
	`bzîo
(&
de°
 , (dest));

1311 
de°
.
sö_Ámûy
 = 
AF_INET
;

1312 
de°
.
sö_p‹t
 = 
	`ht⁄s
(53);

1313 
de°
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
dns_£rvî
);

1315 
	`gíî©e_que°i⁄
(
dns_«me
 , 
que°i⁄
 , &
que°i⁄_Àn
);

1316 *((*)
±r
Ë
	`ht⁄s
(0xff00);

1317 
±r
 += 2;

1318 *((*)
±r
Ë
	`ht⁄s
(0x0100);

1319 
±r
 += 2;

1320 *((*)
±r
Ë
	`ht⁄s
(1);

1321 
±r
 += 2;

1322 *((*)
±r
) = 0;

1323 
±r
 += 2;

1324 *((*)
±r
) = 0;

1325 
±r
 += 2;

1326 *((*)
±r
) = 0;

1327 
±r
 += 2;

1328 
	`mem˝y
(
±r
 , 
que°i⁄
 , 
que°i⁄_Àn
);

1329 
±r
 +
que°i⁄_Àn
;

1331 
sockëfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1332 i‡(
sockëfd
 > 0)

1334 
	`£ndto
(
sockëfd
 , 
ªque°
 , 
que°i⁄_Àn
 + 12 , 0

1335 , (
sockaddr
*)&
de°
 , (sockaddr));

1336 
ªt
 = 
	`∑r£_dns_ª•⁄£
(
sockëfd
);

1338  
ªt
;

1339 
	}
}

1342 
	$gíî©e_que°i⁄
(c⁄° *
dns_«me
 , *
buf
 , *
Àn
){

1343 *
pos
;

1344 *
±r
;

1345 
n
;

1347 *
Àn
 = 0;

1348 
±r
 = 
buf
;

1349 
pos
 = (*)
dns_«me
;

1351 
n
 = 
	`°æí
(
pos
Ë- (
	`°r°r
(pos , ".") ? strlen(strstr(pos , ".")) : 0);

1352 *
±r
 ++ = ()
n
;

1353 
	`mem˝y
(
±r
 , 
pos
 , 
n
);

1354 *
Àn
 +
n
 + 1;

1355 
±r
 +
n
;

1356 if(!
	`°r°r
(
pos
 , ".")){

1357 *
±r
 = ()0;

1358 
±r
 ++;

1359 *
Àn
 += 1;

1362 
pos
 +
n
 + 1;

1364 *((*)
±r
Ë
	`ht⁄s
(1);

1365 *
Àn
 += 2;

1366 
±r
 += 2;

1367 *((*)
±r
Ë
	`ht⁄s
(1);

1368 *
Àn
 += 2;

1370 
	}
}

	@client_tool/net_tool.h

1 #i‚de‡
_NET_TOOL_H_


2 
	#_NET_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<√t/rouã.h
>

10 
	~<√t/if.h
>

11 
	~"cJSON.h
"

17 
√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
);

20 
√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
);

23 
√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
);

29 
√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
*);

40 
√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
);

51 
√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
);

82 
√t_toﬁ_pög_ho°s
(
cJSON
* 
ho°s
, 
timeout
);

84 
√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
);

91 
√t_toﬁ_ª£t_rouãs
(*
dev
);

105 
√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
);

116 
cJSON
 *

117 
√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
);

118 
cJSON
 *

119 
√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
);

135 
√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
);

147 
cJSON
 *

148 
√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
);

158 
cJSON
 *

159 
√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
);

	@common-ctrl.c

	@common-ctrl.h

8 #i‚de‡
COMMON_CTRL_H_


9 
	#COMMON_CTRL_H_


	)

	@compress_tool.c

1 
	~<°dio.h
>

2 
	~"com¥ess_toﬁ.h
"

4 
	$gzcom¥ess
(
Byãf
 *
d©a
, 
uL⁄g
 
nd©a
,

5 
Byãf
 *
zd©a
, 
uL⁄g
 *
nzd©a
)

7 
z_°ªam
 
c_°ªam
;

8 
îr
 = 0;

10 if(
d©a
 && 
nd©a
 > 0) {

11 
c_°ªam
.
zÆloc
 = 
NULL
;

12 
c_°ªam
.
z‰ì
 = 
NULL
;

13 
c_°ªam
.
›aque
 = 
NULL
;

15 if(
	`deÊ©eInô2
(&
c_°ªam
, 
Z_DEFAULT_COMPRESSION
, 
Z_DEFLATED
,

16 
MAX_WBITS
 + 16, 8, 
Z_DEFAULT_STRATEGY
Ë!
Z_OK
)  -1;

17 
c_°ªam
.
√xt_ö
 = 
d©a
;

18 
c_°ªam
.
avaû_ö
 = 
nd©a
;

19 
c_°ªam
.
√xt_out
 = 
zd©a
;

20 
c_°ªam
.
avaû_out
 = *
nzd©a
;

21 
c_°ªam
.
avaû_ö
 !0 && c_°ªam.
tŸÆ_out
 < *
nzd©a
) {

22 if(
	`deÊ©e
(&
c_°ªam
, 
Z_NO_FLUSH
Ë!
Z_OK
)  -1;

24 if(
c_°ªam
.
avaû_ö
 != 0)  c_stream.avail_in;

26 if((
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FINISH
)Ë=
Z_STREAM_END
) ;

27 if(
îr
 !
Z_OK
)  -1;

29 if(
	`deÊ©eEnd
(&
c_°ªam
Ë!
Z_OK
)  -1;

30 *
nzd©a
 = 
c_°ªam
.
tŸÆ_out
;

34 
	}
}

38 
	$gzdecom¥ess
(
Byã
 *
zd©a
, 
uL⁄g
 
nzd©a
,

39 
Byã
 *
d©a
, 
uL⁄g
 *
nd©a
)

41 
îr
 = 0;

42 
z_°ªam
 
d_°ªam
 = {0};

43 
dummy_hód
[2] = {

47 
d_°ªam
.
zÆloc
 = 
NULL
;

48 
d_°ªam
.
z‰ì
 = 
NULL
;

49 
d_°ªam
.
›aque
 = 
NULL
;

50 
d_°ªam
.
√xt_ö
 = 
zd©a
;

51 
d_°ªam
.
avaû_ö
 = 0;

52 
d_°ªam
.
√xt_out
 = 
d©a
;

54 if(
	`öÊ©eInô2
(&
d_°ªam
, 
MAX_WBITS
 + 16Ë!
Z_OK
)  -1;

56 
d_°ªam
.
tŸÆ_out
 < *
nd©a
 && d_°ªam.
tŸÆ_ö
 < 
nzd©a
) {

57 
d_°ªam
.
avaû_ö
 = d_°ªam.
avaû_out
 = 1;

58 if((
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
)Ë=
Z_STREAM_END
) ;

59 if(
îr
 !
Z_OK
) {

60 if(
îr
 =
Z_DATA_ERROR
) {

61 
d_°ªam
.
√xt_ö
 = (
Byãf
*Ë
dummy_hód
;

62 
d_°ªam
.
avaû_ö
 = (
dummy_hód
);

63 if((
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
)Ë!
Z_OK
) {

69 if(
	`öÊ©eEnd
(&
d_°ªam
Ë!
Z_OK
)  -1;

70 *
nd©a
 = 
d_°ªam
.
tŸÆ_out
;

72 
	}
}

	@compress_tool.h

1 #i‚de‡
_COMPRESS_TOOL_H_


2 
	#_COMPRESS_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~<zlib.h
>

17 
gzcom¥ess
(
Byãf
 *
d©a
, 
uL⁄g
 
nd©a
,

18 
Byãf
 *
zd©a
, 
uL⁄g
 *
nzd©a
);

30 
gzdecom¥ess
(
Byã
 *
zd©a
, 
uL⁄g
 
nzd©a
,

31 
Byã
 *
d©a
, 
uL⁄g
 *
nd©a
);

	@ctrl-interface.c

7 
	~<°dio.h
>

8 
	~<°rög.h
>

9 
	~<uni°d.h
>

10 
	~"fûe_toﬁ.h
"

11 
	~"√t_toﬁ.h
"

12 
	~"cJSON.h
"

13 
	~"¥o˚ss_toﬁ.h
"

14 
	~"˘æ-öãrÁ˚.h
"

15 
	~"v≤_˛oud.h
"

16 
	~"√t_toﬁ.h
"

18 
ª‰esh_Êag
;

20 #i‚de‡
FREE_PTR


21 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

24 
	$dump_JSON
(
cJSON
 *
js⁄
)

26 i‡(
js⁄
)

28 *
±r
 = 
	`cJSON_Pröt
(
js⁄
);

29 
	`¥ötf
("%s\n", 
±r
);

30 
	`‰ì
(
±r
);

34 
	`¥ötf
("null json\n");

37 
	}
}

40 
cJSON
 *
	$gë_public_whôñi°_‰om_˛oud
(*
˛oud_ho°
, 
˛oud_p‹t
, 
v≤_ty≥
, 
tu¬ñ_id
)

42 
cJSON
 *
ªt
 = 
NULL
;

43 
cJSON
 *
˛õ¡_öfo
 = 
	`cJSON_Cª©eObje˘
();

44 
	`cJSON_AddNumbîToObje˘
(
˛õ¡_öfo
, "tu¬ñ_id", 
tu¬ñ_id
);

45 i‡(
v≤_ty≥
 == 0)

47 
	`cJSON_AddSåögToObje˘
(
˛õ¡_öfo
, "tunnel_type", "vpn");

51 
	`cJSON_AddSåögToObje˘
(
˛õ¡_öfo
, "tunnel_type", "vppn");

53 
ªt
 = 
	`v≤_˛oud_toﬁ
(
˛õ¡_öfo
, 
˛oud_ho°
, 
˛oud_p‹t
, "/GetWhiteList");

54 
	`cJSON_Dñëe
(
˛õ¡_öfo
);

55  
ªt
;

56 
	}
}

58 
cJSON
 *
	$gë_public_whôñi°_‰om_loˇl
(
v≤_ty≥
, 
tu¬ñ_id
)

60 
cJSON
 *
ªt
 = 
NULL
;

61 
public_whôñi°_fûe
[100];

62 i‡(
v≤_ty≥
 == 0)

64 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/v≤/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

68 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/sôe/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

70 
ªt
 = 
	`ªad_js⁄_‰om_fûe
(
public_whôñi°_fûe
);

71  
ªt
;

72 
	}
}

74 
cJSON
 *
	$gë_public_whôñi°
(*
˛oud_ho°
, 
˛oud_p‹t
, 
v≤_ty≥
, 
tu¬ñ_id
)

76 
cJSON
 *
ªt
 = 
NULL
;

77 
public_whôñi°_fûe
[100];

78 i‡(
v≤_ty≥
 == 0)

80 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/v≤/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

84 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/sôe/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

87 
cJSON
 *
˛oud_ªt
 = 
	`gë_public_whôñi°_‰om_˛oud
(
˛oud_ho°
, 
˛oud_p‹t
, 
v≤_ty≥
, 
tu¬ñ_id
);

88 i‡(
˛oud_ªt
)

90 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
˛oud_ªt
);

91 
i
;

92 
i
 = 0; i < 
¨øy_cou¡
; i++)

94 
cJSON
 *
wl_¨øy
 = 
	`cJSON_GëAºayIãm
(
˛oud_ªt
, 
i
);

95 
cJSON
 *
wl
 = 
	`cJSON_GëObje˘Iãm
(
wl_¨øy
, "List");

96 i‡(
wl
)

98 
ªt
 = 
	`cJSON_Du∂iˇã
(
wl
, 1);

99 
	`wrôe_js⁄_to_fûe
(
public_whôñi°_fûe
, 
ªt
);

103 
	`cJSON_Dñëe
(
˛oud_ªt
);

107 
ªt
 = 
	`gë_public_whôñi°_‰om_loˇl
(
v≤_ty≥
, 
tu¬ñ_id
);

109  
ªt
;

110 
	}
}

112 
	$gíî©e_public_v∑th_c⁄f
(
cJSON
 *
whôñi°
, 
c⁄f_ty≥
, 
tu¬ñ_id
, *
gw
)

114 
public_v∑th_c⁄f
[100];

115 
public_whôñi°_fûe
[100];

116 
cJSON
 *
de°_js⁄
 = 
NULL
;

118 i‡(
c⁄f_ty≥
 == 0)

120 
	`•rötf
(
public_v∑th_c⁄f
, "/ëc/v≤/public_tu¬ñ_v∑th%d.c⁄f", 
tu¬ñ_id
);

121 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/v≤/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

122 
gw
 = 
NULL
;

126 
	`•rötf
(
public_v∑th_c⁄f
, "/ëc/sôe/public_tu¬ñ_v∑th%d.c⁄f", 
tu¬ñ_id
);

127 
	`•rötf
(
public_whôñi°_fûe
, "/ëc/sôe/public_v∑th%d.c⁄f", 
tu¬ñ_id
);

130 
de°_js⁄
 = 
	`cJSON_Cª©eAºay
();

131 
ôem_˙t
 = 
	`cJSON_GëAºaySize
(
whôñi°
);

132 
i
;

133 
i
 = 0; i < 
ôem_˙t
; i++)

135 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëAºayIãm
(
whôñi°
, 
i
);

136 
cJSON
 *
√w_obj
 = 
NULL
;

137 i‡(
c⁄f_ty≥
 != 0)

139 i‡(
gw
)

141 
√w_obj
 = 
	`cJSON_Cª©eObje˘
();

142 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "v¥oxy", 
gw
);

143 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "uri", 
uri_ôem
->
vÆue°rög
);

148 
√w_obj
 = 
	`cJSON_Cª©eObje˘
();

149 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "uri", 
uri_ôem
->
vÆue°rög
);

151 i‡(
√w_obj
)

153 
	`cJSON_AddIãmToAºay
(
de°_js⁄
, 
√w_obj
);

156 
	`wrôe_js⁄_to_fûe
(
public_v∑th_c⁄f
, 
de°_js⁄
);

157 
	`cJSON_Dñëe
(
de°_js⁄
);

159 
	}
}

161 
	$ªmove_public_v∑th_c⁄f
(
c⁄f_ty≥
, 
tu¬ñ_id
)

163 
public_v∑th_c⁄f
[100];

164 i‡(
c⁄f_ty≥
 == 0)

166 
	`•rötf
(
public_v∑th_c⁄f
, "/ëc/v≤/public_tu¬ñ_v∑th%d.c⁄f", 
tu¬ñ_id
);

170 
	`•rötf
(
public_v∑th_c⁄f
, "/ëc/sôe/public_tu¬ñ_v∑th%d.c⁄f", 
tu¬ñ_id
);

172 
	`ªmove
(
public_v∑th_c⁄f
);

174 
	}
}

176 
	$˘æ_lﬂd_public_v∑th
(*
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
, 
tu¬ñ_id
)

178 
public_v∑th_swôch_fûe
[100];

180 
⁄
 = 0;

181 *
gw
 = 
NULL
;

183 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

185 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/v≤/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

189 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/sôe/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

191 
cJSON
 *
swôch_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
public_v∑th_swôch_fûe
);

192 i‡(
swôch_js⁄
)

194 
cJSON
 *
⁄_ôem
 = 
	`cJSON_GëObje˘Iãm
(
swôch_js⁄
, "on");

195 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
swôch_js⁄
, "vpath_tunnel");

196 i‡(
⁄_ôem
)

198 
⁄
 = 
⁄_ôem
->
vÆueöt
;

200 i‡(
gw_ôem
)

202 
gw
 = 
	`°rdup
(
gw_ôem
->
vÆue°rög
);

204 
	`cJSON_Dñëe
(
swôch_js⁄
);

207 i‡(
⁄
)

209 i‡((
c⁄f_ty≥
 =
TYPE_VPPN
 && 
gw
)

211 (
c⁄f_ty≥
 =
TYPE_VPN
))

213 
cJSON
 *
public_wl_js⁄
 = 
	`gë_public_whôñi°
(
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
, 
tu¬ñ_id
);

214 i‡(
public_wl_js⁄
)

216 
	`gíî©e_public_v∑th_c⁄f
(
public_wl_js⁄
, 
c⁄f_ty≥
, 
tu¬ñ_id
, 
gw
);

217 
	`cJSON_Dñëe
(
public_wl_js⁄
);

223 
	`ªmove_public_v∑th_c⁄f
(
c⁄f_ty≥
, 
tu¬ñ_id
);

225 
	`FREE_PTR
(
gw
);

227 
	}
}

229 
cJSON
 *
	$˘æ_gë_public_whôñi°_swôch
(
c⁄f_ty≥
, 
tu¬ñ_id
)

231 
cJSON
 *
ªt
 = 
NULL
;

232 
public_v∑th_swôch_fûe
[100];

233 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

235 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/v≤/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

239 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/sôe/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

241 
ªt
 = 
	`ªad_js⁄_‰om_fûe
(
public_v∑th_swôch_fûe
);

242  
ªt
;

243 
	}
}

245 
cJSON
 *
	$˘æ_gë_tu¬ñ_√ighb‹s
(
ch™√l
)

247 
≥îs_fûe
[100];

248 
	`•rötf
(
≥îs_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
ch™√l
);

249 
cJSON
 *
ªt
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_fûe
);

250  
ªt
;

251 
	}
}

253 
	$˘æ_föd_√ighb‹
(
ch™√l
, *
√ighb‹_ù
)

255 
ªt
 = 0;

256 i‡(
√ighb‹_ù
)

258 
cJSON
 *
√ighb‹s
 = 
	`˘æ_gë_tu¬ñ_√ighb‹s
(
ch™√l
);

259 i‡(
√ighb‹s
)

261 
ôems_˙t
 = 
	`cJSON_GëAºaySize
(
√ighb‹s
);

262 
i
;

263 
i
 = 0; i < 
ôems_˙t
; i++)

265 
cJSON
* 
⁄e_√ighb‹
 = 
	`cJSON_GëAºayIãm
(
√ighb‹s
, 
i
);

266 
cJSON
* 
ù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_√ighb‹
, "peer_vip");

267 i‡(
ù_ôem
)

269 i‡(
	`°rcmp
(
ù_ôem
->
vÆue°rög
, 
√ighb‹_ù
) == 0)

271 
ªt
 = 1;

276 
	`cJSON_Dñëe
(
√ighb‹s
);

279  
ªt
;

280 
	}
}

282 
	$˘æ_gë_loˇlsub√t
(*
œn_if
, *
gw_buf
, *
√tmask_buf
)

284 
ªt
 = -1;

285 
ªt
 = 
	`√t_toﬁ_gë_if_ù
(
œn_if
, 
gw_buf
Ë|| 
	`√t_toﬁ_gë_if_√tmask
÷™_if, 
√tmask_buf
);

286  
ªt
;

287 
	}
}

289 
v≤_c⁄fig_s
 *
dump_globÆ_c⁄fig
();

290 
v≤_c⁄fig_s
* 
	$˘æ_gë_tu¬ñ_c⁄fig
()

292 
v≤_c⁄fig_s
* 
ªt
 = 
	`dump_globÆ_c⁄fig
();

293  
ªt
;

294 
	}
}

296 
cJSON
 *
	$˘æ_gë_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
)

298 
cJSON
 *
ªt
 = 
NULL
;

299 
c⁄f_fûe
[100];

301 i‡(
c⁄f_ty≥
 == 1)

303 
	`•rötf
(
c⁄f_fûe
, "/ëc/sôe/sôe%d.c⁄f", 
ch™√l
);

308 
	`•rötf
(
c⁄f_fûe
, "/ëc/v≤/v≤%d.c⁄f", 
ch™√l
);

310 
ªt
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_fûe
);

311  
ªt
;

312 
	}
}

314 
	$˘æ_£t_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
, 
cJSON
 *
tu¬ñ_c⁄f
)

316 
c⁄f_fûe
[100];

318 i‡(
c⁄f_ty≥
 == 1)

320 
	`•rötf
(
c⁄f_fûe
, "/ëc/sôe/sôe%d.c⁄f", 
ch™√l
);

325 
	`•rötf
(
c⁄f_fûe
, "/ëc/v≤/v≤%d.c⁄f", 
ch™√l
);

327 
	`wrôe_js⁄_to_fûe
(
c⁄f_fûe
, 
tu¬ñ_c⁄f
);

329 
	}
}

331 
	$˘æ_íabÀ_v≤
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
)

334 
cJSON
 *
tu¬ñ_c⁄f
 = 
	`˘æ_gë_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
);

335 i‡(!
tu¬ñ_c⁄f
)

337 
tu¬ñ_c⁄f
 = 
	`cJSON_Cª©eObje˘
();

338 
	`cJSON_AddNumbîToObje˘
(
tu¬ñ_c⁄f
, "on", 0);

339 
	`cJSON_AddSåögToObje˘
(
tu¬ñ_c⁄f
, "team_id", "");

345 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "⁄", 
	`cJSON_Cª©eNumbî
(1));

346 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "ãam_id", 
	`cJSON_Cª©eSåög
(
ãam_id
));

348 i‡(
£rvî
)

350 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "£rvî_addr", 
	`cJSON_Cª©eSåög
(
£rvî
));

352 i‡(
£lf_vù
)

354 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "my£lf_addr", 
	`cJSON_Cª©eSåög
(
£lf_vù
));

356 i‡(
p‹t
)

358 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "£rvî_p‹t", 
	`cJSON_Cª©eNumbî
(
p‹t
));

360 i‡(
ãamid
)

362 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "ãam_id", 
	`cJSON_Cª©eSåög
(
ãamid
));

365 
	`˘æ_£t_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
, 
tu¬ñ_c⁄f
);

366 
ª‰esh_Êag
 = 1;

367 
	`cJSON_Dñëe
(
tu¬ñ_c⁄f
);

369 
	}
}

371 
cJSON
 *
	$˘æ_gë_tu¬ñ_log_c⁄f
(
tu¬ñ_id
)

373 
log_fûe
[100];

374 
	`•rötf
(
log_fûe
, "/tmp/vµn_log_sôe%d.c⁄f", 
tu¬ñ_id
);

375 
cJSON
 *
ªs
 = 
	`ªad_js⁄_‰om_fûe
(
log_fûe
);

376  
ªs
;

377 
	}
}

379 
	$˘æ_£t_tu¬ñ_log_c⁄f
(
tu¬ñ_id
, 
cJSON
 *
ôem
)

381 
log_fûe
[100];

382 
	`•rötf
(
log_fûe
, "/tmp/vµn_log_sôe%d.c⁄f", 
tu¬ñ_id
);

383 
	`wrôe_js⁄_to_fûe
(
log_fûe
, 
ôem
);

385 
	}
}

387 
	$˘æ_íabÀ_log
(
tu¬ñ_id
, 
log_Àvñ
)

389 
cJSON
 *
ôem
 = 
	`cJSON_Cª©eObje˘
();

390 i‡(
ôem
)

392 
	`cJSON_AddNumbîToObje˘
(
ôem
, "log_on", 1);

393 
	`cJSON_AddNumbîToObje˘
(
ôem
, "log_Àvñ", 
log_Àvñ
);

394 
	`˘æ_£t_tu¬ñ_log_c⁄f
(
tu¬ñ_id
, 
ôem
);

395 
	`cJSON_Dñëe
(
ôem
);

398 
	}
}

400 
	$˘æ_dißbÀ_log
(
tu¬ñ_id
)

402 
cJSON
 *
ôem
 = 
	`cJSON_Cª©eObje˘
();

403 i‡(
ôem
)

405 
	`cJSON_AddNumbîToObje˘
(
ôem
, "log_on", 0);

406 
	`˘æ_£t_tu¬ñ_log_c⁄f
(
tu¬ñ_id
, 
ôem
);

407 
	`cJSON_Dñëe
(
ôem
);

410 
	}
}

412 
	$˘æ_ª‰esh_v≤
()

414 
ª‰esh_Êag
 = 1;

415 
	}
}

417 
	$˘æ_£t_m™agî
(
c⁄f_ty≥
, 
ch™√l
, *
m™agî_ho°
, 
m™agî_p‹t
)

419 
m™agî_fûe
[100];

420 i‡(
c⁄f_ty≥
)

422 
	`•rötf
(
m™agî_fûe
, "/etc/site/manager");

426 
	`•rötf
(
m™agî_fûe
, "/etc/vpn/manager");

428 
cJSON
 *
m™agî_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
m™agî_fûe
);

429 i‡(!
m™agî_js⁄
)

431 
m™agî_js⁄
 = 
	`cJSON_Cª©eObje˘
();

432 
	`cJSON_AddSåögToObje˘
(
m™agî_js⁄
, "˛oud_ho°", 
m™agî_ho°
);

433 
	`cJSON_AddNumbîToObje˘
(
m™agî_js⁄
, "˛oud_p‹t", 
m™agî_p‹t
);

437 
	`cJSON_Rïœ˚IãmInObje˘
(
m™agî_js⁄
, "˛oud_ho°", 
	`cJSON_Cª©eSåög
(
m™agî_ho°
));

438 
	`cJSON_Rïœ˚IãmInObje˘
(
m™agî_js⁄
, "˛oud_p‹t", 
	`cJSON_Cª©eNumbî
(
m™agî_p‹t
));

440 
	`wrôe_js⁄_to_fûe
(
m™agî_fûe
, 
m™agî_js⁄
);

441 
	`cJSON_Dñëe
(
m™agî_js⁄
);

442 
ª‰esh_Êag
 = 1;

444 
	}
}

446 
cJSON
* 
	$˘æ_gë_m™agî
(
c⁄f_ty≥
, 
ch™√l
)

448 
m™agî_fûe
[100];

449 i‡(
c⁄f_ty≥
)

451 
	`•rötf
(
m™agî_fûe
, "/etc/site/manager");

455 
	`•rötf
(
m™agî_fûe
, "/etc/vpn/manager");

457 
cJSON
 *
m™agî_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
m™agî_fûe
);

458  
m™agî_js⁄
;

459 
	}
}

461 
	$˘æ_dißbÀ_v≤
(
c⁄f_ty≥
, 
ch™√l
)

463 
cJSON
 *
tu¬ñ_c⁄f
 = 
	`˘æ_gë_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
);

464 i‡(!
tu¬ñ_c⁄f
)

466 
tu¬ñ_c⁄f
 = 
	`cJSON_Cª©eObje˘
();

467 
	`cJSON_AddNumbîToObje˘
(
tu¬ñ_c⁄f
, "on", 0);

468 
	`cJSON_AddSåögToObje˘
(
tu¬ñ_c⁄f
, "team_id", "");

475 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "⁄", 
	`cJSON_Cª©eNumbî
(0));

476 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_c⁄f
, "ãam_id", 
	`cJSON_Cª©eSåög
(""));

477 
	`˘æ_£t_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
ch™√l
, 
tu¬ñ_c⁄f
);

478 
ª‰esh_Êag
 = 1;

479 
	`cJSON_Dñëe
(
tu¬ñ_c⁄f
);

481 
	}
}

484 
	$˘æ_ª°¨t_búd
()

486 
	`sy°em
("bird.sh stop");

487 
	`u¶ìp
(50000);

488 
	`sy°em
("bird.sh start");

489 
	}
}

491 
	$˘æ_ªlﬂd_búd
(
c⁄f_ty≥
, 
tu¬ñ_id
, * 
ãam_id
)

494 i‡(
c⁄f_ty≥
 == 1)

496 
	`ªlﬂd_búd_c⁄f
(
tu¬ñ_id
, * 
ãam_id
);

497 
	`ªlﬂd_búd_c⁄f
(
tu¬ñ_id
, 
ãam_id
);

498 
	`˘æ_ª°¨t_búd
();

501 
	}
}

503 
	$lﬂd_v∑th_öto_dnsmasq_c⁄f
(
cJSON
 *
v∑th
, *
dnsmasq_c⁄f_fûe
, 
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
)

505 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
v∑th
);

506 
i
;

507 
i
 = 0; i < 
v∑th_˙t
; i++)

509 
cJSON
 *
⁄e_∑th
 = 
	`cJSON_GëAºayIãm
(
v∑th
, 
i
);

510 
löe_buf
[100];

511 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_∑th
, "uri");

512 
cJSON
 *
¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_∑th
, "vproxy");

513 
cJSON
 *
ãam_id_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_∑th
, "team_id");

515 i‡(
c⁄f_ty≥
)

517 i‡(
¥oxy_ôem
 && 
uri_ôem
 && 
ãam_id_ôem
)

519 i‡(
	`°rcmp
(
ãam_id_ôem
->
vÆue°rög
, 
ãam_id
) == 0)

521 
	`•rötf
(
löe_buf
, "£rvî=/%s/%s#53\n", 
uri_ôem
->
vÆue°rög
, 
¥oxy_ôem
->valuestring);

522 
	`≠≥nd_löe
(
dnsmasq_c⁄f_fûe
, 
löe_buf
);

529 
gw_buf
[30];

530 
	`•rötf
(
gw_buf
, "10.100.%d.1", 
ch™√l
 + 10);

531 
	`•rötf
(
löe_buf
, "£rvî=/%s/%s#53\n", 
uri_ôem
->
vÆue°rög
, 
gw_buf
);

532 
	`≠≥nd_löe
(
dnsmasq_c⁄f_fûe
, 
löe_buf
);

536 
	}
}

538 
	$ªlﬂd_dnsmasq_c⁄f
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
)

540 
dnsmasq_c⁄f_fûe
[100];

541 
v∑th_c⁄f_fûe
[100];

542 
public_v∑th_c⁄f_fûe
[100];

543 i‡(
c⁄f_ty≥
 == 0)

545 
	`•rötf
(
dnsmasq_c⁄f_fûe
, "/ëc/dnsmasq.d/v≤%d_v∑th.c⁄f", 
ch™√l
);

546 
	`•rötf
(
v∑th_c⁄f_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l
);

547 
	`•rötf
(
public_v∑th_c⁄f_fûe
, "/ëc/v≤/public_tu¬ñ_v∑th%d.c⁄f", 
ch™√l
);

551 
	`•rötf
(
dnsmasq_c⁄f_fûe
, "/ëc/dnsmasq.d/vµn%d_v∑th.c⁄f", 
ch™√l
);

552 
	`•rötf
(
v∑th_c⁄f_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l
);

553 
	`•rötf
(
public_v∑th_c⁄f_fûe
, "/ëc/sôe/public_tu¬ñ_v∑th%d.c⁄f", 
ch™√l
);

555 
	`ªmove
(
dnsmasq_c⁄f_fûe
);

556 
cJSON
 *
v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_c⁄f_fûe
);

557 i‡(
v∑th
)

559 
	`lﬂd_v∑th_öto_dnsmasq_c⁄f
(
v∑th
, 
dnsmasq_c⁄f_fûe
, 
c⁄f_ty≥
, 
ch™√l
, 
ãam_id
);

560 
	`cJSON_Dñëe
(
v∑th
);

563 
cJSON
 *
public_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
public_v∑th_c⁄f_fûe
);

564 i‡(
public_v∑th
)

566 
	`lﬂd_v∑th_öto_dnsmasq_c⁄f
(
public_v∑th
, 
dnsmasq_c⁄f_fûe
, 
c⁄f_ty≥
, 
ch™√l
, 
ãam_id
);

567 
	`cJSON_Dñëe
(
public_v∑th
);

570 
	}
}

572 
	$˘æ_ª°¨t_dnsmasq
()

574 
	`¥o˚ss_toﬁ_sy°em
("/etc/init.d/dnsmasq stop");

575 
	`¥o˚ss_toﬁ_sy°em
("/etc/init.d/dnsmasq start");

576 
	}
}

578 
	$˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄f_ty≥
, 
ch™√l
)

580 
dnsmasq_c⁄f_fûe
[100];

581 
v∑th_c⁄f_fûe
[100];

582 i‡(
c⁄f_ty≥
 == 0)

584 
	`•rötf
(
dnsmasq_c⁄f_fûe
, "/ëc/dnsmasq.d/v≤%d_v∑th.c⁄f", 
ch™√l
);

585 
	`•rötf
(
v∑th_c⁄f_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l
);

589 
	`•rötf
(
dnsmasq_c⁄f_fûe
, "/ëc/dnsmasq.d/vµn%d_v∑th.c⁄f", 
ch™√l
);

590 
	`•rötf
(
v∑th_c⁄f_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l
);

592 
	`ªmove
(
dnsmasq_c⁄f_fûe
);

593 
	`˘æ_ª°¨t_dnsmasq
();

595 
	}
}

597 
	$˘æ_ª£t_rouã_èbÀ
(
c⁄f_ty≥
, 
ch™√l
)

599 
dev
[100];

600 i‡(
c⁄f_ty≥
 == 0)

602 
	`•rötf
(
dev
, "tun%d", 
ch™√l
);

606 
	`•rötf
(
dev
, "sôe%d", 
ch™√l
);

608 
	`√t_toﬁ_ª£t_rouãs
(
dev
);

609 
	}
}

611 
	$˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
)

613 
	`ªlﬂd_dnsmasq_c⁄f
(
c⁄f_ty≥
, 
ch™√l
, 
ãam_id
);

614 
	`˘æ_ª£t_rouã_èbÀ
(
c⁄f_ty≥
, 
ch™√l
);

615 
	`˘æ_ª°¨t_dnsmasq
();

616 
	}
}

618 
	$˘æ_ªlﬂd_v≤
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
)

620 
	`˘æ_ªlﬂd_búd
(
c⁄f_ty≥
, 
ch™√l
, 
ãam_id
);

621 
	`˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l
, 
ãam_id
);

623 
	}
}

625 
	$˘æ_wrôe_fúewÆl_s¸ùt
(*
vútuÆ_sub√t
)

627 
buf
[4096];

628 
	`•rötf
(
buf
,

649 
vútuÆ_sub√t
,

650 
vútuÆ_sub√t
,

651 
vútuÆ_sub√t
,

652 
vútuÆ_sub√t
,

653 
vútuÆ_sub√t
,

654 
vútuÆ_sub√t


656 
	`wrôe_shñl
("/ëc/s¸ùts/fúewÆl/vµn.ruÀ", 
buf
);

657 
	}
}

659 
	$˘æ_°›_fúewÆl
()

661 
	`sy°em
("/etc/scripts/firewall/vppn.rule stop");

662 
	}
}

664 
	$˘æ_°¨t_fúewÆl
()

666 
	`sy°em
("/etc/scripts/firewall/vppn.rule start");

667 
	}
}

669 
	$˘æ_ªlﬂd_fúewÆl
(
ch™√l
, * 
vútuÆ_sub√t
)

671 
	`˘æ_°›_fúewÆl
();

672 
	`˘æ_wrôe_fúewÆl_s¸ùt
(
vútuÆ_sub√t
);

673 
	`˘æ_°¨t_fúewÆl
();

674 
	}
}

	@ctrl-interface.h

8 #i‚de‡
CTRL_INTERFACE_H_


9 
	#CTRL_INTERFACE_H_


	)

11 
	~<°dio.h
>

12 
	~<±hªad.h
>

13 
	~"cJSON.h
"

14 
	~"fûe_toﬁ.h
"

15 
	~"v≤_c⁄fig.h
"

17 
	#MAX_IP_BUF_LEN
 (40)

	)

19 
	eCONFIG_TYPE_E


21 
	mTYPE_VPN
 = 0,

22 
	mTYPE_VPPN


25 
	s˘æ_m™agî_°©us_s


27 
	mm™agî_ho°
[
MAX_IP_BUF_LEN
];

28 
	mm™agî_p‹t
;

29 
	mm™agî_œãncy
;

32 
	s˘æ_¥oxy_°©us_s


34 
	m¥oxy_ho°
[
MAX_IP_BUF_LEN
];

35 
	m¥oxy_p‹t
;

36 
	m¥oxy_œãncy
;

39 
	s˘æ_loˇl_°©us_s


41 
	mloˇl_vù
[
MAX_IP_BUF_LEN
];

42 
	mloˇl2gw_œãncy
;

45 
cJSON
 *
˘æ_gë_tu¬ñ_√ighb‹s
(
ch™√l
);

46 
˘æ_föd_√ighb‹
(
ch™√l
, *
√ighb‹_ù
);

47 
˘æ_gë_loˇlsub√t
(*
œn_if
, *
gw_buf
, *
√tmask_buf
);

48 
v≤_c⁄fig_s
* 
˘æ_gë_tu¬ñ_c⁄fig
();

50 
˘æ_ªlﬂd_v≤
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
);

51 
˘æ_ªlﬂd_fúewÆl
(
ch™√l
, * 
vútuÆ_sub√t
);

52 
˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
);

53 
˘æ_ªlﬂd_búd
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
);

54 
˘æ_dißbÀ_v≤
(
c⁄f_ty≥
, 
ch™√l
);

55 
˘æ_íabÀ_v≤
(
c⁄f_ty≥
, 
ch™√l
, * 
ãam_id
);

56 
cJSON
 *
˘æ_gë_tu¬ñ_log_c⁄f
(
tu¬ñ_id
);

57 
˘æ_£t_tu¬ñ_log_c⁄f
(
tu¬ñ_id
, 
cJSON
 *
ôem
);

58 
˘æ_íabÀ_log
(
tu¬ñ_id
, 
log_Àvñ
);

59 
˘æ_dißbÀ_log
(
tu¬ñ_id
);

60 
˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄f_ty≥
, 
ch™√l
);

61 
˘æ_ª‰esh_v≤
();

62 
cJSON
* 
˘æ_gë_m™agî
(
c⁄f_ty≥
, 
ch™√l
);

63 
˘æ_£t_m™agî
(
c⁄f_ty≥
, 
ch™√l
, *
m™agî_ho°
, 
m™agî_p‹t
);

64 
cJSON
 *
˘æ_gë_public_whôñi°_swôch
(
c⁄f_ty≥
, 
tu¬ñ_id
);

66 
cJSON
 *
gë_public_whôñi°
(*
˛oud_ho°
, 
˛oud_p‹t
, 
v≤_ty≥
, 
tu¬ñ_id
);

67 
gíî©e_public_v∑th_c⁄f
(
cJSON
 *
whôñi°
, 
c⁄f_ty≥
, 
tu¬ñ_id
, *
gw
);

68 
ªmove_public_v∑th_c⁄f
(
c⁄f_ty≥
, 
tu¬ñ_id
);

69 
˘æ_lﬂd_public_v∑th
(*
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
, 
tu¬ñ_id
);

	@ctrl_server.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<sys/time.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<uni°d.h
>

14 
	~<±hªad.h
>

15 
	~<°rögs.h
>

16 
	~<°rög.h
>

17 
	~<¨∑/öë.h
>

18 
	~"˘æ_£rvî.h
"

19 
	~"˘æ_£rvî_js⁄.h
"

20 
	~"˘æ-öãrÁ˚.h
"

21 
	~"v≤_c⁄fig.h
"

22 
	~"cJSON.h
"

23 
	~"√t_toﬁ.h
"

24 
	~"my_debug.h
"

26 
	#MAX_ALLOC_ONCE_LEN
 (409600)

	)

28 #i‚de‡
FREE_PTR


29 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

32 
	g˘æ_ru¬ög
 = 1;

34 
size_t
 
	$ªcv_˛õ¡_d©a_Àn
(
sockfd
)

36 
buf
[4];

37 
size_t
 
ªt_Àn
 = 0;

38 
	`mem£t
(
buf
, 0 , 4);

39 
ssize_t
 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
buf
, 4, 0);

40 i‡(
ªcv_Àn
 == 4)

43 
ªt_Àn
 = (
size_t
)
	`¡ohl
(*(
uöt32_t
*)
buf
);

45 
size_t
 
tmp0
 = ()(
buf
[0]) & 0xff;

46 
tmp0
 *= 256 *256 *256;

47 
size_t
 
tmp1
 = ()(
buf
[1]) & 0xff;

48 
tmp1
 *= 256 *256;

49 
size_t
 
tmp2
 = ()(
buf
[2]) & 0xff;

50 
tmp2
 *= 256;

51 
size_t
 
tmp3
 = ()(
buf
[3]) & 0xff;

52 
tmp3
 *= 1;

53 
ªt_Àn
 = 
tmp0
 + 
tmp1
 + 
tmp2
 + 
tmp3
;

56  
ªt_Àn
;

57 
	}
}

59 *
	$ªcv_˛õ¡_d©a
(
sockfd
, *
Àn
)

61 
ssize_t
 
ªcv_Àn
 = 0;

62 
ssize_t
 
ªcv_Àn_tŸÆ
 = 0;

63 *
ªcv_±r
 = 
NULL
;

64 i‡(
sockfd
 > 0)

67 
sockÀn_t
 
›éí
 = (
timevÆ
);

68 
timevÆ
 
tv
;

69 
tv
.
tv_£c
 = 5;

70 
tv
.
tv_u£c
 = 0;

71 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
,
SO_SNDTIMEO
, &
tv
, 
›éí
);

72 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
,
SO_RCVTIMEO
, &
tv
, 
›éí
);

73 
size_t
 
√ed_ªcv_Àn
 = 
	`ªcv_˛õ¡_d©a_Àn
(
sockfd
);

74 i‡(
√ed_ªcv_Àn
 > 0 &&Çìd_ªcv_À¿< 
MAX_ALLOC_ONCE_LEN
)

76 
ªcv_±r
 = 
	`ªÆloc
‘ecv_±r, 
ªcv_Àn_tŸÆ
 + 
√ed_ªcv_Àn
);

77 i‡(
ªcv_±r
)

80 
	`mem£t
(
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 0, 
√ed_ªcv_Àn
);

81 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 
√ed_ªcv_Àn
, 0);

82 i‡(
ªcv_Àn
 > 0)

84 
ªcv_Àn_tŸÆ
 +
ªcv_Àn
;

88 
	`‰ì
(
ªcv_±r
);

89 
ªcv_±r
 = 
NULL
;

94 *
Àn
 = 
ªcv_Àn_tŸÆ
;

95  (*)
ªcv_±r
;

96 
	}
}

98 
	$h™dÀ_ªque°
(
˘æ_ªque°_t
 *
ªque°
)

100 
	`MY_DEBUG_INFO
("handle_request\n");

101 i‡(
ªque°
->
d©a_size
 >2 && 
	`°∫cmp
‘eque°->
d©a
, "ts", 2) == 0)

103 
	`MY_DEBUG_INFO
("getÅest\n");

105 
	`£nd
(
ªque°
->
˛õ¡_fd
, "world", 5, 0);

108 i‡(
ªque°
->
d©a_size
 >4 && 
	`°∫cmp
‘eque°->
d©a
, "json", 4) == 0)

110 
	`MY_DEBUG_INFO
("get jsonreq\n");

111 
cJSON
 *
js⁄ªq
 = 
	`√w_v≤_js⁄ªq
(
ªque°
);

112 i‡(
js⁄ªq
)

114 
	`MY_DEBUG_INFO
("handle jsonreq\n");

115 
	`h™dÀ_v≤_js⁄ªq
(
js⁄ªq
, 
ªque°
);

116 
	`dñëe_v≤_js⁄ªq
(
js⁄ªq
);

120 
	`sy°em
("vppnconfig saveconfig vppn");

122 
	}
}

124 
˘æ_ªque°_t
 *
	$√w_ªque°
()

126 
˘æ_ªque°_t
* 
ªq
 = 
NULL
;

127 
ªq
 = 
	`mÆloc
((
˘æ_ªque°_t
));

128 i‡(
ªq
)

130 
	`bzîo
(
ªq
, (
˘æ_ªque°_t
));

132  
ªq
;

133 
	}
}

135 
	$dñëe_ªque°
(
˘æ_ªque°_t
 *
ªq
)

137 i‡(
ªq
)

139 i‡(
ªq
->
d©a
)

141 
	`‰ì
(
ªq
->
d©a
);

143 i‡(
ªq
->
˛õ¡_fd
 > 0)

145 
	`˛o£
(
ªq
->
˛õ¡_fd
);

147 
	`‰ì
(
ªq
);

150 
	}
}

152 
˘æ_ªque°_t
 *
	$˘æ_gë_ªque°
(
˘æ_£rvî_t
 *
£rvî
, 
timevÆ
 *
timeout
)

154 
˘æ_ªque°_t
* 
ªq
 = 
NULL
;

155 
˛õ¡_fd
;

156 
sockaddr_ö
 
addr
;

157 
sockÀn_t
 
addr_Àn
 = (
addr
);

158 
fd_£t
 
ªad_fds
;

159 
£À˘_ªt
;

165 
	`FD_ZERO
(&
ªad_fds
);

166 
	`FD_SET
(
£rvî
->
li°í_fd
, &
ªad_fds
);

167 
timevÆ
 
£À˘_timeout
;

168 
£À˘_timeout
.
tv_£c
 = 3;

169 
£À˘_timeout
.
tv_u£c
 = 0;

171 
£À˘_ªt
 = 
	`£À˘
(
£rvî
->
li°í_fd
 + 1, &
ªad_fds
, 0, 0, &
£À˘_timeout
);

174 i‡(
£À˘_ªt
 > 0)

177 
˛õ¡_fd
 = 
	`ac˚±
(
£rvî
->
li°í_fd
, (
sockaddr
 *)&
addr
, (
sockÀn_t
*)&
addr_Àn
);

179 i‡(
˛õ¡_fd
 > 0)

181 * 
d©a
;

182 
d©a_Àn
;

183 
d©a
 = 
	`ªcv_˛õ¡_d©a
(
˛õ¡_fd
, &
d©a_Àn
);

184 
	`MY_DEBUG_INFO
("ªcv d©®:%∞Àn%d\n",
d©a
, 
d©a_Àn
);

185 i‡(
d©a
)

187 
ªq
 = 
	`√w_ªque°
();

188 i‡(
ªq
)

190 
ªq
->
d©a
 = data;

191 
ªq
->
d©a_size
 = 
d©a_Àn
;

192 
ªq
->
˛õ¡_fd
 = client_fd;

196 
	`‰ì
(
d©a
);

197 
	`˛o£
(
˛õ¡_fd
);

202  
ªq
;

203 
	}
}

205 * 
	$h™dÀ_ªque°_thªad
(*
¨g
)

207 
˘æ_ªque°_t
 *
ªque°
 = (˘æ_ªque°_à*)
¨g
;

208 i‡(
ªque°
)

210 
	`h™dÀ_ªque°
(
ªque°
);

211 
	`dñëe_ªque°
(
ªque°
);

213  
NULL
;

214 
	}
}

216 *
	$˘æ_£rvî_maölo›
(*
¨g
)

218 
˘æ_ªque°_t
 *
ªq
;

219 
˘æ_£rvî_t
 *
£rv
 = (˘æ_£rvî_à*)
¨g
;

220 
timevÆ
 
timeout
 = {5, 0};

221 
˘æ_ru¬ög
)

223 
ªq
 = 
	`˘æ_gë_ªque°
(
£rv
, &
timeout
);

225 i‡(
ªq
)

228 
±hªad_t
 
h™dÀ_tid
;

229 
ªt
 = 
	`±hªad_¸óã
(&
h™dÀ_tid
, 
NULL
, 
h™dÀ_ªque°_thªad
, 
ªq
);

230 if(
ªt
 < 0)

232 
	`MY_DEBUG_ERR
("Can't createÅhreadÅo handle_request\n");

233 
	`dñëe_ªque°
(
ªq
);

237 
	`±hªad_dëach
(
h™dÀ_tid
);

240 
	`h™dÀ_ªque°
(
ªq
);

241 
	`dñëe_ªque°
(
ªq
);

243 
	`u¶ìp
(50000);

245 
	`±hªad_exô
(
NULL
);

246  
NULL
;

247 
	}
}

249 
	$¸óã_li°í_sockë
(*
ho°
, 
u_sh‹t
 
p‹t
)

251 
li°í_fd
 = -1;

252 
sockaddr_ö
 
addr
;

254 
li°í_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

255 i‡(
li°í_fd
 > 0)

257 
	`MY_DEBUG_INFO
("li°í_fd = %d\n", 
li°í_fd
);

258 
sock_›t
 = 1;

259 i‡((
	`£tsock›t
(
li°í_fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
sock_›t
,

260  (
sock_›t
))) == -1) {

261 
	`MY_DEBUG_INFO
("setÑeuse wrong\n");

263 
	`MY_DEBUG_INFO
("ho° = %s,Ö‹à%d\n", 
ho°
, 
p‹t
);

264 
	`bzîo
(&
addr
, áddr);

265 
addr
.
sö_Ámûy
 = 
AF_INET
;

266 i‡(!
ho°
)

269 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

273 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ho°
);

275 
addr
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
)
p‹t
);

276 
böd_ªt
 = 
	`böd
(
li°í_fd
, (
sockaddr
 *)&
addr
,(addr));

277 
	`MY_DEBUG_INFO
("böd_ªà%d\n", 
böd_ªt
);

278 i‡(
böd_ªt
 < 0)

280 
	`˛o£
(
li°í_fd
);

281 
li°í_fd
 = -1;

285 
	`li°í
(
li°í_fd
, 80);

288  
li°í_fd
;

289 
	}
}

291 
	$˘æ_£rvî_dñëe
(
˘æ_£rvî_t
 *
£rv
)

293 i‡(
£rv
)

295 i‡(
£rv
->
li°í_fd
 > 0)

297 
	`˛o£
(
£rv
->
li°í_fd
);

299 
	`‰ì
(
£rv
);

302 
	}
}

304 
˘æ_£rvî_t
 * 
	$˘æ_£rvî_¸óã
(*
ho°
, 
u_sh‹t
 
p‹t
)

306 
˘æ_£rvî_t
* 
ªt
 = 
NULL
;

307 
li°í_fd
 = -1;

309 
li°í_fd
 = 
	`¸óã_li°í_sockë
(
ho°
, 
p‹t
);

310 i‡(
li°í_fd
 > 0)

312 
ªt
 = 
	`mÆloc
((
˘æ_£rvî_t
));

313 i‡(
ªt
)

315 
	`bzîo
(
ªt
, (
˘æ_£rvî_t
));

316 
ªt
->
li°í_fd
 =Üisten_fd;

319  
ªt
;

320 
	}
}

322 
	s˘æ_addr_s


324 *
	mho°
;

325 
u_sh‹t
 
	mp‹t
;

327 
˘æ_£rvî_t
 *
	g˘æ_£rvî
;

329 
	$˘æ_£rvî_öô
(*
ho°
, 
u_sh‹t
 
p‹t
)

331 
ªt
 = -1;

332 
˘æ_addr_s
 *
addr
 = 
	`mÆloc
((ctrl_addr_s));

333 
addr
->
ho°
 = ho°?ho°:
NULL
;

334 
addr
->
p‹t
 =Öort;

335 
˘æ_£rvî
 = 
	`˘æ_£rvî_¸óã
(
addr
->
ho°
,áddr->
p‹t
);

336 i‡(
˘æ_£rvî
)

338 
	`MY_DEBUG_INFO
("create server ok\n");

339 
	`±hªad_¸óã
(&
˘æ_£rvî
->
lo›_tid
, 
NULL
, 
˘æ_£rvî_maölo›
, ctrl_server);

340 
ªt
 = 0;

342  
ªt
;

343 
	}
}

345 
	$˘æ_£rvî_exô
()

347 i‡(
˘æ_£rvî
)

349 
˘æ_ru¬ög
 = 0;

350 
	`MY_DEBUG_ERR
("waô cål-£rvî wôhÖthªad id[%d]Åÿexô\n", 
˘æ_£rvî
->
lo›_tid
);

351 i‡(
˘æ_£rvî
->
lo›_tid
 > 0)

353 
	`±hªad_joö
(
˘æ_£rvî
->
lo›_tid
, 
NULL
);

355 
	`MY_DEBUG_ERR
("˛o£ cål-£rvîÜi°í sockë[%d]\n", 
˘æ_£rvî
->
li°í_fd
);

356 i‡(
˘æ_£rvî
->
li°í_fd
)

358 
	`˛o£
(
˘æ_£rvî
->
li°í_fd
);

360 
	`‰ì
(
˘æ_£rvî
);

363 
	}
}

	@ctrl_server.h

8 #i‚de‡
CTRL_SERVER_H_


9 
	#CTRL_SERVER_H_


	)

11 
	~<±hªad.h
>

12 
	~<sys/ty≥s.h
>

13 
	s˘æ_£rvî_s


15 
	mli°í_fd
;

16 
±hªad_t
 
	mlo›_tid
;

17 
	mªq_˙t
;

18 
	mªs_˙t
;

20 
˘æ_£rvî_s
 
	t˘æ_£rvî_t
;

22 
	s˘æ_ªque°_s


24 
	m˛õ¡_fd
;

25 *
	md©a
;

26 
	md©a_size
;

28 
˘æ_ªque°_s
 
	t˘æ_ªque°_t
;

30 
	s˘æ_ª•⁄£_s


32 
	m˛õ¡_fd
;

33 *
	md©a
;

34 
	md©a_size
;

36 
˘æ_ª•⁄£_s
 
	t˘æ_ª•⁄£_t
;

38 
˘æ_£rvî_öô
(*
ho°
, 
u_sh‹t
 
p‹t
);

39 
˘æ_£rvî_exô
();

	@ctrl_server_json.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<sys/time.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<uni°d.h
>

7 
	~<±hªad.h
>

8 
	~<°rögs.h
>

9 
	~<°rög.h
>

10 
	~<¨∑/öë.h
>

11 
	~"˘æ_£rvî.h
"

12 
	~"˘æ_£rvî_js⁄.h
"

13 
	~"˘æ-öãrÁ˚.h
"

14 
	~"v≤_c⁄fig.h
"

15 
	~"cJSON.h
"

16 
	~"√t_toﬁ.h
"

17 
	~"my_debug.h
"

18 
	~"©èchdevi˚.h
"

19 
	~"¥o˚ss_toﬁ.h
"

20 
	~"ba£64.h
"

22 #i‚de‡
FREE_PTR


23 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

26 
dump_JSON
(
cJSON
 *);

29 
	$uri_check_ûÀgÆ
(*
uri
)

31 
ûÀgÆ
 = 0;

32 
Àn
 = 
	`°æí
(
uri
);

33 i‡(
Àn
 == 0)

35 
ûÀgÆ
 = 1;

36  
ûÀgÆ
;

38 
i
;

39 
i
 = 0; i < 
Àn
; i++)

42 (
uri
[
i
] >= 'a' && uri[i] <= 'z')

44 (
uri
[
i
] >= 'A' && uri[i] <= 'Z')

46 (
uri
[
i
] >= '0' && uri[i] <= '9')

48 (
uri
[
i
] == '.')

55 
ûÀgÆ
 = 1;

59  
ûÀgÆ
;

60 
	}
}

62 
	$föd_v∑th
(
cJSON
 *
v∑ths
, *
gw
, *
uri
, *
ãamid
)

64 
ªt
 = -1;;

65 
i
;

66 
˙t
 = 
	`cJSON_GëAºaySize
(
v∑ths
);

67 
i
 = 0; i < 
˙t
; i++)

69 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
v∑ths
, 
i
);

70 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "vproxy");

71 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

72 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "team_id");

74 i‡(
gw
)

76 i‡(
gw_ôem
 && 
uri_ôem


78 
	`°rcmp
(
gw_ôem
->
vÆue°rög
, 
gw
) == 0

80 
	`°rcmp
(
uri_ôem
->
vÆue°rög
, 
uri
) == 0

82 
	`°rcmp
(
ãamid_ôem
->
vÆue°rög
, 
ãamid
) == 0

85 
ªt
 = 
i
;

91 i‡(
uri_ôem


93 
	`°rcmp
(
uri_ôem
->
vÆue°rög
, 
uri
) == 0

96 
ªt
 = 
i
;

101  
ªt
;

102 
	}
}

104 
	$ßve_public_v∑th_swôch_c⁄f
(
⁄
, 
tu¬ñ_id
, 
c⁄f_ty≥
, *
gw
)

106 
v∑th_swôch_c⁄f
[100];

107 
cJSON
 *
js⁄_c⁄f
 = 
	`cJSON_Cª©eObje˘
();

108 i‡(
c⁄f_ty≥
 == 0)

110 
	`•rötf
(
v∑th_swôch_c⁄f
, "/ëc/v≤/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

114 
	`•rötf
(
v∑th_swôch_c⁄f
, "/ëc/sôe/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

115 i‡(
gw
)

117 
	`cJSON_AddSåögToObje˘
(
js⁄_c⁄f
, "v∑th_tu¬ñ", 
gw
);

120 
	`cJSON_AddNumbîToObje˘
(
js⁄_c⁄f
, "⁄", 
⁄
);

121 
	`wrôe_js⁄_to_fûe
(
v∑th_swôch_c⁄f
, 
js⁄_c⁄f
);

122 
	`cJSON_Dñëe
(
js⁄_c⁄f
);

124 
	}
}

126 
cJSON
 *
	$gë_rouã_li°
()

128 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

129 
löe_buf
[4096];

130 
FILE
 *
rouã_Â
 = 
	`p›í
("route -n", "r");

131 i‡(
rouã_Â
)

134 
	`fgës
(
löe_buf
, ÷öe_buf),
rouã_Â
);

135 
	`fgës
(
löe_buf
, ÷öe_buf),
rouã_Â
);

136 
	`mem£t
(
löe_buf
, 0, (line_buf));

137 
	`fgës
(
löe_buf
, ÷öe_buf),
rouã_Â
))

139 *
ßve_±r1
 = 
NULL
;

140 *
°r
;

141 *
tokí
;

142 *
de°
 = 
NULL
;

143 *
gw
 = 
NULL
;

144 *
mask
 = 
NULL
;

145 
i
;

146 
îr‹
 = 0;

147 
°r
 = 
löe_buf
, 
i
 = 0; i < 4 ;°∏
NULL
, i++)

149 
tokí
 = 
	`°πok_r
(
°r
, " ", &
ßve_±r1
);

150 i‡(!
tokí
)

152 
îr‹
 = 1;

155 i‡(
i
 == 0)

157 
de°
 = 
tokí
;

159 if(
i
 == 1)

161 
gw
 = 
tokí
;

163 if(
i
 == 2)

165 
mask
 = 
tokí
;

168 i‡(!
îr‹
)

170 
cJSON
 *
√w_obj
 = 
	`cJSON_Cª©eObje˘
();

171 
	`MY_DEBUG_INFO
("de°:%s\tgw:%s\t:mask:%s\n",
de°
, 
gw
, 
mask
);

172 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "de°", 
de°
);

173 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "gw", 
gw
);

174 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "mask", 
mask
);

175 
	`cJSON_AddIãmToAºay
(
ªt
, 
√w_obj
);

177 
	`mem£t
(
löe_buf
, 0, (line_buf));

179 
	`p˛o£
(
rouã_Â
);

181  
ªt
;

182 
	}
}

184 
	$föd_≥î
(
cJSON
 *
≥îs
, *
≥î
, *
£rvî
)

186 
ªt
 = -1;

187 
˙t
 = 
	`cJSON_GëAºaySize
(
≥îs
);

188 
i
;

189 
i
 = 0; i < 
˙t
; i++)

191 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

192 
cJSON
 *
≥î_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "peer_vip");

194 i‡(
≥î_ôem


196 
	`°rcmp
(
≥î_ôem
->
vÆue°rög
, 
≥î
) == 0

199 
ªt
 = 
i
;

203  
ªt
;

204 
	}
}

206 
	$js⁄_ª•⁄£
(
cJSON
 *
ªs
, 
˘æ_ªque°_t
 *
ªque°
)

208 *
d©a
 = 
	`cJSON_Pröt
(
ªs
);

209 i‡(
d©a
)

211 
	`MY_DEBUG_INFO
("####Ñe•⁄£ ####\n%s\n", 
d©a
);

212 
	`£nd
(
ªque°
->
˛õ¡_fd
, 
d©a
, 
	`°æí
(data) + 1, 0);

213 
	`‰ì
(
d©a
);

216 
	}
}

218 
	$js⁄_h™dÀ_ask_√ighb‹
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

220 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

221 
cJSON
 *
vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "vip");

222 
known
 = 
	`˘æ_föd_√ighb‹
(
ch™√l_ôem
->
vÆueöt
, 
vù_ôem
->
vÆue°rög
);

223 
loˇl_œn_ù
[100];

224 
loˇl_œn_√tmask
[100];

225 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

226 i‡(
dump_c⁄fig
)

228 
	`˘æ_gë_loˇlsub√t
(
dump_c⁄fig
->
cu°om_œn_if
, 
loˇl_œn_ù
, 
loˇl_œn_√tmask
);

230 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

231 
	`cJSON_AddNumbîToObje˘
(
ªs
, "known", 
known
);

232 
	`cJSON_AddSåögToObje˘
(
ªs
, "œn_ù", 
loˇl_œn_ù
);

233 
	`cJSON_AddSåögToObje˘
(
ªs
, "œn_√tmask", 
loˇl_œn_√tmask
);

234 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

235 
	`cJSON_Dñëe
(
ªs
);

236 
	`FREE_PTR
(
dump_c⁄fig
);

238 
	}
}

240 
	$js⁄_h™dÀ_°¨t_v≤
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

244 
cJSON
 *
ãam_id_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

246 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

247 
ch™√l
 = 
ch™√l_ôem
->
vÆueöt
;

248 
îr_code
 = 0;

249 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

250 i‡(
dump_c⁄fig
)

252 
	`˘æ_íabÀ_v≤
(
dump_c⁄fig
->
tu¬ñ_ty≥
, 
ch™√l
, 
ãam_id_ôem
->
vÆue°rög
);

253 
îr_code
 = 0;

257 
îr_code
 = 1;

259 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

260 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

261 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

262 
	`cJSON_Dñëe
(
ªs
);

263 
	`FREE_PTR
(
dump_c⁄fig
);

265 
	}
}

267 
	$js⁄_h™dÀ_°›_v≤
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

269 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

270 
ch™√l
 = 
ch™√l_ôem
->
vÆueöt
;

271 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

272 
îr_code
 = 0;

273 i‡(
dump_c⁄fig
)

275 
	`˘æ_dißbÀ_v≤
(
dump_c⁄fig
->
tu¬ñ_ty≥
, 
ch™√l
);

276 
îr_code
 = 0;

280 
îr_code
 = 1;

282 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

283 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

284 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

285 
	`cJSON_Dñëe
(
ªs
);

286 
	`FREE_PTR
(
dump_c⁄fig
);

288 
	}
}

290 
	$js⁄_h™dÀ_add_v∑th_li°
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

292 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

293 
cJSON
 *
li°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "list");

294 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

296 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
li°_ôem
);

297 
îr_code
 = 0;

298 
c⁄f_ty≥
 = 0;

299 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

300 
v∑th_fûe
[100];

302 i‡(
dump_c⁄fig
->
tu¬ñ_ty≥
 != 0)

304 
c⁄f_ty≥
 = 
TYPE_VPPN
;

305 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

309 
c⁄f_ty≥
 = 
TYPE_VPN
;

310 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

312 
cJSON
 *
v∑th_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

313 i‡(!
v∑th_js⁄
)

315 
v∑th_js⁄
 = 
	`cJSON_Cª©eAºay
();

317 
i
;

318 
i
 = 0; i < 
v∑th_˙t
; i++)

320 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
li°_ôem
, 
i
);

321 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "gw");

322 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

323 *
gw
 = 
gw_ôem
->
vÆue°rög
;

324 *
uri
 = 
uri_ôem
->
vÆue°rög
;

326 
	`MY_DEBUG_INFO
("ADD 1\n");

327 i‡(
uri
 && 
gw
 && uri[0] && !
	`uri_check_ûÀgÆ
(uri))

329 
pos
 = 
	`föd_v∑th
(
v∑th_js⁄
, 
gw
, 
uri
, 
ãamid_ôem
->
vÆue°rög
);

330 
	`MY_DEBUG_INFO
("ADD 2\n");

331 i‡(
pos
 >= 0)

333 
	`MY_DEBUG_INFO
("ADD 2.1\n");

334 
	`MY_DEBUG_INFO
("ADDÉrror\n");

338 
	`MY_DEBUG_INFO
("ADD ok\n");

339 
	`MY_DEBUG_INFO
("ADD 2.2\n");

340 
cJSON
 *
√w_v∑th
 = 
	`cJSON_Cª©eObje˘
();

341 i‡(
gw
)

343 
	`cJSON_AddSåögToObje˘
(
√w_v∑th
, "v¥oxy", 
gw
);

345 
	`MY_DEBUG_INFO
("ADD 2.3\n");

346 
	`cJSON_AddSåögToObje˘
(
√w_v∑th
, "uri", 
uri
);

347 
	`cJSON_AddSåögToObje˘
(
√w_v∑th
, "ãam_id", 
ãamid_ôem
->
vÆue°rög
);

348 
	`cJSON_AddIãmToAºay
(
v∑th_js⁄
, 
√w_v∑th
);

349 
	`MY_DEBUG_INFO
("ADD 2.4\n");

353 
îr_code
 = 0;

354 
	`MY_DEBUG_INFO
("ADD 3\n");

355 
	`wrôe_js⁄_to_fûe
(
v∑th_fûe
, 
v∑th_js⁄
);

356 
	`MY_DEBUG_INFO
("ADD 4\n");

357 i‡(
dump_c⁄fig
)

359 
	`˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l_ôem
->
vÆueöt
, 
dump_c⁄fig
->
ãam_id
);

361 
	`MY_DEBUG_INFO
("ADD 5\n");

362 
	`cJSON_Dñëe
(
v∑th_js⁄
);

364 
	`MY_DEBUG_INFO
("ADD 6\n");

365 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

366 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

367 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

368 
	`MY_DEBUG_INFO
("ADD 7\n");

369 
	`cJSON_Dñëe
(
ªs
);

370 
	`MY_DEBUG_INFO
("ADD 8\n");

371 
	`FREE_PTR
(
dump_c⁄fig
);

372 
	`MY_DEBUG_INFO
("ADD 9\n");

374 
	}
}

376 
	$js⁄_h™dÀ_dñ_v∑th_li°
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

378 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

379 
cJSON
 *
li°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "list");

380 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

382 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
li°_ôem
);

383 
îr_code
 = 0;

384 
c⁄f_ty≥
 = 0;

386 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

387 
v∑th_fûe
[100];

389 i‡(
dump_c⁄fig
->
tu¬ñ_ty≥
 != 0)

391 
c⁄f_ty≥
 = 
TYPE_VPPN
;

392 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

396 
c⁄f_ty≥
 = 
TYPE_VPN
;

397 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

399 
cJSON
 *
v∑th_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

400 i‡(!
v∑th_js⁄
)

402 
v∑th_js⁄
 = 
	`cJSON_Cª©eAºay
();

404 
i
;

405 
i
 = 0; i < 
v∑th_˙t
; i++)

407 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
li°_ôem
, 
i
);

408 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "gw");

409 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

410 *
gw
 = 
gw_ôem
->
vÆue°rög
;

411 *
uri
 = 
uri_ôem
->
vÆue°rög
;

413 
pos
 = 
	`föd_v∑th
(
v∑th_js⁄
, 
gw
, 
uri
, 
ãamid_ôem
->
vÆue°rög
);

414 i‡(
pos
 < 0)

420 
	`cJSON_DñëeIãmFromAºay
(
v∑th_js⁄
, 
pos
);

423 
îr_code
 = 0;

424 
	`wrôe_js⁄_to_fûe
(
v∑th_fûe
, 
v∑th_js⁄
);

425 i‡(
dump_c⁄fig
)

427 
	`˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l_ôem
->
vÆueöt
, 
dump_c⁄fig
->
ãam_id
);

429 
	`cJSON_Dñëe
(
v∑th_js⁄
);

430 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

431 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

432 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

433 
	`cJSON_Dñëe
(
ªs
);

434 
	`FREE_PTR
(
dump_c⁄fig
);

436 
	}
}

438 
	$js⁄_h™dÀ_gë_v∑th_li°
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

440 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

441 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

442 
cJSON
 *
li°_ôem
 = 
	`cJSON_Cª©eAºay
();

444 
îr_code
 = 0;

445 
c⁄f_ty≥
 = 0;

447 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

448 
v∑th_fûe
[100];

450 i‡(
dump_c⁄fig
->
tu¬ñ_ty≥
 != 0)

452 
c⁄f_ty≥
 = 
TYPE_VPPN
;

453 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

457 
c⁄f_ty≥
 = 
TYPE_VPN
;

458 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

460 
cJSON
 *
v∑th_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

461 i‡(!
v∑th_js⁄
)

463 
v∑th_js⁄
 = 
	`cJSON_Cª©eAºay
();

465 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
v∑th_js⁄
);

466 
i
;

467 
i
 = 0; i < 
v∑th_˙t
; i++)

469 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
v∑th_js⁄
, 
i
);

470 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "vproxy");

471 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

472 
cJSON
 *
ãamid_fûe_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "team_id");

473 *
gw
 = 
gw_ôem
->
vÆue°rög
;

474 *
uri
 = 
uri_ôem
->
vÆue°rög
;

475 i‡(
	`°rcmp
(
ãamid_ôem
->
vÆue°rög
, 
ãamid_fûe_ôem
->valuestring) == 0)

477 
cJSON
* 
√w_obj
 = 
	`cJSON_Cª©eObje˘
();

478 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "uri", 
uri_ôem
->
vÆue°rög
);

479 
	`cJSON_AddSåögToObje˘
(
√w_obj
, "gw", 
gw_ôem
->
vÆue°rög
);

480 
	`cJSON_AddIãmToAºay
(
li°_ôem
, 
√w_obj
);

483 
îr_code
 = 0;

485 
	`cJSON_Dñëe
(
v∑th_js⁄
);

486 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

487 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

488 
	`cJSON_AddIãmToObje˘
(
ªs
, "li°", 
li°_ôem
);

489 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

490 
	`cJSON_Dñëe
(
ªs
);

491 
	`FREE_PTR
(
dump_c⁄fig
);

493 
	}
}

495 
	$bôfõld_to_öt
(c⁄° *
bôfõld
, 
size_t
 
size
) {

496 
vÆue
 = 0;

497 if(
size
 >  
vÆue
)

498 
size
 =  
vÆue
;

499 
	`mem˝y
(&
vÆue
, 
bôfõld
, 
size
);

500  
vÆue
;

501 
	}
}

503 
	$öt_to_bôfõld
(*
bôfõld
, 
size_t
 
size
, 
vÆue
)

505 if(
size
 >  
vÆue
)

506 
size
 =  
vÆue
;

507 
	`mem˝y
(
bôfõld
, &
vÆue
, 
size
);

509 
	}
}

511 
	snode_°©us_t
 {

512 
	munu£d_a˘ive
:1;

513 
	mvÆidkey
:1;

514 
	mwaôögf‹key
:1;

515 
	mvisôed
:1;

516 
	mªachabÀ
:1;

517 
	mödúe˘
:1;

518 
	m•çs
:1;

519 
	mudp_c⁄fúmed
:1;

520 
	m£nd_loˇŒy
:1;

521 
	mudµackë
:1;

522 
	mvÆidkey_ö
:1;

523 
	mhas_addªss
:1;

524 
	munu£d
:20;

525 } 
	tnode_°©us_t
;

527 
	$«me_to_ù
(* 
«me
, *
ù_out
)

529 
ãmp1
;

530 
ãmp2
;

531 
	`ssˇnf
(
«me
, "%d_%d", &
ãmp1
, &
ãmp2
);

532 
	`•rötf
(
ù_out
, "10.1.%d.%d", 
ãmp1
, 
ãmp2
);

534 
	}
}

536 
cJSON
* 
	$∑r£_ªachabÀ_nodes
(*
°r
)

538 
cJSON
* 
ªt
 = 
	`cJSON_Cª©eAºay
();

539 i‡(
°r
)

541 
°r_Àn
 = 
	`°æí
(
°r
);

542 *
löe_°¨t
 = 
°r
;

543 *
löe_íd
 = 
NULL
;

544 
löe_íd
 = 
	`°rchr
(
löe_°¨t
, '\n'))

546 
löe_buf
[200] = "";

547 
	`°∫˝y
(
löe_buf
, 
löe_°¨t
, 
löe_íd
 -Üine_start);

548 *
löe_íd
 = 0;

549 
	`MY_DEBUG_INFO
("löe: %s\n", 
löe_buf
);

550 * 
«me_±r
 = 
löe_°¨t
;

551 * 
°©us_±r
 = 
	`°rchr
(
löe_°¨t
, ' ');

552 *(
°©us_±r
++) = 0;

553 
°©us
 = 0;

554 
	`ssˇnf
(
°©us_±r
, "%x", &
°©us
);

555 
node_°©us_t
 
node_°©e
;

556 
	`öt_to_bôfõld
(&
node_°©e
, “ode_°©e), 
°©us
);

557 i‡(
node_°©e
.
udp_c⁄fúmed
)

559 
cJSON
* 
node_ôem
 = 
NULL
;

560 i‡(
	`°rcmp
(
«me_±r
, "vpnserver") == 0)

562 
node_ôem
 = 
	`cJSON_Cª©eSåög
("10.1.255.1");

566 
vù
[100] = "";

567 
	`«me_to_ù
(
«me_±r
, 
vù
);

568 
node_ôem
 = 
	`cJSON_Cª©eSåög
(
vù
);

570 
	`cJSON_AddIãmToAºay
(
ªt
, 
node_ôem
);

572 
löe_°¨t
 = 
löe_íd
 + 1;

573 i‡(
löe_°¨t
 - 
°r
 >
°r_Àn
)

579  
ªt
;

580 
	}
}

582 
	$js⁄_h™dÀ_dump_nodes
(
cJSON
* 
js⁄ªq
, 
˘æ_ªque°_t
* 
ªque°
)

584 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

585 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

586 
cJSON
 *
li°_ôem
 = 
	`cJSON_Cª©eAºay
();

587 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

588 
cmdbuf
[200];

589 
	`•rötf
(
cmdbuf
, "tö¯--c⁄fig=/ëc/töc/sôe%d --pidfûe=/v¨/run/sôe%d.pid dum∞ªachabÀÇode†|áwk '{¥öà$1,$19}'", 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_config->tunnel.tunnel_id);

590 *
ªsu…
 = 
	`¥o˚ss_toﬁ_run_cmd
(
cmdbuf
);

591 
cJSON
* 
nodes
 = 
NULL
;

592 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

593 i‡(
ªsu…
)

595 
nodes
 = 
	`∑r£_ªachabÀ_nodes
(
ªsu…
);

596 
	`‰ì
(
ªsu…
);

598 i‡(!
nodes
)

600 
nodes
 = 
	`cJSON_Cª©eAºay
();

602 
	`cJSON_AddNumbîToObje˘
(
ªs
, "err_code", 0);

603 
	`cJSON_AddIãmToObje˘
(
ªs
, "dúe˘_li°", 
nodes
);

604 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

605 
	`cJSON_Dñëe
(
ªs
);

606 
	`FREE_PTR
(
dump_c⁄fig
);

607 
	}
}

609 
£t_membîs_c⁄f
(
cJSON
* 
membîs
, * 
ãamid
, * 
£lf_id
, 
tu¬ñ_id
, 
v≤_tu¬ñ_s
 *
tu¬ñ
);

611 
	$js⁄_h™dÀ_ªlﬂd_membî
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

613 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

614 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

615 
cJSON
 *
li°_ôem
 = 
	`cJSON_Cª©eAºay
();

617 
îr_code
 = 0;

618 
c⁄f_ty≥
 = 0;

620 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

621 
cJSON
* 
ªq
 = 
	`cJSON_Cª©eObje˘
();

622 i‡(
ªq
)

624 
	`cJSON_AddSåögToObje˘
(
ªq
, "ãamId", 
dump_c⁄fig
->
ãam_id
);

625 
cJSON
* 
ª•⁄£
 = 
	`√t_toﬁ_hâp_js⁄_˛õ¡2
(1, 
dump_c⁄fig
->
˛oud_ho°
, dump_c⁄fig->
˛oud_p‹t
, "/vµn/≠i/v1/˛õ¡/£¨chTómById", 
ªq
, "Authorization: Basic YWRtaW46cHVibGlj\r\n");

626 i‡(
ª•⁄£
)

628 
cJSON
* 
code_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "code");

629 i‡(
code_ôem
)

631 i‡(
code_ôem
->
vÆueöt
 == 200)

633 
cJSON
* 
membîs_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "members");

635 i‡(
membîs_ôem
)

637 
	`£t_membîs_c⁄f
(
membîs_ôem
, 
dump_c⁄fig
->
ãam_id
, dump_c⁄fig->
£lf_id
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
, &dump_config->tunnel);

641 
	`cJSON_Dñëe
(
ª•⁄£
);

643 
	`cJSON_Dñëe
(
ªq
);

645 
	`FREE_PTR
(
dump_c⁄fig
);

647 
	}
}

649 
	$js⁄_h™dÀ_add_v∑th
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

652 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

653 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "vproxy");

655 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "uri");

656 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

658 
c⁄f_ty≥
 = 0;

659 *
gw
 = 
gw_ôem
->
vÆue°rög
;

661 *
uri
 = 
uri_ôem
->
vÆue°rög
;

662 
îr_code
 = 1;

663 i‡(
uri
 && uri[0] && !
	`uri_check_ûÀgÆ
(uri))

665 
	`MY_DEBUG_INFO
("ADD v¥oxy = %s, urò%s\n", 
gw
, 
uri
);

666 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

667 
v∑th_fûe
[100];

669 i‡(
dump_c⁄fig
->
tu¬ñ_ty≥
 != 0)

671 
c⁄f_ty≥
 = 
TYPE_VPPN
;

672 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

676 
c⁄f_ty≥
 = 
TYPE_VPN
;

677 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

680 
cJSON
 *
v∑th_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

681 i‡(!
v∑th_js⁄
)

683 
v∑th_js⁄
 = 
	`cJSON_Cª©eAºay
();

685 
pos
 = 
	`föd_v∑th
(
v∑th_js⁄
, 
gw
, 
uri
, 
ãamid_ôem
->
vÆue°rög
);

686 i‡(
pos
 >= 0)

688 
	`MY_DEBUG_INFO
("ADDÉrror\n");

692 
	`MY_DEBUG_INFO
("ADD ok\n");

693 
cJSON
 *
√w_v∑th
 = 
	`cJSON_Cª©eObje˘
();

694 i‡(
gw
)

696 
	`cJSON_AddSåögToObje˘
(
√w_v∑th
, "v¥oxy", 
gw
);

698 
	`cJSON_AddSåögToObje˘
(
√w_v∑th
, "uri", 
uri
);

699 
	`cJSON_AddIãmToAºay
(
v∑th_js⁄
, 
√w_v∑th
);

700 
îr_code
 = 0;

702 
	`wrôe_js⁄_to_fûe
(
v∑th_fûe
, 
v∑th_js⁄
);

703 
	`cJSON_Dñëe
(
v∑th_js⁄
);

704 i‡(
dump_c⁄fig
)

706 
	`˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l_ôem
->
vÆueöt
, 
dump_c⁄fig
->
ãam_id
);

708 
	`FREE_PTR
(
dump_c⁄fig
);

710 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

711 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

712 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

713 
	`cJSON_Dñëe
(
ªs
);

715 
	}
}

717 
	$js⁄_h™dÀ_dñ_v∑th
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

719 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

720 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "vproxy");

721 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "uri");

722 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "team_id");

724 
c⁄f_ty≥
 = 0;

725 *
gw
 = 
gw_ôem
->
vÆue°rög
;

726 *
uri
 = 
uri_ôem
->
vÆue°rög
;

727 
îr_code
 = 1;

728 i‡(
uri
 && uri[0])

730 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

731 
v∑th_fûe
[100];

733 i‡(
dump_c⁄fig
->
tu¬ñ_ty≥
 != 0)

735 
c⁄f_ty≥
 = 
TYPE_VPPN
;

736 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

740 
c⁄f_ty≥
 = 
TYPE_VPN
;

741 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

743 
cJSON
 *
v∑th_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

744 i‡(!
v∑th_js⁄
)

746 
v∑th_js⁄
 = 
	`cJSON_Cª©eAºay
();

749 
pos
 = 
	`föd_v∑th
(
v∑th_js⁄
, 
gw
, 
uri
, 
ãamid_ôem
->
vÆue°rög
);

750 i‡(
pos
 < 0)

756 
	`cJSON_DñëeIãmFromAºay
(
v∑th_js⁄
, 
pos
);

757 
îr_code
 = 0;

759 
	`wrôe_js⁄_to_fûe
(
v∑th_fûe
, 
v∑th_js⁄
);

760 i‡(
dump_c⁄fig
)

762 
	`˘æ_ªlﬂd_dnsmasq
(
c⁄f_ty≥
, 
ch™√l_ôem
->
vÆueöt
, 
dump_c⁄fig
->
ãam_id
);

764 
	`cJSON_Dñëe
(
v∑th_js⁄
);

765 
	`FREE_PTR
(
dump_c⁄fig
);

767 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

768 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

769 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

770 
	`cJSON_Dñëe
(
ªs
);

772 
	}
}

774 
	$js⁄_h™dÀ_add_public_v∑th
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

776 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

777 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "vproxy");

778 *
gw
 = 
gw_ôem
->
vÆue°rög
;

779 
îr_code
 = 1;

781 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

782 
cJSON
 *
whôñi°
 = 
	`gë_public_whôñi°
(
dump_c⁄fig
->
˛oud_ho°
, dump_c⁄fig->
˛oud_p‹t
, dump_c⁄fig->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

783 i‡(
whôñi°
)

785 
îr_code
 = 0;

786 
	`gíî©e_public_v∑th_c⁄f
(
whôñi°
, 
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
, 
gw
);

787 
	`ßve_public_v∑th_swôch_c⁄f
(1, 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
tu¬ñ_ty≥
, 
gw
);

788 
	`˘æ_ªlﬂd_dnsmasq
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
ãam_id
);

789 
	`cJSON_Dñëe
(
whôñi°
);

791 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

792 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

793 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

794 
	`cJSON_Dñëe
(
ªs
);

795 
	`FREE_PTR
(
dump_c⁄fig
);

797 
	}
}

799 
	$js⁄_h™dÀ_dñ_public_v∑th
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

801 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

802 
îr_code
 = 0;

803 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

805 
	`ªmove_public_v∑th_c⁄f
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

806 
	`ßve_public_v∑th_swôch_c⁄f
(0, 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
tu¬ñ_ty≥
, 
NULL
);

807 
	`˘æ_ªlﬂd_dnsmasq
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
ãam_id
);

810 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

811 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

812 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

813 
	`cJSON_Dñëe
(
ªs
);

814 
	`FREE_PTR
(
dump_c⁄fig
);

816 
	}
}

818 
	$js⁄_h™dÀ_gë_£rvîli°
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

820 
îr_code
 = 1;

821 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

822 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

823 
cJSON
 *
ªq
 = 
	`cJSON_Cª©eObje˘
();

824 
cJSON
 *
£rvîli°
 = 
	`√t_toﬁ_hâp_js⁄_˛õ¡
(
dump_c⁄fig
->
˛oud_ho°
, dump_c⁄fig->
˛oud_p‹t
, "/GëSîvîLi°", 
ªq
);

825 i‡(
£rvîli°
)

827 
	`MY_DEBUG_INFO
("serverlist1\n");

828 
îr_code
 = 0;

829 
	`cJSON_AddIãmToObje˘
(
ªs
, "£rvî_li°", 
£rvîli°
);

831 
	`MY_DEBUG_INFO
("serverlist2\n");

832 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

833 
	`MY_DEBUG_INFO
("serverlist3\n");

834 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

835 
	`MY_DEBUG_INFO
("serverlist4\n");

836 
	`cJSON_Dñëe
(
ªs
);

837 
	`MY_DEBUG_INFO
("serverlist5\n");

838 
	`cJSON_Dñëe
(
ªq
);

839 
	`MY_DEBUG_INFO
("serverlist6\n");

840 
	`FREE_PTR
(
dump_c⁄fig
);

842 
	}
}

844 
	$js⁄_h™dÀ_gë_rouã
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

846 
îr_code
 = 0;

847 
cJSON
 *
rouã_li°
 = 
	`gë_rouã_li°
();

848 i‡(!
rouã_li°
)

850 
îr_code
 = 1;

851 
rouã_li°
 = 
	`cJSON_Cª©eAºay
();

854 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

855 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

856 
	`cJSON_AddIãmToObje˘
(
ªs
, "rouã_li°", 
rouã_li°
);

857 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

858 
	`cJSON_Dñëe
(
ªs
);

860 
	}
}

862 
	$js⁄_h™dÀ_add_≥î
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

864 
îr_code
 = 0;

865 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

866 
cJSON
 *
≥î_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "peer");

867 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "server");

869 *
≥î
 = 
≥î_ôem
->
vÆue°rög
;

870 *
£rvî
 = 
£rvî_ôem
->
vÆue°rög
;

871 
≥îs_c⁄f_fûe
[100];

873 
	`•rötf
(
≥îs_c⁄f_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

874 
cJSON
 *
≥îs_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_c⁄f_fûe
);

875 i‡(
≥îs_js⁄
)

880 
≥îs_js⁄
 = 
	`cJSON_Cª©eAºay
();

882 i‡(
	`föd_≥î
(
≥îs_js⁄
, 
≥î
, 
£rvî
) < 0)

884 
cJSON
 *
√w_≥î
 = 
	`cJSON_Cª©eObje˘
();

885 
	`cJSON_AddSåögToObje˘
(
√w_≥î
, "≥î_vù", 
≥î
);

887 
	`cJSON_AddIãmToAºay
(
≥îs_js⁄
, 
√w_≥î
);

888 
îr_code
 = 0;

892 
îr_code
 = 1;

894 
	`wrôe_js⁄_to_fûe
(
≥îs_c⁄f_fûe
, 
≥îs_js⁄
);

895 
	`cJSON_Dñëe
(
≥îs_js⁄
);

896 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

897 i‡(
dump_c⁄fig
)

899 
	`˘æ_ªlﬂd_búd
(
TYPE_VPPN
, 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
ãam_id
);

901 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

902 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

903 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

904 
	`cJSON_Dñëe
(
ªs
);

905 
	`FREE_PTR
(
dump_c⁄fig
);

907 
	}
}

909 
	$js⁄_h™dÀ_dñ_≥î
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

911 
îr_code
 = 0;

912 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

913 
cJSON
 *
≥î_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "peer");

914 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "server");

916 *
≥î
 = 
≥î_ôem
->
vÆue°rög
;

917 *
£rvî
 = 
£rvî_ôem
->
vÆue°rög
;

918 
≥îs_c⁄f_fûe
[100];

920 
	`•rötf
(
≥îs_c⁄f_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
ch™√l_ôem
->
vÆueöt
);

921 
cJSON
 *
≥îs_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_c⁄f_fûe
);

922 i‡(
≥îs_js⁄
)

927 
≥îs_js⁄
 = 
	`cJSON_Cª©eAºay
();

930 
pos
 = 
	`föd_≥î
(
≥îs_js⁄
, 
≥î
, 
£rvî
);

931 i‡(
pos
 >= 0)

933 
	`cJSON_DñëeIãmFromAºay
(
≥îs_js⁄
, 
pos
);

934 
îr_code
 = 0;

938 
îr_code
 = 1;

940 
	`wrôe_js⁄_to_fûe
(
≥îs_c⁄f_fûe
, 
≥îs_js⁄
);

941 
	`cJSON_Dñëe
(
≥îs_js⁄
);

942 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

943 i‡(
dump_c⁄fig
)

945 
	`˘æ_ªlﬂd_búd
(
TYPE_VPPN
, 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->
ãam_id
);

947 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

948 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

949 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

950 
	`cJSON_Dñëe
(
ªs
);

951 
	`FREE_PTR
(
dump_c⁄fig
);

953 
	}
}

955 
	$js⁄_h™dÀ_add_m™agî
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

957 
îr_code
 = 1;

958 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "cloud_host");

959 
cJSON
 *
p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "cloud_port");

960 
cJSON
 *
ch™√l_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "channel");

961 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

962 i‡(
dump_c⁄fig
)

964 
îr_code
 = 0;

965 
	`˘æ_£t_m™agî
(
dump_c⁄fig
->
tu¬ñ_ty≥
, 
ch™√l_ôem
->
vÆueöt
, 
ho°_ôem
->
vÆue°rög
, 
p‹t_ôem
->valueint);

967 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

968 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

969 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

970 
	`cJSON_Dñëe
(
ªs
);

971 
	`FREE_PTR
(
dump_c⁄fig
);

973 
	}
}

975 
	$js⁄_h™dÀ_dñ_m™agî
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

977 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

978 
	`cJSON_AddNumbîToObje˘
(
ªs
, "err_code", 0);

979 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

980 
	`cJSON_Dñëe
(
ªs
);

982 
	}
}

984 
cJSON
 *
	$js⁄_gë_m™agî
(
tu¬ñ_ty≥
, 
tu¬ñ_id
)

986 
cJSON
 *
ªt
 = 
	`˘æ_gë_m™agî
(
tu¬ñ_ty≥
, 
tu¬ñ_id
);

987 i‡(!
ªt
)

989 
ªt
 = 
	`cJSON_Cª©eObje˘
();

991  
ªt
;

992 
	}
}

994 
cJSON
 *
	$js⁄_gë_≥îs
(
tu¬ñ_id
, *
£rvî
)

996 
≥îs_c⁄f_fûe
[100];

997 
	`•rötf
(
≥îs_c⁄f_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
tu¬ñ_id
);

998 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

999 
cJSON
 *
≥îs_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_c⁄f_fûe
);

1000 i‡(
≥îs_js⁄
)

1002 
≥îs_˙t
 = 
	`cJSON_GëAºaySize
(
≥îs_js⁄
);

1003 
i
;

1005 i‡(
≥îs_˙t
)

1009 
i
 = 0; i < 
≥îs_˙t
; i++)

1011 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
≥îs_js⁄
, 
i
);

1012 
cJSON
 *
≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "peer_vip");

1014 
cJSON
 *
ôem_to_pög
 = 
	`cJSON_Cª©eObje˘
();

1015 
	`cJSON_AddIãmToObje˘
(
ôem_to_pög
, "≥î_vù", 
	`cJSON_Du∂iˇã
(
≥î_vù_ôem
, 1));

1017 
	`cJSON_AddIãmToAºay
(
ªt
, 
ôem_to_pög
);

1019 
	`√t_toﬁ_pög_ho°s2
(
ªt
, "peer_vip", "peer_latency", 2);

1021 
	`cJSON_Dñëe
(
≥îs_js⁄
);

1023  
ªt
;

1024 
	}
}

1026 
cJSON
 *
	$js⁄_gë_rouãs
()

1028 
cJSON
 *
ªt
 = 
	`gë_rouã_li°
();

1029 i‡(!
ªt
)

1031 
ªt
 = 
	`cJSON_Cª©eAºay
();

1033  
ªt
;

1034 
	}
}

1036 
cJSON
 *
	$js⁄_gë_v∑thli°
(
tu¬ñ_ty≥
, 
tu¬ñ_id
)

1038 
c⁄f_ty≥
;

1039 
v∑th_fûe
[100];

1040 i‡(
tu¬ñ_ty≥
 != 0)

1042 
	`•rötf
(
v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
tu¬ñ_id
);

1046 
	`•rötf
(
v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
tu¬ñ_id
);

1048 
cJSON
 *
ªt
 = 
	`ªad_js⁄_‰om_fûe
(
v∑th_fûe
);

1049 i‡(!
ªt
)

1051 
ªt
 = 
	`cJSON_Cª©eAºay
();

1053  
ªt
;

1054 
	}
}

1056 
cJSON
 *
	$js⁄_gë_public_v∑th
(
tu¬ñ_ty≥
, 
tu¬ñ_id
)

1058 
cJSON
 *
ªt
 = 
	`˘æ_gë_public_whôñi°_swôch
(
tu¬ñ_ty≥
, 
tu¬ñ_id
);

1059 i‡(!
ªt
)

1061 
ªt
 = 
	`cJSON_Cª©eObje˘
();

1063  
ªt
;

1064 
	}
}

1066 
cJSON
 *
	$js⁄_gë_∑ckage
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1068 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eObje˘
();

1069 
	`cJSON_AddSåögToObje˘
(
ªt
, "ídtime", 
tu¬ñ
->
öfo
.
∑ckage
.
ídtime
);

1070 
	`cJSON_AddSåögToObje˘
(
ªt
, "Êow", 
tu¬ñ
->
öfo
.
∑ckage
.
Êow
);

1071 
	`cJSON_AddSåögToObje˘
(
ªt
, "mac", 
tu¬ñ
->
öfo
.
∑ckage
.
mac
);

1072 
	`cJSON_AddSåögToObje˘
(
ªt
, "ty≥", 
tu¬ñ
->
öfo
.
∑ckage
.
ty≥
);

1073  
ªt
;

1074 
	}
}

1076 
cJSON
 *
	$js⁄_gë_v≤_≥îs
()

1078 
cJSON
 *
ªs
 = 
NULL
;

1079 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1080 
ªs
 = 
	`js⁄_gë_≥îs
(
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, dump_c⁄fig->tu¬ñ.
öfo
.
ªsour˚
.
v≤_£rvî_ho°
);

1081 
	`FREE_PTR
(
dump_c⁄fig
);

1082  
ªs
;

1083 
	}
}

1085 
cJSON
 *
	$js⁄_gë_v≤_°©us
()

1087 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

1089 
cJSON
 *
rouã_li°_ôem
 = 
	`js⁄_gë_rouãs
();

1090 
cJSON
 *
°©us_ôem
 = 
	`cJSON_Cª©eObje˘
();

1091 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1093 
cJSON
 *
m™agî_ôem
 = 
	`js⁄_gë_m™agî
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1094 
	`cJSON_AddIãmToObje˘
(
ªs
, "m™agî", 
m™agî_ôem
);

1095 
	`cJSON_AddIãmToObje˘
(
ªs
, "rouã_li°", 
rouã_li°_ôem
);

1096 
	`cJSON_AddIãmToObje˘
(
ªs
, "tu¬ñ_°©us", 
°©us_ôem
);

1098 
	`cJSON_AddNumbîToObje˘
(
°©us_ôem
, "err_code", 0);

1099 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "¥oxy_ho°", 
dump_c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_ho°
);

1100 
	`cJSON_AddNumbîToObje˘
(
°©us_ôem
, "¥oxy_p‹t", 
dump_c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_p‹t
);

1102 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "tu¬ñ_vù", 
dump_c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_ù
);

1103 
	`cJSON_AddNumbîToObje˘
(
°©us_ôem
, "tu¬ñ_œãncy", 
dump_c⁄fig
->
tu¬ñ
.
öfo
.
œãncy
);

1105 
	`cJSON_AddIãmToObje˘
(
°©us_ôem
, "v∑ths", 
	`js⁄_gë_v∑thli°
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
));

1106 
	`cJSON_AddIãmToObje˘
(
°©us_ôem
, "public_v∑ths", 
	`js⁄_gë_public_v∑th
(
dump_c⁄fig
->
tu¬ñ_ty≥
, dump_c⁄fig->
tu¬ñ
.
tu¬ñ_id
));

1107 
	`cJSON_AddIãmToObje˘
(
°©us_ôem
, "∑ckage", 
	`js⁄_gë_∑ckage
(&
dump_c⁄fig
->
tu¬ñ
));

1108 
dump_c⁄fig
->
tu¬ñ
.
öfo
.
°©us
)

1110 
TUNNEL_GET_RESOURCE
:

1111 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "running_status", "selecting_resource");

1113 
TUNNEL_CONNECT
:

1114 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "running_status", "connecting");

1116 
TUNNEL_DONE
:

1117 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "running_status", "connected");

1120 
	`cJSON_AddSåögToObje˘
(
°©us_ôem
, "running_status", "disable");

1123 
	`FREE_PTR
(
dump_c⁄fig
);

1124  
ªs
;

1125 
	}
}

1127 
cJSON
 *
	gglobÆ_v≤_°©us
 = 
NULL
;

1128 
±hªad_muãx_t
 
	gv≤_°©us_lock
;

1131 
cJSON
 *
	gglobÆ_v≤_≥îs
 = 
NULL
;

1132 
±hªad_muãx_t
 
	gv≤_≥îs_lock
;

1134 
	$upd©e_v≤_≥îs
()

1136 
cJSON
 *
√w_v≤_≥îs
 = 
	`js⁄_gë_v≤_≥îs
();

1137 i‡(
√w_v≤_≥îs
)

1139 
	`±hªad_muãx_lock
(&
v≤_≥îs_lock
);

1140 i‡(
globÆ_v≤_≥îs
)

1142 
	`cJSON_Dñëe
(
globÆ_v≤_≥îs
);

1144 
globÆ_v≤_≥îs
 = 
√w_v≤_≥îs
;

1145 
	`±hªad_muãx_u∆ock
(&
v≤_≥îs_lock
);

1148 
	}
}

1150 *
	$js⁄_gë_v≤_≥îs_thªad
(*
¨g
)

1152 
	`±hªad_dëach
(
	`±hªad_£lf
());

1155 
	`upd©e_v≤_≥îs
();

1156 
	`¶ìp
(10);

1158  
NULL
;

1159 
	}
}

1161 
	$¸óã_≥îs_upd©e_thªad
()

1163 
±hªad_t
 
nid
;

1164 
	`±hªad_muãx_öô
(&
v≤_≥îs_lock
, 
NULL
);

1165 
	`±hªad_¸óã
(&
nid
, 
NULL
, 
js⁄_gë_v≤_≥îs_thªad
, NULL);

1167 
	}
}

1169 
	$sync_≥î
(
cJSON
 *
√w_≥îs
, cJSON *
ﬁd_ôem
)

1171 
√w_˙t
 = 
	`cJSON_GëAºaySize
(
√w_≥îs
);

1172 
i
;

1174 
cJSON
 *
ﬁd_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "peer_vip");

1176 
cJSON
 *
ﬁd_œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "peer_latency");

1177 
i
 = 0; i < 
√w_˙t
; i++)

1179 
cJSON
 *
√w_ôem
 = 
	`cJSON_GëAºayIãm
(
√w_≥îs
, 
i
);

1180 
cJSON
 *
vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
√w_ôem
, "peer_vip");

1183 i‡(
	`°rcmp
(
vù_ôem
->
vÆue°rög
, 
ﬁd_vù_ôem
->valuestring) == 0)

1185 i‡(
ﬁd_œãncy_ôem
)

1187 
	`cJSON_AddNumbîToObje˘
(
√w_ôem
, "≥î_œãncy", 
ﬁd_œãncy_ôem
->
vÆueöt
);

1192 
	}
}

1194 
	$sync_≥îs
(
cJSON
 *
√w_≥îs
, cJSON *
ﬁd_≥îs
)

1196 
ﬁd_˙t
 = 
	`cJSON_GëAºaySize
(
ﬁd_≥îs
);

1197 
i
;

1198 
i
 = 0; i < 
ﬁd_˙t
; i++)

1200 
cJSON
 *
ﬁd_ôem
 = 
	`cJSON_GëAºayIãm
(
ﬁd_≥îs
, 
i
);

1201 
	`sync_≥î
(
√w_≥îs
, 
ﬁd_ôem
);

1204 
	}
}

1206 
	$fix_v≤°©us_≥îs
(
cJSON
 *
°©us
, 
tu¬ñ_id
)

1208 
≥îs_c⁄f_fûe
[100];

1209 
	`•rötf
(
≥îs_c⁄f_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
tu¬ñ_id
);

1210 
cJSON
 *
tu¬ñ_°©us_ôem
 = 
	`cJSON_GëObje˘Iãm
(
°©us
, "tunnel_status");

1211 
cJSON
 *
≥îs_ôem
 = 
	`cJSON_GëObje˘Iãm
(
tu¬ñ_°©us_ôem
, "peers");

1212 
cJSON
 *
cur_≥îs
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_c⁄f_fûe
);

1213 i‡(!
cur_≥îs
)

1215 
cur_≥îs
 = 
	`cJSON_Cª©eAºay
();

1217 
	`sync_≥îs
(
cur_≥îs
, 
≥îs_ôem
);

1218 
	`cJSON_Rïœ˚IãmInObje˘
(
tu¬ñ_°©us_ôem
, "≥îs", 
cur_≥îs
);

1219 
	}
}

1221 
	$js⁄_h™dÀ_gë_v≤°©us
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1223 
cJSON
 *
ªs
 = 
NULL
;

1224 
ªs
 = 
	`js⁄_gë_v≤_°©us
();

1225 
cJSON
 *
≥îs
 = 
NULL
;

1226 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1227 
	`±hªad_muãx_lock
(&
v≤_≥îs_lock
);

1228 i‡(
globÆ_v≤_≥îs
)

1230 
≥îs
 = 
	`cJSON_Du∂iˇã
(
globÆ_v≤_≥îs
, 1);

1232 
	`±hªad_muãx_u∆ock
(&
v≤_≥îs_lock
);

1233 
cJSON
 *
°©us_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ªs
, "tunnel_status");

1234 i‡(
°©us_ôem
 && 
≥îs
)

1236 
	`cJSON_AddIãmToObje˘
(
°©us_ôem
, "≥îs", 
	`cJSON_Du∂iˇã
(
≥îs
, 1));

1237 
	`fix_v≤°©us_≥îs
(
ªs
, 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
);

1239 i‡(
≥îs
)

1241 
	`cJSON_Dñëe
(
≥îs
);

1243 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1244 
	`cJSON_Dñëe
(
ªs
);

1245 
	`FREE_PTR
(
dump_c⁄fig
);

1247 
	}
}

1249 
	$skù_¸lf
(*
°r
)

1251 
Àn
 = 
	`°æí
(
°r
);

1252 
i
;

1253 
i
 = 0; i < 
Àn
; i++)

1255 i‡(
°r
[
i
] == '\n' || str[i] == '\r')

1257 
°r
[
i
] = 0;

1262 
	}
}

1264 
	$gë_¢
(*
out
)

1266 *
ãxt
 = 
	`¥o˚ss_toﬁ_run_cmd
("artmtd -r sn");

1267 i‡(
ãxt
)

1269 
	`skù_¸lf
(
ãxt
);

1270 
	`°r˝y
(
out
, 
ãxt
 + 3);

1271 
	`‰ì
(
ãxt
);

1274 
	}
}

1276 
	$gë_moduÀ_«me
(*
out
)

1278 *
ãxt
 = 
	`ªad_ãxt
("/module_name");

1279 i‡(
ãxt
)

1281 
	`skù_¸lf
(
ãxt
);

1282 
	`°r˝y
(
out
, 
ãxt
);

1283 
	`‰ì
(
ãxt
);

1286 
	}
}

1288 
	$gë_fúmw¨e_vîsi⁄
(*
out
)

1290 *
ãxt
 = 
	`ªad_ãxt
("/firmware_version");

1291 i‡(
ãxt
)

1293 
	`skù_¸lf
(
ãxt
);

1294 
	`°r˝y
(
out
, 
ãxt
);

1295 
	`‰ì
(
ãxt
);

1298 
	}
}

1300 
	$gë_hâp_∑ssw‹d
(*
out
, 
max_Àn
)

1302 *
cmd_out
 = 
	`¥o˚ss_toﬁ_run_cmd
("config get http_passwd");

1303 i‡(
cmd_out
)

1305 
	`skù_¸lf
(
cmd_out
);

1306 i‡(
	`°æí
(
cmd_out
Ë<
max_Àn
 / 2)

1308 
	`ba£64_ícode
(
cmd_out
, 
	`°æí
(cmd_out), 
out
);

1310 
	`‰ì
(
cmd_out
);

1312 
	}
}

1314 
	sgeoù_°ru˘


1316 
	mpublic_ù
[32];

1317 
	mœtôude
[32];

1318 
	ml⁄gtôude
[32];

1320 
geoù_°ru˘
 
	gg_geoù
;

1322 
	$gë_geoù
(*
publicù_buf
, *
œtôude_buf
, *
l⁄gtôude_buf
)

1324 *
±r
 = 
NULL
;

1325 *
tokí
 = 
NULL
;

1326 *
buf
 = 
NULL
;

1328 
gŸ
 = 0;

1330 
ªt
 = -1;

1332 
Àn
;

1333 
geo_Àn
 = 0;

1334 i‡(
gŸ
 == 0)

1336 *
geo_ªs
 = 
	`√t_toﬁ_hâp_˛õ¡2
(0, "geoù.bigô.com", 80, "/geoù.php", 
NULL
, 0, NULL, &
geo_Àn
);

1337 i‡(
geo_ªs
)

1339 
	`MY_DEBUG_INFO
("gëÑe•⁄£ %s\n", 
geo_ªs
);

1340 i‡(
geo_Àn
 > 0)

1343 
buf
 = 
	`°r°r
(
geo_ªs
, "\r\n\r\n");

1344 i‡(!
buf
)

1346 
buf
 = 
	`°r°r
(
geo_ªs
, "\n\n");

1348 i‡(
buf
)

1350 
gŸ
 = 1;

1351 i‡((
±r
 = 
	`°r°r
(
buf
, "ipaddr:")))

1353 
±r
 +
	`°æí
("ipaddr:");

1354 
tokí
 = 
	`°rchr
(
±r
, '<');

1355 
Àn
 = 
tokí
 - 
±r
;

1356 i‡(
Àn
)

1358 
	`°∫˝y
(
g_geoù
.
public_ù
, 
±r
, 32);

1362 i‡((
±r
 = 
	`°r°r
(
buf
, "latitude:")))

1364 
±r
 +
	`°æí
("latitude:");

1365 
tokí
 = 
	`°rchr
(
±r
, '<');

1366 
Àn
 = 
tokí
 - 
±r
;

1367 i‡(
Àn
)

1369 
	`°∫˝y
(
g_geoù
.
œtôude
, 
±r
, 32);

1373 i‡((
±r
 = 
	`°r°r
(
buf
, "longtitude:")))

1375 
±r
 +
	`°æí
("longtitude:");

1376 
tokí
 = 
	`°rchr
(
±r
, '<');

1377 
Àn
 = 
tokí
 - 
±r
;

1378 i‡(
Àn
)

1380 
	`°∫˝y
(
g_geoù
.
l⁄gtôude
, 
±r
, 32);

1386 
	`‰ì
(
geo_ªs
);

1389 
	`°∫˝y
(
publicù_buf
, 
g_geoù
.
public_ù
, 32);

1390 
	`°∫˝y
(
œtôude_buf
, 
g_geoù
.
œtôude
, 32);

1391 
	`°∫˝y
(
l⁄gtôude_buf
, 
g_geoù
.
l⁄gtôude
, 32);

1393 
	}
}

1395 
	$js⁄_h™dÀ_gë_devi˚öfo
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1397 
w™_ù_buf
[32] = "";

1398 
w™_mac_buf
[32] = "";

1399 
œn_ù_buf
[32] = "";

1400 
œn_mac_buf
[32] = "";

1401 
¢_buf
[32] = "";

1402 
moduÀ_«me_buf
[32] = "";

1403 
fúmw¨e_vîsi⁄_buf
[32] = "";

1404 
hâp_∑ssw‹d
[200] = "";

1405 
œtôude_buf
[40] = "";

1406 
l⁄gtôude_buf
[40] = "";

1407 
publicù_buf
[40] = "";

1409 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1410 
	`√t_toﬁ_gë_if_ù
(
dump_c⁄fig
->
cu°om_w™_if
, 
w™_ù_buf
);

1411 
	`√t_toﬁ_gë_if_hwaddr
(
dump_c⁄fig
->
cu°om_w™_if
, 
w™_mac_buf
);

1412 
	`√t_toﬁ_gë_if_ù
(
dump_c⁄fig
->
cu°om_œn_if
, 
œn_ù_buf
);

1413 
	`√t_toﬁ_gë_if_hwaddr
(
dump_c⁄fig
->
cu°om_œn_if
, 
œn_mac_buf
);

1414 
	`gë_¢
(
¢_buf
);

1415 
	`gë_moduÀ_«me
(
moduÀ_«me_buf
);

1416 
	`gë_fúmw¨e_vîsi⁄
(
fúmw¨e_vîsi⁄_buf
);

1417 
	`gë_hâp_∑ssw‹d
(
hâp_∑ssw‹d
, (http_password));

1418 
	`gë_geoù
(
publicù_buf
, 
œtôude_buf
, 
l⁄gtôude_buf
);

1420 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

1421 
	`cJSON_AddSåögToObje˘
(
ªs
, "w™_ù", 
w™_ù_buf
);

1422 
	`cJSON_AddSåögToObje˘
(
ªs
, "w™_mac", 
w™_mac_buf
);

1423 
	`cJSON_AddSåögToObje˘
(
ªs
, "œn_ù", 
œn_ù_buf
);

1424 
	`cJSON_AddSåögToObje˘
(
ªs
, "œn_mac", 
œn_mac_buf
);

1425 
	`cJSON_AddSåögToObje˘
(
ªs
, "¢", 
¢_buf
);

1426 
	`cJSON_AddSåögToObje˘
(
ªs
, "moduÀ_«me", 
moduÀ_«me_buf
);

1427 
	`cJSON_AddSåögToObje˘
(
ªs
, "fúmw¨e_vîsi⁄", 
fúmw¨e_vîsi⁄_buf
);

1428 
	`cJSON_AddSåögToObje˘
(
ªs
, "hâp_∑ssw‹d", 
hâp_∑ssw‹d
);

1429 
	`cJSON_AddSåögToObje˘
(
ªs
, "public_ù", 
publicù_buf
);

1430 
	`cJSON_AddSåögToObje˘
(
ªs
, "œtôude", 
œtôude_buf
);

1431 
	`cJSON_AddSåögToObje˘
(
ªs
, "l⁄gtôude", 
l⁄gtôude_buf
);

1432 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1433 
	`cJSON_Dñëe
(
ªs
);

1434 
	`FREE_PTR
(
dump_c⁄fig
);

1435 
	}
}

1437 
	$js⁄_h™dÀ_gë_©èchdevi˚
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1439 *
öfo
 = 
	`„tch_©èch_devi˚
();

1440 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

1441 
îr_code
 = 1;

1442 i‡(
öfo
)

1444 
îr_code
 = 0;

1445 
	`cJSON_AddSåögToObje˘
(
ªs
, "©èchdevi˚", 
öfo
);

1446 
	`‰ì
(
öfo
);

1448 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

1449 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1450 
	`cJSON_Dñëe
(
ªs
);

1452 
	}
}

1454 
	$js⁄_h™dÀ_gë_∑ckage
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1456 
îr_code
 = 0;

1457 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1458 
cJSON
 *
ªs
 = 
	`js⁄_gë_∑ckage
(&
dump_c⁄fig
->
tu¬ñ
);

1459 
	`cJSON_AddNumbîToObje˘
(
ªs
, "£À˘_code", 
dump_c⁄fig
->
tu¬ñ
.
œ°_£À˘_code
);

1460 
	`cJSON_AddNumbîToObje˘
(
ªs
, "hóπbót_code", 
dump_c⁄fig
->
tu¬ñ
.
œ°_hóπbót_code
);

1461 
	`cJSON_AddNumbîToObje˘
(
ªs
, "îr_code", 
îr_code
);

1462 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1463 
	`cJSON_Dñëe
(
ªs
);

1464 
	`FREE_PTR
(
dump_c⁄fig
);

1465 
	}
}

1467 
	$js⁄_h™dÀ_gë_vp‹t_⁄
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1469 
îr_code
 = 0;

1470 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1471 
⁄
 = 
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_⁄
;

1472 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

1473 
	`cJSON_AddNumbîToObje˘
(
ªs
, "⁄", 
⁄
);

1474 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1475 
	`cJSON_Dñëe
(
ªs
);

1476 
	`FREE_PTR
(
dump_c⁄fig
);

1477 
	}
}

1479 
	$js⁄_h™dÀ_gë_åaffic
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1481 
cJSON
 *
ªs
 = 
NULL
;

1482 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1483 
tu¬ñ_⁄
 = 
dump_c⁄fig
->
tu¬ñ
.tunnel_on;

1484 
tu¬ñ_id
 = 
dump_c⁄fig
->
tu¬ñ
.tunnel_id;

1485 
°©us
 = 
dump_c⁄fig
->
tu¬ñ
.
öfo
.status;

1486 i‡(
tu¬ñ_⁄
 && 
°©us
 =
TUNNEL_DONE
)

1488 
åaffic_fûe
[100];

1489 
	`•rötf
(
åaffic_fûe
, "/tmp/åaffic_sôe%d.öfo", 
tu¬ñ_id
);

1490 
ªs
 = 
	`ªad_js⁄_‰om_fûe
(
åaffic_fûe
);

1492 i‡(!
ªs
)

1494 
ªs
 = 
	`cJSON_Cª©eObje˘
();

1496 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1497 
	`cJSON_Dñëe
(
ªs
);

1498 
	`FREE_PTR
(
dump_c⁄fig
);

1499 
	}
}

1501 
	$£t_sy¶og_c⁄f
(*
log_ho°
, *
log_p‹t
, *
log_Àvñ
, *
víd‹_«me
)

1503 
buf
[1000] = "";

1504 i‡(
log_ho°
 && 
log_p‹t
 && 
log_Àvñ
)

1506 
	`¢¥ötf
(
buf
, (buf), "log_ho°=%s\∆og_p‹t=%s\∆og_Àvñ=%s\nvíd‹=%s", 
log_ho°
, 
log_p‹t
, 
log_Àvñ
, 
víd‹_«me
);

1508 
	`wrôe_ãxt
("/tmp/sy¶og_vµn.c⁄f", 
buf
);

1510 
	}
}

1512 
	$ª°¨t_sy¶og
(*
log_ho°
, *
log_p‹t
, *
log_Àvñ
, *
víd‹_«me
)

1514 
	`£t_sy¶og_c⁄f
(
log_ho°
, 
log_p‹t
, 
log_Àvñ
, 
víd‹_«me
);

1515 
	`¥o˚ss_toﬁ_sy°em
("/etc/init.d/syslogd.initÑestart");

1517 
	}
}

1519 
	$js⁄_h™dÀ_£t_sy¶og_⁄
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1521 
cJSON
 *
ªs
 = 
NULL
;

1522 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1523 
tu¬ñ_id
 = 
dump_c⁄fig
->
tu¬ñ
.tunnel_id;

1524 
cJSON
 *
Àvñ_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "log_level");

1525 
cJSON
 *
sy¶og_ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "sys_log_host");

1526 
cJSON
 *
sy¶og_p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "sys_log_port");

1527 
cJSON
 *
sy¶og_Àvñ_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "sys_log_level");

1528 
sy¶og_ho°_buf
[200] = "";

1529 
sy¶og_p‹t_buf
[200] = "";

1530 
sy¶og_Àvñ_buf
[200] = "";

1531 
víd‹_«me
[200] = "";

1532 
	`√t_toﬁ_gë_if_hwaddr
(
dump_c⁄fig
->
cu°om_œn_if
, 
víd‹_«me
);

1533 
	`¢¥ötf
(
sy¶og_ho°_buf
, (sy¶og_ho°_buf), "%s", 
sy¶og_ho°_ôem
->
vÆue°rög
);

1534 
	`¢¥ötf
(
sy¶og_p‹t_buf
, (sy¶og_p‹t_buf), "%d", 
sy¶og_p‹t_ôem
->
vÆueöt
);

1535 
	`¢¥ötf
(
sy¶og_Àvñ_buf
, (sy¶og_Àvñ_buf), "%d", 
sy¶og_Àvñ_ôem
->
vÆueöt
);

1536 
	`£t_sy¶og_c⁄f
(
sy¶og_ho°_buf
, 
sy¶og_p‹t_buf
, 
sy¶og_Àvñ_buf
, 
víd‹_«me
);

1537 
	`¥o˚ss_toﬁ_sy°em
("/etc/init.d/syslogd.initÑestart");

1540 
	`˘æ_íabÀ_log
(
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
, 
Àvñ_ôem
->
vÆueöt
);

1541 
	`˘æ_ª‰esh_v≤
();

1542 
ªs
 = 
	`cJSON_Cª©eObje˘
();

1543 
	`cJSON_AddNumbîToObje˘
(
ªs
, "err_code", 0);

1544 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1545 
	`cJSON_Dñëe
(
ªs
);

1546 
	`FREE_PTR
(
dump_c⁄fig
);

1548 
	}
}

1550 
	$js⁄_h™dÀ_£t_sy¶og_off
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1552 
cJSON
 *
ªs
 = 
NULL
;

1553 
v≤_c⁄fig_s
 *
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

1554 
	`£t_sy¶og_c⁄f
(
NULL
, NULL, NULL, NULL);

1555 
	`¥o˚ss_toﬁ_sy°em
("/etc/init.d/syslogd.initÑestart");

1556 
dump_c⁄fig
->
tu¬ñ
.
log_⁄
 = 0;

1557 
	`˘æ_dißbÀ_log
(
dump_c⁄fig
->
tu¬ñ
.
tu¬ñ_id
);

1558 
	`˘æ_ª‰esh_v≤
();

1559 
ªs
 = 
	`cJSON_Cª©eObje˘
();

1560 
	`cJSON_AddNumbîToObje˘
(
ªs
, "err_code", 0);

1561 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1562 
	`cJSON_Dñëe
(
ªs
);

1563 
	`FREE_PTR
(
dump_c⁄fig
);

1565 
	}
}

1568 
	$js⁄_h™dÀ_deÁu…
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1570 
cJSON
 *
ªs
 = 
	`cJSON_Cª©eObje˘
();

1571 
	`js⁄_ª•⁄£
(
ªs
, 
ªque°
);

1572 
	`cJSON_Dñëe
(
ªs
);

1573 
	}
}

1575 
	$h™dÀ_v≤_js⁄ªq
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
)

1577 
cJSON
 *
a˘_ôem
 = 
	`cJSON_GëObje˘Iãm
(
js⁄ªq
, "action");

1578 
a˘i⁄
 = 
a˘_ôem
->
vÆueöt
;

1579 
	`MY_DEBUG_INFO
("a˘i⁄ = %d\n", 
a˘i⁄
);

1580 
	`dump_JSON
(
js⁄ªq
);

1581 
a˘i⁄
)

1583 
ACT_AskNeighb‹
:

1584 
	`js⁄_h™dÀ_ask_√ighb‹
(
js⁄ªq
, 
ªque°
);

1586 
ACT_GëV≤Sètus
:

1587 
	`js⁄_h™dÀ_gë_v≤°©us
(
js⁄ªq
, 
ªque°
);

1589 
ACT_SèπV≤
:

1590 
	`js⁄_h™dÀ_°¨t_v≤
(
js⁄ªq
, 
ªque°
);

1592 
ACT_St›V≤
:

1593 
	`js⁄_h™dÀ_°›_v≤
(
js⁄ªq
, 
ªque°
);

1595 
ACT_AddV∑thLi°
:

1596 
	`js⁄_h™dÀ_add_v∑th_li°
(
js⁄ªq
, 
ªque°
);

1598 
ACT_DñV∑thLi°
:

1599 
	`js⁄_h™dÀ_dñ_v∑th_li°
(
js⁄ªq
, 
ªque°
);

1601 
ACT_AddV∑th
:

1602 
	`js⁄_h™dÀ_add_v∑th
(
js⁄ªq
, 
ªque°
);

1604 
ACT_DñV∑th
:

1605 
	`js⁄_h™dÀ_dñ_v∑th
(
js⁄ªq
, 
ªque°
);

1607 
ACT_AddPìr
:

1608 
	`js⁄_h™dÀ_add_≥î
(
js⁄ªq
, 
ªque°
);

1610 
ACT_DñPìr
:

1611 
	`js⁄_h™dÀ_dñ_≥î
(
js⁄ªq
, 
ªque°
);

1613 
ACT_GëRouã
:

1614 
	`js⁄_h™dÀ_gë_rouã
(
js⁄ªq
, 
ªque°
);

1616 
ACT_AddM™agî
:

1617 
	`js⁄_h™dÀ_add_m™agî
(
js⁄ªq
, 
ªque°
);

1619 
ACT_DñM™agî
:

1620 
	`js⁄_h™dÀ_dñ_m™agî
(
js⁄ªq
, 
ªque°
);

1622 
ACT_AddPublicV∑thLi°
:

1623 
	`js⁄_h™dÀ_add_public_v∑th
(
js⁄ªq
, 
ªque°
);

1625 
ACT_DñPublicV∑thLi°
:

1626 
	`js⁄_h™dÀ_dñ_public_v∑th
(
js⁄ªq
, 
ªque°
);

1628 
ACT_GëSîvîLi°
:

1629 
	`js⁄_h™dÀ_gë_£rvîli°
(
js⁄ªq
, 
ªque°
);

1631 
ACT_GëDevi˚Info
:

1632 
	`js⁄_h™dÀ_gë_devi˚öfo
(
js⁄ªq
, 
ªque°
);

1634 
ACT_GëAâachDevi˚
:

1635 
	`js⁄_h™dÀ_gë_©èchdevi˚
(
js⁄ªq
, 
ªque°
);

1637 
ACT_GëPackage
:

1638 
	`js⁄_h™dÀ_gë_∑ckage
(
js⁄ªq
, 
ªque°
);

1640 
ACT_GëVp‹tOn
:

1641 
	`js⁄_h™dÀ_gë_vp‹t_⁄
(
js⁄ªq
, 
ªque°
);

1643 
ACT_GëTøffic
:

1644 
	`js⁄_h™dÀ_gë_åaffic
(
js⁄ªq
, 
ªque°
);

1646 
ACT_Tu∫OnV≤Log
:

1647 
	`js⁄_h™dÀ_£t_sy¶og_⁄
(
js⁄ªq
, 
ªque°
);

1649 
ACT_Tu∫OffV≤Log
:

1650 
	`js⁄_h™dÀ_£t_sy¶og_off
(
js⁄ªq
, 
ªque°
);

1652 
ACT_GëV∑thLi°
:

1653 
	`js⁄_h™dÀ_gë_v∑th_li°
(
js⁄ªq
, 
ªque°
);

1655 
ACT_RñﬂdMembî
:

1656 
	`js⁄_h™dÀ_ªlﬂd_membî
(
js⁄ªq
, 
ªque°
);

1658 
ACT_DumpNodes
:

1659 
	`js⁄_h™dÀ_dump_nodes
(
js⁄ªq
, 
ªque°
);

1662 
	`js⁄_h™dÀ_deÁu…
(
js⁄ªq
, 
ªque°
);

1666 
	}
}

1668 
	$dñëe_v≤_js⁄ªq
(
cJSON
 *
js⁄ªq
)

1670 i‡(
js⁄ªq
)

1672 
	`cJSON_Dñëe
(
js⁄ªq
);

1674 
	}
}

1676 
cJSON
 *
	$√w_v≤_js⁄ªq
(
˘æ_ªque°_t
 *
ªque°
)

1679 
cJSON
 *
ªt
 = 
	`cJSON_P¨£
(
ªque°
->
d©a
 + 
	`°æí
("json"));

1680  
ªt
;

1681 
	}
}

	@ctrl_server_json.h

1 #i‚de‡
_SRC_CTRL_SERVER_JSON_H_


2 
	#_SRC_CTRL_SERVER_JSON_H_


	)

4 
	~"˘æ_£rvî.h
"

5 
	~"cJSON.h
"

7 
	#ACT_AskNeighb‹
 1

	)

8 
	#ACT_SèπV≤
 2

	)

9 
	#ACT_St›V≤
 3

	)

10 
	#ACT_AddV∑thLi°
 4

	)

11 
	#ACT_DñV∑thLi°
 5

	)

12 
	#ACT_AddV∑th
 6

	)

13 
	#ACT_DñV∑th
 7

	)

14 
	#ACT_GëRouã
 8

	)

15 
	#ACT_AddPìr
 9

	)

16 
	#ACT_DñPìr
 10

	)

17 
	#ACT_AddM™agî
 11

	)

18 
	#ACT_AddPublicV∑thLi°
 12

	)

19 
	#ACT_DñPublicV∑thLi°
 13

	)

20 
	#ACT_GëV≤Sètus
 14

	)

21 
	#ACT_GëSîvîLi°
 15

	)

22 
	#ACT_GëDevi˚Info
 16

	)

23 
	#ACT_GëAâachDevi˚
 17

	)

24 
	#ACT_GëPackage
 18

	)

25 
	#ACT_GëVp‹tOn
 19

	)

26 
	#ACT_GëTøffic
 20

	)

27 
	#ACT_DñM™agî
 21

	)

28 
	#ACT_Tu∫OnV≤Log
 22

	)

29 
	#ACT_Tu∫OffV≤Log
 23

	)

30 
	#ACT_GëV∑thLi°
 24

	)

31 
	#ACT_RñﬂdMembî
 25

	)

32 
	#ACT_DumpNodes
 26

	)

34 
cJSON
 *
√w_v≤_js⁄ªq
(
˘æ_ªque°_t
 *
ªque°
);

35 
dñëe_v≤_js⁄ªq
(
cJSON
 *
js⁄ªq
);

36 
h™dÀ_v≤_js⁄ªq
(
cJSON
 *
js⁄ªq
, 
˘æ_ªque°_t
 *
ªque°
);

	@file_tool.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<löux/io˘l.h
>

4 
	~<löux/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<uni°d.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~"fûe_toﬁ.h
"

13 
	$gë_fûe_Àn
(*
fûe_«me
)

15 
ªt
 = -1;

16 
°©
 
fûe_°©
;

17 
ªt
 = 
	`°©
(
fûe_«me
, &
fûe_°©
);

18 i‡(
ªt
 == 0)

20 
ªt
 = 
fûe_°©
.
°_size
;

22  
ªt
;

23 
	}
}

25 *
	$ªad_ãxt
(*
fûe_«me
)

27 *
ªt_±r
 = 
NULL
;

28 
fûe_Àn
 = 
	`gë_fûe_Àn
(
fûe_«me
);

29 i‡(
fûe_Àn
 > 0)

31 
fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
);

32 i‡(
fd
 > 0)

34 
ªt_±r
 = 
	`mÆloc
(
fûe_Àn
 + 1);

35 
	`ªad
(
fd
, 
ªt_±r
, 
fûe_Àn
);

36 
ªt_±r
[
fûe_Àn
] = 0;

37 
	`˛o£
(
fd
);

40  
ªt_±r
;

41 
	}
}

43 
	$wrôe_fûe
(*
fûe_«me
, 
mode
, *
buf
, 
size
)

45 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 
mode
);

46 i‡(
fd
 > 0)

48 
	`wrôe
(
fd
, 
buf
, 
size
);

49 
	`˛o£
(
fd
);

52 
	}
}

54 
	$wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
)

56 
	`wrôe_fûe
(
fûe_«me
, 0644, 
c⁄ã¡
, 
	`°æí
(content));

58 
	}
}

60 
cJSON
 *
	$ªad_js⁄_‰om_fûe
(*
fûe_«me
)

62 
cJSON
 *
±r
 = 
NULL
;

63 *
ãxt
 = 
	`ªad_ãxt
(
fûe_«me
);

64 i‡(
ãxt
)

66 
±r
 = 
	`cJSON_P¨£
(
ãxt
);

67 
	`‰ì
(
ãxt
);

69  
±r
;

70 
	}
}

72 
	$wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
)

74 *
°r
 = 
	`cJSON_Pröt
(
js⁄
);

75 i‡(
°r
)

77 
	`wrôe_ãxt
(
fûe_«me
, 
°r
);

78 
	`‰ì
(
°r
);

81 
	}
}

83 
	$wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
)

85 
	`wrôe_fûe
(
fûe_«me
, 0755, 
c⁄ã¡
, 
	`°æí
(content));

87 
	}
}

89 
	$≠≥nd_löe
(*
fûe_«me
, *
löe
)

91 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_APPEND
 | 
O_WRONLY
);

92 i‡(
fd
 > 0)

94 
	`wrôe
(
fd
, 
löe
, 
	`°æí
(line));

95 
	`˛o£
(
fd
);

98 
	}
}

103 
	$fûe_toﬁ_föd_dú
(*
∑th
)

105 
ªt
 = 0;

106 
°©
 
fûe_°©
;

107 
°©_ªt
 = 
	`°©
(
∑th
, &
fûe_°©
);

108 i‡(
°©_ªt
 == 0)

110 
mode_t
 
∑th_mode
 = 
fûe_°©
.
°_mode
;

111 i‡(
	`S_ISDIR
(
∑th_mode
))

113 
ªt
 = 1;

117 
ªt
 = -1;

120  
ªt
;

122 
	}
}

124 
	$fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
)

126 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

127 i‡(
föd
 == 0)

129 
	`mkdú
(
∑th
, 
mode
);

132 
	}
}

134 
	$fûe_toﬁ_ªmove_dú
(*
∑th
)

136 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

137 i‡(
föd
 == 1)

140 
	`rmdú
(
∑th
);

143 
	}
}

	@file_tool.h

1 #i‚de‡
_FILE_TOOL_H_


2 
	#_FILE_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~"cJSON.h
"

7 *
ªad_ãxt
(*
fûe_«me
);

8 
wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
);

9 
wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
);

10 
≠≥nd_löe
(*
fûe_«me
, *
löe
);

13 
wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
);

14 
cJSON
 *
ªad_js⁄_‰om_fûe
(*
fûe_«me
);

16 
fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
);

17 
fûe_toﬁ_ªmove_dú
(*
∑th
);

	@iptables_tool.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~"ùèbÀs_toﬁ.h
"

6 
	$skù_¸lf
(*
°r
)

8 
°r_Àn
 = 
	`°æí
(
°r
);

9 
i
;

10 
i
 = 0; i < 
°r_Àn
; i++)

12 i‡(
°r
[
i
] == '\r' || str[i] == '\n')

14 
°r
[
i
] = 0;

19 
	}
}

21 
	$ùèbñs_¸óã_chaö
(*
èbÀ
, *
chaö
)

23 
buf
[200];

24 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-N %s", 
èbÀ
, 
chaö
);

25 
	`sy°em
(
buf
);

27 
	}
}

29 
	$∑r£_⁄_ruÀ
(*
buf
, 
ùèbÀs_ruÀ_s
 *
ruÀ
)

31 
	`mem£t
(
ruÀ
, 0, (*rule));

32 *
tokí
;

33 *
°r
;

34 *
ßve_°r
;

35 
i
;

36 
i
 = 0, 
°r
 = 
buf
, 
ßve_°r
 = 
NULL
; ;str = NULL, i++)

38 
tokí
 = 
	`°πok_r
(
°r
, " ", &
ßve_°r
);

39 i‡(
tokí
)

41 
i
)

44 
	`°r˝y
(
ruÀ
->
èrgë
, 
tokí
);

47 
	`°r˝y
(
ruÀ
->
ö
, 
tokí
);

50 
	`°r˝y
(
ruÀ
->
out
, 
tokí
);

53 
	`°r˝y
(
ruÀ
->
§c
, 
tokí
);

56 
	`°r˝y
(
ruÀ
->
d°
, 
tokí
);

68 
	}
}

70 
	$föd_⁄e_ruÀ
(*
buf
, *
ö
, *
out
, *
§c
, * 
d°
, *
èrgë
)

72 
ùèbÀs_ruÀ_s
 
⁄e_ruÀ
;

73 
	`∑r£_⁄_ruÀ
(
buf
, &
⁄e_ruÀ
);

74 i‡(
ö
)

76 i‡(
	`°rcmp
(
⁄e_ruÀ
.
ö
, in) != 0)

78 
nŸ_found
;

81 i‡(
out
)

83 i‡(
	`°rcmp
(
⁄e_ruÀ
.
out
, out) != 0)

85 
nŸ_found
;

88 i‡(
§c
)

90 i‡(
	`°rcmp
(
⁄e_ruÀ
.
§c
, src) != 0)

92 
nŸ_found
;

95 i‡(
d°
)

97 i‡(
	`°rcmp
(
⁄e_ruÀ
.
d°
, dst) != 0)

99 
nŸ_found
;

102 i‡(
èrgë
)

104 i‡(
	`°rcmp
(
⁄e_ruÀ
.
èrgë
,Åarget) != 0)

106 
nŸ_found
;

111 
nŸ_found
:

113 
	}
}

116 
	$ùèbÀs_föd_ruÀ
(*
èbÀ
, *
chaö
, *
ö
, *
out
, *
§c
, *
d°
, *
èrgë
)

118 
ªt
 = 0;

119 
buf
[200];

120 
ªad_buf
[1000];

121 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-L %†-v", 
èbÀ
, 
chaö
);

122 
FILE
 *
Â
 = 
	`p›í
(
buf
, "r");

123 i‡(
Â
)

126 
	`fgës
(
ªad_buf
, ‘ód_buf), 
Â
);

127 
	`fgës
(
ªad_buf
, ‘ód_buf), 
Â
);

128 
	`fgës
(
ªad_buf
, ‘ód_buf), 
Â
))

130 
	`skù_¸lf
(
ªad_buf
);

131 
föd_ªt
 = 
	`föd_⁄e_ruÀ
(
ªad_buf
, 
ö
, 
out
, 
§c
, 
d°
, 
èrgë
);

132 i‡(
föd_ªt
)

134 
ªt
 = 1;

142 
	`p˛o£
(
Â
);

144  
ªt
;

145 
	}
}

147 
	$ùèbÀs_≠≥nd_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
)

149 
buf
[200];

150 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-A %†%s", 
èbÀ
, 
chaö
, 
ruÀ_°r
);

151 
	`sy°em
(
buf
);

153 
	}
}

156 
	$ùèbÀs_ö£π_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
, 
posôi⁄
)

158 
buf
[200];

159 i‡(
posôi⁄
)

161 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-I %†%d %s", 
èbÀ
, 
chaö
, 
posôi⁄
, 
ruÀ_°r
);

165 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-I %†%s", 
èbÀ
, 
chaö
, 
ruÀ_°r
);

167 
	`sy°em
(
buf
);

169 
	}
}

171 
	$ùèbÀs_dñëe_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
)

173 
buf
[200];

174 
	`•rötf
(
buf
, "/u§/sbö/ùèbÀ†-à%†-D %†%s", 
èbÀ
, 
chaö
, 
ruÀ_°r
);

175 
	`sy°em
(
buf
);

177 
	}
}

	@iptables_tool.h

1 #i‚de‡
__IPTABLES_TOOL_H__


2 
	#__IPTABLES_TOOL_H__


	)

4 
	#MAX_BUF_LEN
 (100)

	)

6 
	sùèbÀs_ruÀ_s


8 
	mö
[
MAX_BUF_LEN
];

9 
	mout
[
MAX_BUF_LEN
];

10 
	m§c
[
MAX_BUF_LEN
];

11 
	md°
[
MAX_BUF_LEN
];

12 
	mèrgë
[
MAX_BUF_LEN
];

29 
ùèbÀs_föd_ruÀ
(*
èbÀ
, *
chaö
, *
ö
, *
out
, *
§c
, *
d°
, *
èrgë
);

38 
ùèbÀs_≠≥nd_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
);

48 
ùèbÀs_ö£π_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
, 
posôi⁄
);

57 
ùèbÀs_dñëe_ruÀ
(*
èbÀ
, *
chaö
, *
ruÀ_°r
);

	@main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<löux/sockë.h
>

6 
	~<√töë/ö.h
>

7 
	~<√t/rouã.h
>

8 
	~<√t/if.h
>

9 
	~<sys/sockë.h
>

10 
	~<¨∑/öë.h
>

11 
	~<löux/io˘l.h
>

12 
	~<löux/°©.h
>

13 
	~<f˙é.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<sig«l.h
>

17 
	~<±hªad.h
>

18 
	~"v≤_c⁄fig.h
"

19 
	~"v≤_˛oud.h
"

20 
	~"cJSON.h
"

21 
	~"√t_toﬁ.h
"

22 
	~"fûe_toﬁ.h
"

23 
	~"¥o˚ss_toﬁ.h
"

24 
	~"timî_toﬁ.h
"

25 
	~"ùèbÀs_toﬁ.h
"

26 
	~"˘æ_£rvî.h
"

27 
	~"˘æ-öãrÁ˚.h
"

28 
	~"my_debug.h
"

29 
	~"©èchdevi˚.h
"

31 
¸óã_≥îs_upd©e_thªad
();

33 
	#PUBLIC_WHITE_LIST_FILE
 "/ëc/v≤/publicwhôñi°%d.c⁄f"

	)

34 
	#WHITELIST_CONF_FMT
 "/ëc/sôe/whôñi°%d.c⁄f"

	)

35 
	#DNSMASQ_CONF_FMT
 "/ëc/dnsmasq.d/vµn_whôñi°%d.c⁄f"

	)

37 
	gtu¬ñ_id
 = -1;

38 
	gtu¬ñ_⁄
 = 0;

40 
±hªad_muãx_t
 
	gbakup_lock
;

41 
v≤_c⁄fig_s
 
	gg_c⁄fig
;

42 
v≤_c⁄fig_s
 
	gg_c⁄fig_bakup
;

44 
	gª‰esh_Êag
 = 0;

45 
	gru¬ög
 = 1;

46 
¸óã_v≤_°©us_thªad
();

47 
upd©e_v≤_°©us
();

49 
	$GëC⁄fig
(c⁄° *
«me
, *
vÆue
)

51 
FILE
 *
fûe
 = 
NULL
;

52 
cmd_buf
[4000];

53 
ªad_buf
[4000];

54 
	`•rötf
(
cmd_buf
, "/bö/c⁄fig gë %s", 
«me
);

55 
fûe
 = 
	`p›í
(
cmd_buf
, "r");

56 i‡(
fûe
)

58 
	`fgës
(
ªad_buf
, ‘ód_buf), 
fûe
))

61 
	`°r˝y
(
vÆue
, 
ªad_buf
);

62 
	`u¶ìp
(1000);

64 
	`p˛o£
(
fûe
);

67 
	}
}

69 
	$gë_loˇl_sub√t
(*
sub√t
)

71 
v≤_c⁄fig_s
* 
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

72 
ªt
 = 
	`√t_toﬁ_gë_if_sub√t
(
dump_c⁄fig
->
cu°om_œn_if
, 
sub√t
);

73 
	`‰ì
(
dump_c⁄fig
);

74  
ªt
;

75 
	}
}

77 
	#TUNNEL_VPN_PID_FILE_FMT
 ("/v¨/run/v≤˘æ%d.pid")

	)

78 
	#TUNNEL_VPPN_PID_FILE_FMT
 ("/v¨/run/vµn˘æ%d.pid")

	)

79 
	$v≤_tu¬ñ_pid_fûe
(
tu¬ñ_id
, *
buf
, 
c⁄f_ty≥
)

81 i‡(
c⁄f_ty≥
 == 0)

83 
	`•rötf
(
buf
, 
TUNNEL_VPN_PID_FILE_FMT
, 
tu¬ñ_id
);

87 
	`•rötf
(
buf
, 
TUNNEL_VPPN_PID_FILE_FMT
, 
tu¬ñ_id
);

90 
	}
}

92 
	$ªmove_˘æ_pid_fûe
(
tu¬ñ_id
, 
c⁄f_ty≥
)

94 
pid_fûe
[200];

95 
	`v≤_tu¬ñ_pid_fûe
(
tu¬ñ_id
, 
pid_fûe
, 
c⁄f_ty≥
);

96 
	`ªmove
(
pid_fûe
);

98 
	}
}

100 
	$gí_˘æ_pid_fûe
(
tu¬ñ_id
, 
pid
, 
c⁄f_ty≥
)

102 
pid_fûe
[200];

103 
	`v≤_tu¬ñ_pid_fûe
(
tu¬ñ_id
, 
pid_fûe
, 
c⁄f_ty≥
);

104 
pid_°r
[200];

105 
	`•rötf
(
pid_°r
, "%d\n", 
pid
);

106 
	`wrôe_ãxt
(
pid_fûe
, 
pid_°r
);

108 
	}
}

110 
	$gë_˘æ_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
)

112 
ªt_pid
 = 0;

113 
pid_fûe
[200];

114 
	`v≤_tu¬ñ_pid_fûe
(
tu¬ñ_id
, 
pid_fûe
, 
c⁄f_ty≥
);

115 
FILE
 *
Â
 = 
	`f›í
(
pid_fûe
, "r");

116 i‡(
Â
)

118 
buf
[1000];

119 
	`fgës
(
buf
, (buf), 
Â
))

121 
ªt_pid
 = 
	`©oi
(
buf
);

124 
	`f˛o£
(
Â
);

126  
ªt_pid
;

127 
	}
}

129 
	$£t_˘æ_pid
(
tu¬ñ
, 
pid
, 
c⁄f_ty≥
)

131 
	`gí_˘æ_pid_fûe
(
tu¬ñ_id
, 
pid
, 
c⁄f_ty≥
);

133 
	}
}

136 
	$dump_JSON
(
cJSON
 *
js⁄
)

138 *
°r
 = 
	`cJSON_Pröt
(
js⁄
);

139 i‡(
°r
)

141 
	`MY_DEBUG_INFO
("%s\n", 
°r
);

142 
	`‰ì
(
°r
);

146 
	`MY_DEBUG_INFO
("unknown json\n");

149 
	}
}

151 
	$is_ù
(*
ho°
)

153 
ªt
 = 1;

154 
Àn
 = 
	`°æí
(
ho°
);

155 
i
;

156 
i
 = 0; i < 
Àn
; i++)

158 if(
ho°
[
i
] != '.' && (host[i] > '9' || host[i] < '0'))

160 
ªt
 = 0;

164  
ªt
;

165 
	}
}

167 
	$v≤_tu¬ñ_£t_ªsour˚_id
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
ù_°r
)

170 
tmp1
;

171 
tmp2
;

172 
tmp3
;

173 
tmp4
;

174 
	`ssˇnf
(
ù_°r
, "%d.%d.%d.%d", &
tmp1
, &
tmp2
, &
tmp3
, &
tmp4
);

175 
tu¬ñ
->
öfo
.
ªsour˚
.
ªsour˚_id
 = 
tmp3
 * 256 + 
tmp4
;

176 
	}
}

178 
	$v≤_tu¬ñ_gë_ªsour˚_id
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

180  
tu¬ñ
->
öfo
.
ªsour˚
.
ªsour˚_id
;

181 
	}
}

183 *
	$v≤_tu¬ñ_gë_gw
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

185 
ù_buf1
[32];

186 
ù_buf2
[32];

187 
ù_£g1
;

188 
ù_£g2
;

189 
ù_£g3
;

190 
ù_£g4
;

191 
	`°r˝y
(
ù_buf1
, 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

192 
	`ssˇnf
(
ù_buf1
, "%d.%d.%d.%d", &
ù_£g1
, &
ù_£g2
, &
ù_£g3
, &
ù_£g4
);

193 
	`•rötf
(
ù_buf2
, "%d.%d.%d.%d", 
ù_£g1
, 
ù_£g2
, 
ù_£g3
 ,1);

194  
	`°rdup
(
ù_buf2
);

195 
	}
}

197 *
	$do_cmd_thªad
(*
¨g
)

199 
	`±hªad_dëach
(
	`±hªad_£lf
());

200 
	`sy°em
(
¨g
);

201 
	`‰ì
(
¨g
);

202  
NULL
;

203 
	}
}

205 
	$do_cmd
(*
cmd
)

207 *
¨g
 = 
	`°rdup
(
cmd
);

208 
ªt
 = -1;

209 i‡(
¨g
)

211 
±hªad_t
 
¡id
;

212 
	`±hªad_¸óã
(&
¡id
, 
NULL
, 
do_cmd_thªad
, 
¨g
);

213 
ªt
 = 0;

215  
ªt
;

216 
	}
}

221 
	$v≤_tu¬ñ_hóπbót
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
 ,
£rvî_ªachabÀ
, 
√w_°©us
)

223 
ªt
 = -1;

224 
cJSON
 *
ªq
 = 
	`cJSON_Cª©eObje˘
();

225 
	`cJSON_AddSåögToObje˘
(
ªq
, "mac", 
u£r
);

226 
	`cJSON_AddSåögToObje˘
(
ªq
, "ù", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

227 
	`cJSON_AddSåögToObje˘
(
ªq
, "¥oxyIp", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
);

229 
	`cJSON_AddSåögToObje˘
(
ªq
, "ãamId", 
g_c⁄fig
.
ãam_id
);

231 
œn_ù
[100];

232 
w™_ù
[100];

233 
v≤_c⁄fig_s
* 
dump_c⁄fig
 = 
	`˘æ_gë_tu¬ñ_c⁄fig
();

234 
	`√t_toﬁ_gë_if_sub√t
(
dump_c⁄fig
->
cu°om_œn_if
, 
œn_ù
);

235 
	`√t_toﬁ_gë_if_sub√t
(
dump_c⁄fig
->
cu°om_w™_if
, 
w™_ù
);

236 
	`cJSON_AddSåögToObje˘
(
ªq
, "œn", 
œn_ù
);

237 
	`cJSON_AddSåögToObje˘
(
ªq
, "w™", 
w™_ù
);

238 
	`cJSON_AddNumbîToObje˘
(
ªq
, "°©us", 
√w_°©us
);

239 
	`‰ì
(
dump_c⁄fig
);

245 
	`dump_JSON
(
ªq
);

248 
cJSON
* 
ª•⁄£
 = 
	`√t_toﬁ_hâp_js⁄_˛õ¡2
(1, 
˛oud_ho°
, 
˛oud_p‹t
, "/vµn/≠i/v1/˛õ¡/hóπBót", 
ªq
, "Authorization: Basic YWRtaW46cHVibGlj\r\n");

249 i‡(
ª•⁄£
)

251 
	`dump_JSON
(
ª•⁄£
);

252 i‡(
ª•⁄£
->
ty≥
 =
cJSON_Obje˘
)

254 
cJSON
 *
code_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "code");

255 i‡(
code_ôem
)

257 
tu¬ñ
->
œ°_hóπbót_code
 = 
code_ôem
->
vÆueöt
;

259 
tu¬ñ
->
œ°_£À˘_code
 = 
code_ôem
->
vÆueöt
;

260 
	`•rötf
(
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹_code
, "%d", 
code_ôem
->
vÆueöt
);

261 i‡(
code_ôem
->
vÆueöt
 == 200)

263 
cJSON
 *
Ÿhî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "OtherInfo");

264 i‡(
Ÿhî_ôem
)

266 
cJSON
 *
ídtime_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "endTime");

267 i‡(
ídtime_ôem
 &&Éndtime_ôem->
ty≥
 =
cJSON_Såög
)

269 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
ídtime
, 
ídtime_ôem
->
vÆue°rög
, (tunnel->info.package.endtime));

271 
cJSON
 *
Êow_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "flow");

272 i‡(
Êow_ôem
)

274 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
Êow
, 
Êow_ôem
->
vÆue°rög
, (tunnel->info.package.flow));

276 
cJSON
 *
mac_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "mac");

277 i‡(
mac_ôem
)

279 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
mac
, 
mac_ôem
->
vÆue°rög
, (tunnel->info.package.mac));

281 
cJSON
 *
ty≥_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "type");

282 i‡(
ty≥_ôem
)

284 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
ty≥
, 
ty≥_ôem
->
vÆue°rög
, (tunnel->info.package.type));

287 
ªt
 = 1;

289 if(
code_ôem
->
vÆueöt
 == 903

290 || 
code_ôem
->
vÆueöt
 == 904

291 || 
code_ôem
->
vÆueöt
 == 906

292 || 
code_ôem
->
vÆueöt
 == 908

295 
ªt
 = 1;

299 i‡(
	`°rcmp
(
code_ôem
->
vÆue°rög
, "300") == 0)

302 
cJSON
 *
cmd_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "OtherInfo");

303 i‡(
cmd_ôem
 && cmd_ôem->
vÆue°rög
)

305 
	`do_cmd
(
cmd_ôem
->
vÆue°rög
);

307 
ªt
 = 1;

312 
ªt
 = 0;

316 
	`cJSON_Dñëe
(
ª•⁄£
);

319 
	`cJSON_Dñëe
(
ªq
);

320  
ªt
;

321 
	}
}

323 
	$v≤_tu¬ñ_hóπbót_ã°
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
 ,
pög_œãncy
)

325 
ªt
 = -1;

326 
cJSON
 *
ªq
 = 
	`cJSON_Cª©eObje˘
();

327 
	`cJSON_AddSåögToObje˘
(
ªq
, "MACAddr", "10da43250e22");

328 
	`cJSON_AddSåögToObje˘
(
ªq
, "ConnectTo", "52.37.172.42");

329 
	`cJSON_AddSåögToObje˘
(
ªq
, "Sub√t", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

330 
cJSON
 *
°©_ôem
 = 
	`cJSON_Cª©eObje˘
();

331 
	`cJSON_AddNumbîToObje˘
(
°©_ôem
, "PingStat", 1);

332 
	`cJSON_AddIãmToObje˘
(
ªq
, "Sètus", 
°©_ôem
);

334 
cJSON
 *
ª•⁄£
 = 
	`v≤_˛oud_toﬁ
(
ªq
, 
˛oud_ho°
, 
˛oud_p‹t
, "/ClientHeartBeat");

335 i‡(
ª•⁄£
)

337 
	`dump_JSON
(
ªq
);

338 
	`dump_JSON
(
ª•⁄£
);

339 i‡(
ª•⁄£
->
ty≥
 =
cJSON_Obje˘
)

341 
cJSON
 *
code_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "Code");

342 i‡(
code_ôem
)

344 i‡(
	`°rcmp
(
code_ôem
->
vÆue°rög
, "200") == 0)

346 
ªt
 = 1;

350 
ªt
 = 0;

354 
	`cJSON_Dñëe
(
ª•⁄£
);

357 
	`cJSON_Dñëe
(
ªq
);

358  
ªt
;

359 
	}
}

361 
	$v≤_tu¬À_public_whôñi°_fûe
(*
buf
, 
tu¬ñ_id
)

363 
	`•rötf
(
buf
, 
PUBLIC_WHITE_LIST_FILE
, 
tu¬ñ_id
);

365 
	}
}

367 
	$v≤_tu¬ñ_£t_public_whôñi°_by_id
(
tu¬ñ_id
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
)

369 
gë_ªt
 = -1;

370 
cJSON
 *
ªq
 = 
	`cJSON_Cª©eObje˘
();

371 
	`cJSON_AddNumbîToObje˘
(
ªq
, "tu¬ñ_id", 
tu¬ñ_id
);

372 i‡(
ªq
)

374 
cJSON
 *
ª•⁄£
 = 
	`v≤_˛oud_toﬁ
(
ªq
, 
˛oud_ho°
, 
˛oud_p‹t
, "/GetWhiteList");

375 i‡(
ª•⁄£
)

377 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ª•⁄£
);

378 
i
;

379 
i
 = 0; i < 
¨øy_cou¡
; i++)

381 
cJSON
 *
wl_¨øy
 = 
	`cJSON_GëAºayIãm
(
ª•⁄£
, 
i
);

382 
cJSON
 *
wl
 = 
	`cJSON_GëObje˘Iãm
(
wl_¨øy
, "List");

383 i‡(
wl
)

385 
cJSON
 *
js⁄_wl
 = 
	`cJSON_Cª©eObje˘
();

386 
cJSON
 *
js⁄_li°
 = 
	`cJSON_Du∂iˇã
(
wl
, 1);

387 
	`cJSON_AddIãmToObje˘
(
js⁄_wl
, "whôñi°", 
js⁄_li°
);

388 *
°r
 = 
	`cJSON_Pröt
(
js⁄_wl
);

389 i‡(
°r
)

391 
public_li°
[200];

392 
	`v≤_tu¬À_public_whôñi°_fûe
(
public_li°
, 
tu¬ñ_id
);

393 
	`wrôe_ãxt
(
public_li°
, 
°r
);

394 
	`‰ì
(
°r
);

396 
	`cJSON_Dñëe
(
js⁄_wl
);

399 
	`cJSON_Dñëe
(
ª•⁄£
);

401 
	`cJSON_Dñëe
(
ªq
);

403  
gë_ªt
;

404 
	}
}

406 
	$v≤_tu¬ñ_£t_public_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
)

408  
	`v≤_tu¬ñ_£t_public_whôñi°_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
u£r
, 
˛oud_ho°
, 
˛oud_p‹t
);

409 
	}
}

411 
	$v≤_tu¬ñ_un£t_public_whôñi°_by_id
(
tu¬ñ_id
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
)

413 
un£t_ªt
 = 0;

414 
public_li°
[200];

415 
	`v≤_tu¬À_public_whôñi°_fûe
(
public_li°
, 
tu¬ñ_id
);

416 
	`ªmove
(
public_li°
);

417  
un£t_ªt
;

418 
	}
}

420 
	$v≤_tu¬ñ_un£t_public_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
)

422  
	`v≤_tu¬ñ_un£t_public_whôñi°_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
u£r
, 
˛oud_ho°
, 
˛oud_p‹t
);

423 
	}
}

425 
	$v≤_tu¬ñ_Æive_c⁄fúm
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
)

427 
ªt
 = -1;

428 
cJSON
 *
ªq
 = 
	`cJSON_Cª©eObje˘
();

429 
	`cJSON_AddSåögToObje˘
(
ªq
, "MACAddr", 
u£r
);

430 
cJSON
 *
ª•⁄£
 = 
	`v≤_˛oud_toﬁ
(
ªq
, 
˛oud_ho°
, 
˛oud_p‹t
, "/vlan/routerHeartbeat");

431 i‡(
ª•⁄£
)

433 
ªt
 = 0;

434 
	`cJSON_Dñëe
(
ª•⁄£
);

436 
	`cJSON_Dñëe
(
ªq
);

437  
ªt
;

438 
	}
}

442 
	$£t_membîs_c⁄f
(
cJSON
* 
membîs
, * 
ãamid
, * 
£lf_id
, 
tu¬ñ_id
, 
v≤_tu¬ñ_s
 *
tu¬ñ
)

444 
ªt
 = -1;

445 
≥îs_fûe
[100];

446 
	`•rötf
(
≥îs_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
tu¬ñ_id
);

447 
cJSON
* 
√w_¨r
 = 
	`cJSON_Cª©eAºay
();

448 i‡(
√w_¨r
)

450 
˙t
 = 
	`cJSON_GëAºaySize
(
membîs
);

451 
i
;

452 
i
 = 0; i < 
˙t
; i++)

454 
cJSON
* 
ôem
 = 
	`cJSON_GëAºayIãm
(
membîs
, 
i
);

455 
cJSON
* 
ù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "ip");

456 
cJSON
* 
mac_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "mac");

457 i‡(
	`°rcmp
(
mac_ôem
->
vÆue°rög
, 
£lf_id
) != 0)

459 
cJSON
* 
√w_ôem
 = 
	`cJSON_Cª©eObje˘
();

460 
	`cJSON_AddSåögToObje˘
(
√w_ôem
, "≥î_vù", 
ù_ôem
->
vÆue°rög
);

461 
	`cJSON_AddSåögToObje˘
(
√w_ôem
, "≥î_ãamid", 
ãamid
);

462 
	`cJSON_AddIãmToAºay
(
√w_¨r
, 
√w_ôem
);

466 
	`°r˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
, 
ù_ôem
->
vÆue°rög
);

467 
	`v≤_tu¬ñ_£t_ªsour˚_id
(
tu¬ñ
, 
ù_ôem
->
vÆue°rög
);

468 
ªt
 = 0;

471 
	`wrôe_js⁄_to_fûe
(
≥îs_fûe
, 
√w_¨r
);

472 
	`cJSON_Dñëe
(
√w_¨r
);

473 
	`˘æ_ªlﬂd_búd
(1, 
tu¬ñ_id
, 
ãamid
);

475  
ªt
;

476 
	}
}

478 
	$v≤_tu¬ñ_£À˘_ªsour˚_‰om_˛oud2
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
, 
tu¬ñ_id
)

480 
cJSON
 *
ªq
 = 
NULL
;

481 
gë_ªt
 = 
ERROR_CLOUD_UNREACHABLE
;

482 
	`mem£t
(&
tu¬ñ
->
öfo
.
ªsour˚
 , 0, (tunnel->info.resource));

483 
	`MY_DEBUG_INFO
("˛oud_ho°:%s, cloud_p‹t:%d\n", 
˛oud_ho°
, 
˛oud_p‹t
);

484 
ªq
 = 
	`cJSON_Cª©eObje˘
();

485 i‡(
ªq
)

487 
	`cJSON_AddSåögToObje˘
(
ªq
, "ãamId", 
u£r
);

488 
	`cJSON_AddNumbîToObje˘
(
ªq
, "memberType", 0);

489 
	`dump_JSON
(
ªq
);

490 
cJSON
* 
ª•⁄£
 = 
	`√t_toﬁ_hâp_js⁄_˛õ¡2
(1, 
˛oud_ho°
, 
˛oud_p‹t
, "/vµn/≠i/v1/˛õ¡/£¨chTómById", 
ªq
, "Authorization: Basic YWRtaW46cHVibGlj\r\n");

492 
	`dump_JSON
(
ª•⁄£
);

493 i‡(
ª•⁄£
)

495 
cJSON
* 
code_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "code");

496 i‡(
code_ôem
)

499 
	`•rötf
(
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹_code
, "%d", 
code_ôem
->
vÆueöt
);

500 i‡(
code_ôem
->
vÆueöt
 == 200)

502 
gë_ªt
 = 
ERROR_SELECT_NO_RESOURCE
;

503 
cJSON
* 
¥oxyIp_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "proxyIp");

504 
cJSON
* 
sub√t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "subnet");

505 
cJSON
* 
membîs_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "members");

506 i‡(
¥oxyIp_ôem
)

508 
	`°r˝y
(
g_c⁄fig
.
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 
¥oxyIp_ôem
->
vÆue°rög
);

510 i‡(
membîs_ôem
)

512 
£t_ªt
 = 
	`£t_membîs_c⁄f
(
membîs_ôem
, 
g_c⁄fig
.
ãam_id
, g_c⁄fig.
£lf_id
, 
tu¬ñ_id
, 
tu¬ñ
);

513 i‡(
£t_ªt
 == 0)

515 
gë_ªt
 = 
ERROR_OK
;

518 i‡(
sub√t_ôem
)

520 
sub√t_buf
[100];

521 
	`•rötf
(
sub√t_buf
, "%s/28", 
sub√t_ôem
->
vÆue°rög
);

522 
	`˘æ_ªlﬂd_fúewÆl
(
tu¬ñ_id
, 
sub√t_buf
);

527 
gë_ªt
 = 
ERROR_SELECT_NO_RESOURCE
;

530 
	`cJSON_Dñëe
(
ª•⁄£
);

532 
	`cJSON_Dñëe
(
ªq
);

534  
gë_ªt
;

535 
	}
}

537 
	$v≤_tu¬ñ_£À˘_ªsour˚_‰om_˛oud
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
)

539 
cJSON
 *
ªq
 = 
NULL
;

540 
gë_ªt
 = 
ERROR_CLOUD_UNREACHABLE
;

541 
	`mem£t
(&
tu¬ñ
->
öfo
.
ªsour˚
 , 0, (tunnel->info.resource));

542 
ªq
 = 
	`cJSON_Cª©eObje˘
();

543 
	`cJSON_AddSåögToObje˘
(
ªq
, "MACAddr", 
u£r
);

544 
£rvîty≥_buf
[100];

545 i‡(
c⁄f_ty≥
 == 0)

547 
	`•rötf
(
£rvîty≥_buf
, "Game%d", 
tu¬ñ
->
tu¬ñ_id
 + 1);

551 
	`•rötf
(
£rvîty≥_buf
, "vµn%d", 
tu¬ñ
->
tu¬ñ_id
 + 1);

553 
	`cJSON_AddSåögToObje˘
(
ªq
, "SîvîTy≥", 
£rvîty≥_buf
);

554 
	`cJSON_AddSåögToObje˘
(
ªq
, "IP", 
tu¬ñ
->
tu¬ñ_v≤_£rvî
);

555 
	`cJSON_AddSåögToObje˘
(
ªq
, "CountryCode", "");

556 
	`dump_JSON
(
ªq
);

557 
cJSON
 *
ª•⁄£
 = 
	`v≤_˛oud_toﬁ
(
ªq
, 
˛oud_ho°
, 
˛oud_p‹t
, "/GetServerResource");

558 i‡(
ª•⁄£
)

560 
	`dump_JSON
(
ª•⁄£
);

561 
cJSON
 *
code_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "Code");

562 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹_code
, 
code_ôem
->
vÆue°rög
, (tunnel->info.resource.error_code));

563 i‡(
code_ôem
)

565 
tu¬ñ
->
œ°_£À˘_code
 = 
	`©oi
(
code_ôem
->
vÆue°rög
);

566 
cJSON
 *
Ÿhî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "OtherInfo");

567 i‡(
Ÿhî_ôem
)

569 
cJSON
 *
ídtime_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "endTime");

570 i‡(
ídtime_ôem
 &&Éndtime_ôem->
ty≥
 =
cJSON_Såög
)

572 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
ídtime
, 
ídtime_ôem
->
vÆue°rög
, (tunnel->info.package.endtime));

574 
cJSON
 *
Êow_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "flow");

575 i‡(
Êow_ôem
)

577 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
Êow
, 
Êow_ôem
->
vÆue°rög
, (tunnel->info.package.flow));

579 
cJSON
 *
mac_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "mac");

580 i‡(
mac_ôem
)

582 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
mac
, 
mac_ôem
->
vÆue°rög
, (tunnel->info.package.mac));

584 
cJSON
 *
ty≥_ôem
 = 
	`cJSON_GëObje˘Iãm
(
Ÿhî_ôem
, "type");

585 i‡(
ty≥_ôem
)

587 
	`°∫˝y
(
tu¬ñ
->
öfo
.
∑ckage
.
ty≥
, 
ty≥_ôem
->
vÆue°rög
, (tunnel->info.package.type));

590 i‡(
	`°rcmp
(
code_ôem
->
vÆue°rög
, "200") == 0)

592 
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹
 = 0;

593 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "IP");

594 
cJSON
 *
v≤_ù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "Subnet");

595 
cJSON
 *
pubkey_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "PubKey");

596 
cJSON
 *
¥ikey_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ª•⁄£
, "PrivKey");

597 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 
ho°_ôem
->
vÆue°rög
, (tunnel->info.resource.vpn_server_host));

598 i‡(
pubkey_ôem
 && 
¥ikey_ôem
 && 
ho°_ôem
 && 
v≤_ù_ôem
)

600 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 
ho°_ôem
->
vÆue°rög
, (tunnel->info.resource.vpn_server_host));

601 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
, 
v≤_ù_ôem
->
vÆue°rög
, (tunnel->info.resource.vpn_ip));

602 
	`v≤_tu¬ñ_£t_ªsour˚_id
(
tu¬ñ
, 
v≤_ù_ôem
->
vÆue°rög
);

603 
gë_ªt
 = 
ERROR_OK
;

606 if(
	`°rcmp
(
code_ôem
->
vÆue°rög
, "206") == 0)

608 
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹
 = 1;

609 
gë_ªt
 = 
ERROR_PACKAGE_FLOW
;

613 
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹
 = 1;

614 
gë_ªt
 = 
ERROR_SELECT_NO_RESOURCE
;

617 
	`cJSON_Dñëe
(
ª•⁄£
);

621 
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹
 = 1;

622 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹_code
, "cloud unreachable", (tunnel->info.resource.error_code));

624 
	`cJSON_Dñëe
(
ªq
);

625  
gë_ªt
;

626 
	}
}

628 
	#LOCAL_VPN_CONFIG_FMT
 ("/ëc/sôe/loˇl_c⁄fig_v≤%d.dump")

	)

629 
	#LOCAL_VPPN_CONFIG_FMT
 ("/ëc/sôe/loˇl_c⁄fig_vµn%d.dump")

	)

631 
	$v≤_tu¬ñ_£À˘_ªsour˚_‰om_loˇl
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

633 
ªt
 = 
ERROR_SELECT_NO_RESOURCE
;

634 
loˇl_c⁄f
[200];

635 i‡(
c⁄f_ty≥
 == 0)

637 
	`•rötf
(
loˇl_c⁄f
, 
LOCAL_VPN_CONFIG_FMT
, 
tu¬ñ
->
tu¬ñ_id
);

641 
	`•rötf
(
loˇl_c⁄f
, 
LOCAL_VPPN_CONFIG_FMT
, 
tu¬ñ
->
tu¬ñ_id
);

643 *
ãxt
 = 
	`ªad_ãxt
(
loˇl_c⁄f
);

644 i‡(
ãxt
)

646 
cJSON
 *
c⁄f
 = 
	`cJSON_P¨£
(
ãxt
);

647 i‡(
c⁄f
)

649 i‡(
c⁄f
->
ty≥
 =
cJSON_Obje˘
)

651 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
c⁄f
, "IP");

652 
cJSON
 *
v≤_ù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
c⁄f
, "Subnet");

653 i‡(
ho°_ôem
 && 
v≤_ù_ôem
)

655 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 
ho°_ôem
->
vÆue°rög
, (tunnel->info.resource.vpn_server_host));

656 
	`°∫˝y
(
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
, 
v≤_ù_ôem
->
vÆue°rög
, (tunnel->info.resource.vpn_ip));

657 
	`v≤_tu¬ñ_£t_ªsour˚_id
(
tu¬ñ
, 
v≤_ù_ôem
->
vÆue°rög
);

658 
ªt
 = 0;

661 
	`cJSON_Dñëe
(
c⁄f
);

663 
tu¬ñ
->
öfo
.
ªsour˚
.
îr‹
 = 1;

664 
	`‰ì
(
ãxt
);

666  
ªt
;

667 
	}
}

669 
	$v≤_tu¬ñ_put_ªsour˚_to_loˇl
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

671 
loˇl_c⁄f
[200];

672 i‡(
c⁄f_ty≥
 == 0)

674 
	`•rötf
(
loˇl_c⁄f
, 
LOCAL_VPN_CONFIG_FMT
, 
tu¬ñ
->
tu¬ñ_id
);

678 
	`•rötf
(
loˇl_c⁄f
, 
LOCAL_VPPN_CONFIG_FMT
, 
tu¬ñ
->
tu¬ñ_id
);

680 
cJSON
 *
c⁄f
 = 
	`cJSON_Cª©eObje˘
();

681 
	`cJSON_AddSåögToObje˘
(
c⁄f
, "IP", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
);

682 
	`cJSON_AddSåögToObje˘
(
c⁄f
, "Sub√t", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

683 *
ãxt
 = 
	`cJSON_Pröt
(
c⁄f
);

684 
	`wrôe_ãxt
(
loˇl_c⁄f
, 
ãxt
);

685 
	`‰ì
(
ãxt
);

686 
	`cJSON_Dñëe
(
c⁄f
);

688 
	}
}

690 
	$v≤_tu¬ñ_£À˘_ªsour˚
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
u£r
, *
˛oud_ho°
, 
˛oud_p‹t
, 
˛oud_˙t
, 
c⁄f_ty≥
)

692 
i
;

693 
˛oud_ªt
;

694 
ªt
 = -1;

695 
i
 = 0; i < 
˛oud_˙t
; i++)

697 
˛oud_ªt
 = 
	`v≤_tu¬ñ_£À˘_ªsour˚_‰om_˛oud
(
tu¬ñ
, 
u£r
, 
˛oud_ho°
, 
˛oud_p‹t
, 
c⁄f_ty≥
);

698 i‡(
˛oud_ªt
 !
ERROR_CLOUD_UNREACHABLE
)

703 i‡(
˛oud_ªt
 =
ERROR_OK
)

705 
ªt
 = 
˛oud_ªt
;

706 
	`v≤_tu¬ñ_put_ªsour˚_to_loˇl
(
tu¬ñ
, 
c⁄f_ty≥
);

708 i‡(
˛oud_ªt
 =
ERROR_CLOUD_UNREACHABLE
)

710 
ªt
 = 
	`v≤_tu¬ñ_£À˘_ªsour˚_‰om_loˇl
(
tu¬ñ
, 
c⁄f_ty≥
);

712 i‡(
˛oud_ªt
 =
ERROR_PACKAGE_FLOW
)

714 
ªt
 = -1;

716  
ªt
;

717 
	}
}

719 
v≤_c⁄fig_s
 *
	$dump_globÆ_c⁄fig
()

721 
v≤_c⁄fig_s
 *
ªt
 = 
	`mÆloc
((vpn_config_s));

722 i‡(
ªt
)

724 
	`mem˝y
(
ªt
, &
g_c⁄fig
, (g_config));

726  
ªt
;

727 
	}
}

729 
	$v≤_tu¬ñ_upd©e_°©us
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
°©us
)

731 i‡(
°©us
 <
TUNNEL_DONE
 && sètu†>
TUNNEL_DISABLE
)

733 
tu¬ñ
->
öfo
.
°©us
 = status;

736 
	}
}

738 
	$v≤_tu¬ñ_gë_°©us
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

740  
tu¬ñ
->
öfo
.
°©us
;

741 
	}
}

744 
	$v≤_tu¬ñ_add_c⁄√˘_Áûtime
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

746 
tu¬ñ
->
öfo
.
c⁄√˘_Áû_time
++;

747 
	}
}

749 
	$v≤_tu¬ñ_ª£t_c⁄√˘_Áûtime
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

751 
tu¬ñ
->
öfo
.
c⁄√˘_Áû_time
 = 0;

752 
	}
}

754 
	$v≤_tu¬ñ_gë_c⁄√˘_Áûtime
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

756  
tu¬ñ
->
öfo
.
c⁄√˘_Áû_time
;

757 
	}
}

759 
	$v≤_tu¬ñ_gë_√tmask
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
buf
)

761 
	`•rötf
(
buf
, "255.255.255.0");

762 
	}
}

764 
	$gë_tu¬ñ_c⁄f_dú_«me
(
v≤_tu¬ñ_s
* 
tu¬ñ
, *
buf
, 
c⁄f_ty≥
)

766 i‡(
c⁄f_ty≥
 == 0)

768 
	`•rötf
(
buf
, "/ëc/töc/v≤%d", 
tu¬ñ
->
tu¬ñ_id
);

772 
	`•rötf
(
buf
, "/ëc/töc/sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

775 
	}
}

777 
	$gë_tu¬ñ_c⁄f_ho°s_dú_«me
(
v≤_tu¬ñ_s
* 
tu¬ñ
, *
buf
, 
c⁄f_ty≥
)

779 i‡(
c⁄f_ty≥
 == 0)

781 
	`•rötf
(
buf
, "/ëc/töc/v≤%d/ho°s", 
tu¬ñ
->
tu¬ñ_id
);

785 
	`•rötf
(
buf
, "/ëc/töc/sôe%d/ho°s", 
tu¬ñ
->
tu¬ñ_id
);

788 
	}
}

790 
	$£t_töc_c⁄f_fûe
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

792 *
töc_c⁄f_f‹m©
;

793 
«me_buf
[200];

794 
öãrÁ˚_buf
[200];

795 
c⁄√˘to_buf
[200];

796 
c⁄ã¡
[400];

797 
fûe_buf
[200];

798 
dú_buf
[200];

799 i‡(
c⁄f_ty≥
 == 0)

801 
töc_c⁄f_f‹m©
 = "Name = %s\n"

808 
	`•rötf
(
öãrÁ˚_buf
, "tun%d", 
tu¬ñ
->
tu¬ñ_id
);

812 
töc_c⁄f_f‹m©
 = "Name = %s\n"

821 
	`•rötf
(
öãrÁ˚_buf
, "sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

825 
	`•rötf
(
«me_buf
, "%d_%d", 
	`v≤_tu¬ñ_gë_ªsour˚_id
(
tu¬ñ
)/256, vpn_tunnel_get_resource_id(tunnel)%256);

828 
	`•rötf
(
c⁄√˘to_buf
, "vpnserver");

829 
	`•rötf
(
c⁄ã¡
, 
töc_c⁄f_f‹m©
, 
«me_buf
, 
öãrÁ˚_buf
, 
tu¬ñ
->
tu¬ñ_dev
, 
c⁄√˘to_buf
);

831 
	`gë_tu¬ñ_c⁄f_dú_«me
(
tu¬ñ
, 
dú_buf
, 
c⁄f_ty≥
);

832 
	`•rötf
(
fûe_buf
, "%s/töc.c⁄f", 
dú_buf
);

834 
	`wrôe_ãxt
(
fûe_buf
, 
c⁄ã¡
);

836 
	}
}

838 
	$£t_töc_up_fûe
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

840 
töc_up_«me
[400];

841 
dú_buf
[200];

842 *
töc_up_f‹m©
;

843 
ù_buf
[200];

844 
öãrÁ˚_buf
[200];

845 
töc_up_c⁄ã¡
[400];

846 
√tmask_num
 = 28;

847 
√tmask_buf
[100];

848 
	`√t_toﬁ_num_to_√tmask
(
√tmask_num
, 
√tmask_buf
);

850 i‡(
c⁄f_ty≥
 == 0)

852 
töc_up_f‹m©
 =

858 
	`•rötf
(
öãrÁ˚_buf
, "tun%d", 
tu¬ñ
->
tu¬ñ_id
);

862 
töc_up_f‹m©
 =

869 
	`•rötf
(
öãrÁ˚_buf
, "sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

871 
	`gë_tu¬ñ_c⁄f_dú_«me
(
tu¬ñ
, 
dú_buf
, 
c⁄f_ty≥
);

872 
	`•rötf
(
töc_up_«me
, "%s/töc-up", 
dú_buf
);

873 
	`•rötf
(
ù_buf
, "%s", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

874 i‡(
c⁄f_ty≥
 == 0)

876 
	`•rötf
(
töc_up_c⁄ã¡
, 
töc_up_f‹m©
, 
öãrÁ˚_buf
, 
ù_buf
, 
√tmask_buf
, 
tu¬ñ
->
tu¬ñ_id
,Åu¬ñ->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
,Åu¬ñ->tu¬ñ_id + 
VPN_PORT_SERVER_BASE
,

877 
tu¬ñ
->
tu¬ñ_id
,Åunnel->tunnel_id);

881 
	`•rötf
(
töc_up_c⁄ã¡
, 
töc_up_f‹m©
, 
öãrÁ˚_buf
, 
ù_buf
, 
√tmask_buf
, 
tu¬ñ
->
tu¬ñ_id
);

884 
	`wrôe_shñl
(
töc_up_«me
, 
töc_up_c⁄ã¡
);

886 
	}
}

888 
	$£t_töc_ho°s_fûe
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

890 
loˇl_sub
[24];

891 
töc_ho°s_dú
[200];

892 
töc_dú
[200];

893 
£lf_sub√t_buf
[200];

894 
£lf_p‹t_buf
[200];

895 
£lf_fûe
[400];

896 
	`gë_tu¬ñ_c⁄f_ho°s_dú_«me
(
tu¬ñ
, 
töc_ho°s_dú
, 
c⁄f_ty≥
);

897 
	`gë_tu¬ñ_c⁄f_dú_«me
(
tu¬ñ
, 
töc_dú
, 
c⁄f_ty≥
);

900 *
£lf_f‹m©
 = "Subnet=%s/32\n"

906 
	`•rötf
(
£lf_sub√t_buf
, "%s", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

907 i‡(
c⁄f_ty≥
 == 0)

909 
	`•rötf
(
£lf_p‹t_buf
, "%d", 3267);

914 
	`•rötf
(
£lf_p‹t_buf
, "%d", 3267 + 10);

918 
	`gë_loˇl_sub√t
(
loˇl_sub
);

919 
£lf_c⁄ã¡
[400];

920 
	`•rötf
(
£lf_c⁄ã¡
, 
£lf_f‹m©
, 
£lf_sub√t_buf
, 
loˇl_sub
, 
£lf_p‹t_buf
);

923 
	`•rötf
(
£lf_fûe
, "%s/%d_%d", 
töc_ho°s_dú
, 
	`v≤_tu¬ñ_gë_ªsour˚_id
(
tu¬ñ
)/256, vpn_tunnel_get_resource_id(tunnel)%256);

924 
	`wrôe_ãxt
(
£lf_fûe
, 
£lf_c⁄ã¡
);

927 *
£rvî_f‹m©
 =

933 
£rvî_c⁄ã¡
[400];

934 i‡(
c⁄f_ty≥
 == 0)

937 
	`•rötf
(
£rvî_c⁄ã¡
, 
£rvî_f‹m©
, 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
,Åu¬ñ->
tu¬ñ_id
 + 
VPN_PORT_SERVER_BASE
);

942 
	`•rötf
(
£rvî_c⁄ã¡
, 
£rvî_f‹m©
, 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
,Åu¬ñ->
tu¬ñ_id
 + 
VPN_PORT_SERVER_BASE
 + 10);

946 
£rvî_fûe
[400];

947 
	`•rötf
(
£rvî_fûe
, "%s/v≤£rvî", 
töc_ho°s_dú
);

948 
	`wrôe_ãxt
(
£rvî_fûe
, 
£rvî_c⁄ã¡
);

951 
	}
}

953 
	$¸óã_töc_dú
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

955 
v≤_dú_buf
[200];

956 
v≤_ho°s_dú_buf
[200];

957 
	`gë_tu¬ñ_c⁄f_dú_«me
(
tu¬ñ
, 
v≤_dú_buf
, 
c⁄f_ty≥
);

958 
	`gë_tu¬ñ_c⁄f_ho°s_dú_«me
(
tu¬ñ
, 
v≤_ho°s_dú_buf
, 
c⁄f_ty≥
);

959 
	`fûe_toﬁ_¸óã_dú
(
v≤_dú_buf
, 0755);

960 
	`fûe_toﬁ_¸óã_dú
(
v≤_ho°s_dú_buf
, 0755);

962 
	}
}

964 
	$£tup_töc_c⁄f_fûes
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

966 
	`¸óã_töc_dú
(
tu¬ñ
, 
c⁄f_ty≥
);

967 
	`£t_töc_c⁄f_fûe
(
tu¬ñ
, 
c⁄f_ty≥
);

968 
	`£t_töc_up_fûe
(
tu¬ñ
, 
c⁄f_ty≥
);

970 
	`£t_töc_ho°s_fûe
(
tu¬ñ
, 
c⁄f_ty≥
);

972 
	}
}

974 
	$£t_≥îv≤_c⁄f
(
v≤_tu¬ñ_s
 * 
tu¬ñ
, 
c⁄f_ty≥
)

976 
c⁄f_fûe
[100];

978 
£rvî_c⁄ã¡
[400];

979 
öãrÁ˚_c⁄ã¡
[400];

980 
p‹t_c⁄ã¡
[400];

981 
ifc⁄fig4_c⁄ã¡
[400];

983 i‡(
c⁄f_ty≥
 == 0)

985 
	`•rötf
(
p‹t_c⁄ã¡
, "p‹à%d", 
tu¬ñ
->
tu¬ñ_id
 + 
VPN_PORT_LOCAL_BASE
);

986 
	`•rötf
(
c⁄f_fûe
, "/ëc/≥îv≤%d.c⁄f", 
tu¬ñ
->
tu¬ñ_id
);

987 
	`•rötf
(
öãrÁ˚_c⁄ã¡
, "öãrÁ˚Åun%d", 
tu¬ñ
->
tu¬ñ_id
);

988 
	`•rötf
(
£rvî_c⁄ã¡
, "öô≥î†%†%d", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
,Åu¬ñ->
tu¬ñ_id
 + 
VPN_PORT_SERVER_BASE
);

992 
	`•rötf
(
p‹t_c⁄ã¡
, "p‹à%d", 
tu¬ñ
->
tu¬ñ_id
 + 
VPN_PORT_LOCAL_BASE
 + 10);

993 
	`•rötf
(
c⁄f_fûe
, "/ëc/≥îvµn%d.c⁄f", 
tu¬ñ
->
tu¬ñ_id
);

994 
	`•rötf
(
öãrÁ˚_c⁄ã¡
, "öãrÁ˚ sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

995 
	`•rötf
(
£rvî_c⁄ã¡
, "öô≥î†%†%d", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_£rvî_ho°
,Åu¬ñ->
tu¬ñ_id
 + 
VPN_PORT_SERVER_BASE
 + 10);

997 
	`•rötf
(
ifc⁄fig4_c⁄ã¡
, "ifc⁄fig4 %s/24", 
tu¬ñ
->
öfo
.
ªsour˚
.
v≤_ù
);

998 
wrôe_buf
[4096];

999 
	`•rötf
(
wrôe_buf
,

1006 "%s\n", 
£rvî_c⁄ã¡
, 
öãrÁ˚_c⁄ã¡
, 
p‹t_c⁄ã¡
, 
ifc⁄fig4_c⁄ã¡


1008 
	`wrôe_ãxt
(
c⁄f_fûe
, 
wrôe_buf
);

1010 
	}
}

1012 
	$£tup_≥îv≤_c⁄f_fûes
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1014 
	`£t_≥îv≤_c⁄f
(
tu¬ñ
, 
c⁄f_ty≥
);

1015 
	}
}

1017 
	$v≤_tu¬ñ_add_c⁄f
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1019 #ifde‡
PEERVPN_TYPE


1020 
	`£tup_≥îv≤_c⁄f_fûes
(
tu¬ñ
, 
c⁄f_ty≥
);

1022 
	`£tup_töc_c⁄f_fûes
(
tu¬ñ
, 
c⁄f_ty≥
);

1025 
	}
}

1027 
	$v≤_tu¬ñ_dñ_c⁄f
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1030 #ifde‡
PEERVPN_TYPE


1031 
c⁄f_fûe
[100];

1032 i‡(
c⁄f_ty≥
 == 0)

1034 
	`•rötf
(
c⁄f_fûe
, "/ëc/≥îv≤%d.c⁄f", 
tu¬ñ
->
tu¬ñ_id
);

1038 
	`•rötf
(
c⁄f_fûe
, "/ëc/≥îvµn%d.c⁄f", 
tu¬ñ
->
tu¬ñ_id
);

1040 
	`ªmove
(
c⁄f_fûe
);

1042 
dú_buf
[200];

1043 i‡(
c⁄f_ty≥
 == 0)

1045 
	`•rötf
(
dú_buf
, "/ëc/töc/v≤%d", 
tu¬ñ
->
tu¬ñ_id
);

1049 
	`•rötf
(
dú_buf
, "/ëc/töc/sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

1051 
	`fûe_toﬁ_ªmove_dú
(
dú_buf
);

1055 
	}
}

1057 
	$v≤_tu¬ñ_gë_dnsmasq_fûe_by_id
(
tu¬ñ_id
, *
buf
)

1059 
	`•rötf
(
buf
, 
DNSMASQ_CONF_FMT
, 
tu¬ñ_id
);

1060 
	}
}

1062 
	$v≤_tu¬ñ_gë_dnsmasq_fûe
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
buf
)

1064 
	`v≤_tu¬ñ_gë_dnsmasq_fûe_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
buf
);

1065 
	}
}

1067 
	$v≤_tu¬ñ_gë_whôñi°_fûe_by_id
(
tu¬ñ_id
, *
buf
)

1069 
	`•rötf
(
buf
, 
WHITELIST_CONF_FMT
, 
tu¬ñ_id
);

1070 
	}
}

1072 
	$v≤_tu¬ñ_gë_whôñi°_fûe
(
v≤_tu¬ñ_s
 *
tu¬ñ
, *
buf
)

1074 
	`v≤_tu¬ñ_gë_whôñi°_fûe_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
buf
);

1075 
	}
}

1077 
	$v≤_tu¬ñ_ª£t_whôñi°_c⁄f
(
tu¬ñ_id
)

1079 
dnsmasq_fûe
[200];

1080 
	`v≤_tu¬ñ_gë_dnsmasq_fûe_by_id
(
tu¬ñ_id
, 
dnsmasq_fûe
);

1081 
	`ªmove
(
dnsmasq_fûe
);

1083 
	}
}

1086 
	$v≤_tu¬ñ_lﬂd_whôñi°_c⁄f_by_id
(
tu¬ñ_id
)

1088 
whôñi°_c⁄f
[100];

1089 
dnsmasq_c⁄f
[100];

1090 
	`•rötf
(
whôñi°_c⁄f
, 
WHITELIST_CONF_FMT
, 
tu¬ñ_id
);

1091 
	`•rötf
(
dnsmasq_c⁄f
, 
DNSMASQ_CONF_FMT
, 
tu¬ñ_id
);

1093 
cJSON
 *
whôñi°
 = 
	`ªad_js⁄_‰om_fûe
(
whôñi°_c⁄f
);

1094 i‡(
whôñi°
)

1096 
löe_buf
[100];

1097 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
whôñi°
);

1098 
i
;

1099 
i
 = 0; i < 
¨øy_cou¡
; i++)

1101 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
whôñi°
, 
i
);

1102 
cJSON
 *
domaö_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

1103 
cJSON
 *
gw_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "vproxy");

1104 i‡(
domaö_ôem
 && 
gw_ôem
)

1106 
	`•rötf
(
löe_buf
, "£rvî=/%s/%s#53\n", 
domaö_ôem
->
vÆue°rög
, 
gw_ôem
->valuestring);

1107 
	`≠≥nd_löe
(
dnsmasq_c⁄f
, 
löe_buf
);

1110 
	`cJSON_Dñëe
(
whôñi°
);

1114 
	}
}

1116 
	$v≤_tu¬ñ_u∆ﬂd_whôñi°_c⁄f_by_id
(
tu¬ñ_id
)

1118 
dnsmasq_c⁄f_fûe
[300];

1119 
	`v≤_tu¬ñ_gë_dnsmasq_fûe_by_id
(
tu¬ñ_id
, 
dnsmasq_c⁄f_fûe
);

1120 
	`ªmove
(
dnsmasq_c⁄f_fûe
);

1122 
	}
}

1125 
	$v≤_tu¬ñ_u∆ﬂd_whôñi°_by_id
(
tu¬ñ_id
)

1127 
dnsmasq_c⁄f_fûe
[300];

1128 
whôñi°_c⁄f_fûe
[300];

1129 
tu¬ñ_gw
[20];

1130 
tu¬ñ_dev
[20];

1131 
	`v≤_tu¬ñ_gë_dnsmasq_fûe_by_id
(
tu¬ñ_id
, 
dnsmasq_c⁄f_fûe
);

1132 
	`ªmove
(
dnsmasq_c⁄f_fûe
);

1134 
	}
}

1137 
	$add_rouã_by_cmd
(*
ù
, *
√tmask
, *
dev
)

1139 
cmd_buf
[400];

1140 
	`•rötf
("rouãádd -√à%†√tmask %†dev %s", 
ù
, 
√tmask
, 
dev
);

1141 
	`sy°em
(
cmd_buf
);

1142 
	}
}

1144 
	$dñ_rouã_by_cmd
(*
ù
, *
√tmask
, *
dev
)

1146 
cmd_buf
[400];

1147 
	`•rötf
("rouã dñ -√à%†√tmask %†dev %s", 
ù
, 
√tmask
, 
dev
);

1148 
	`sy°em
(
cmd_buf
);

1149 
	}
}

1152 
	$v≤_tu¬ñ_add_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1154 
whôñi°_fûe
[200];

1155 
dnsmasq_fûe
[200];

1156 
	`v≤_tu¬ñ_gë_dnsmasq_fûe
(
tu¬ñ
, 
dnsmasq_fûe
);

1157 
	`v≤_tu¬ñ_gë_whôñi°_fûe
(
tu¬ñ
, 
whôñi°_fûe
);

1159 *
gw_buf
 = 
NULL
;

1160 
gw_buf
 = 
	`v≤_tu¬ñ_gë_gw
(
tu¬ñ
);

1161 i‡(
gw_buf
)

1163 *
c⁄ã¡
 = 
	`ªad_ãxt
(
whôñi°_fûe
);

1164 i‡(
c⁄ã¡
)

1166 
cJSON
 *
roŸ
 = 
	`cJSON_P¨£
(
c⁄ã¡
);

1167 i‡(
roŸ
 &&ÑoŸ->
ty≥
 =
cJSON_Obje˘
)

1169 
cJSON
 *
whôñi°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "whitelist");

1170 i‡(
whôñi°_ôem
)

1172 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
whôñi°_ôem
);

1173 
i
;

1174 
i
 = 0; i < 
¨øy_cou¡
; i++)

1176 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
whôñi°_ôem
, 
i
);

1177 i‡(!
	`is_ù
(
ôem
->
vÆue°rög
))

1179 
löe_buf
[200];

1180 
	`•rötf
(
löe_buf
, "£rvî=/%s/%s#53\n", 
ôem
->
vÆue°rög
, 
gw_buf
);

1181 
	`≠≥nd_löe
(
whôñi°_fûe
, 
löe_buf
);

1185 
ù_buf
[40];

1186 
√tmask_buf
[40];

1187 
dev_buf
[40];

1188 
	`•rötf
(
ù_buf
, "%s", 
ôem
->
vÆue°rög
);

1189 
	`•rötf
(
√tmask_buf
, "%s", "255.255.255.255");

1190 
	`•rötf
(
dev_buf
, "sôe%d", 
tu¬ñ
->
tu¬ñ_id
);

1191 
	`add_rouã_by_cmd
(
ù_buf
, 
√tmask_buf
, 
dev_buf
);

1195 
	`cJSON_Dñëe
(
roŸ
);

1197 
	`‰ì
(
c⁄ã¡
);

1199 
	`‰ì
(
gw_buf
);

1202 
	}
}

1204 
	$v≤_tu¬ñ_dñ_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1206 
whôñi°_fûe
[200];

1207 
dnsmasq_fûe
[200];

1208 
	`v≤_tu¬ñ_gë_dnsmasq_fûe
(
tu¬ñ
, 
dnsmasq_fûe
);

1209 
	`v≤_tu¬ñ_gë_whôñi°_fûe
(
tu¬ñ
, 
whôñi°_fûe
);

1211 
	`ªmove
(
dnsmasq_fûe
);

1212 
	}
}

1214 
	$v≤_tu¬ñ_°¨t_töc_by_id
(
tu¬ñ_id
, 
c⁄f_ty≥
, 
v≤_tu¬ñ_s
 *
tu¬ñ
)

1216 
cmd_buf
[300];

1217 
	`mem£t
(
cmd_buf
, 0 , (cmd_buf));

1219 i‡(
c⁄f_ty≥
 == 0)

1221 i‡(!
tu¬ñ
->
log_⁄
)

1223 
	`•rötf
(
cmd_buf
, "töcd --pidfûe=/v¨/run/v≤%d.pid -¿v≤%d",
tu¬ñ_id
,Åunnel_id);

1227 
	`•rötf
(
cmd_buf
, "töcd --pidfûe=/v¨/run/v≤%d.pid -¿v≤%d -d %d -s",
tu¬ñ_id
,Åu¬ñ_id, 
tu¬ñ
->
log_Àvñ
);

1232 i‡(!
tu¬ñ
->
log_⁄
)

1234 
	`•rötf
(
cmd_buf
, "töcd --pidfûe=/v¨/run/sôe%d.pid -¿sôe%d",
tu¬ñ_id
,Åunnel_id);

1238 
	`•rötf
(
cmd_buf
, "töcd --pidfûe=/v¨/run/sôe%d.pid -¿sôe%d -d %d -s",
tu¬ñ_id
,Åu¬ñ_id, 
tu¬ñ
->
log_Àvñ
);

1241 
	`sy°em
(
cmd_buf
);

1243 
	}
}

1245 
	$v≤_tu¬ñ_°¨t_≥îv≤_by_id
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1247 
cmd_buf
[300];

1248 
	`mem£t
(
cmd_buf
, 0 , (cmd_buf));

1250 i‡(
c⁄f_ty≥
 == 0)

1252 
	`•rötf
(
cmd_buf
, "≥îv≤ /ëc/≥îv≤%d.c⁄f", 
tu¬ñ_id
);

1256 
	`•rötf
(
cmd_buf
, "≥îv≤ /ëc/≥îvµn%d.c⁄f", 
tu¬ñ_id
);

1258 
	`sy°em
(
cmd_buf
);

1260 
	}
}

1262 
	$v≤_tu¬ñ_°¨t_töc
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1264  
	`v≤_tu¬ñ_°¨t_töc_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
c⁄f_ty≥
,Åunnel);

1265 
	}
}

1267 
	$v≤_tu¬ñ_°¨t_≥îv≤
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1269  
	`v≤_tu¬ñ_°¨t_≥îv≤_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
c⁄f_ty≥
);

1270 
	}
}

1272 
	$gë_töc_pid
(
ch™√l
, 
c⁄f_ty≥
)

1274 
ªt_pid
 = 0;

1275 
buf
[1000];

1276 
m©ch_°r
[100];

1277 i‡(
c⁄f_ty≥
 == 0)

1279 
	`•rötf
(
m©ch_°r
, "--pidfûe=/v¨/run/v≤%d.pid", 
ch™√l
);

1283 
	`•rötf
(
m©ch_°r
, "--pidfûe=/v¨/run/sôe%d.pid", 
ch™√l
);

1285 
ªt_pid
 = 
	`¥o˚ss_toﬁ_ps
("töcd", 
m©ch_°r
);

1286  
ªt_pid
;

1287 
	}
}

1289 
	$v≤_tu¬ñ_°›_töc_by_id
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1291 
cmd_buf
[300];

1292 
pid
 = 
	`gë_töc_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1293 i‡(
pid
)

1295 
	`•rötf
(
cmd_buf
, "kû»%d", 
pid
);

1296 
	`sy°em
(
cmd_buf
);

1299 
	}
}

1301 
	$gë_≥îv≤_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1303 
m©ch_°r
[100];

1304 i‡(
c⁄f_ty≥
 == 0)

1306 
	`•rötf
(
m©ch_°r
, "/ëc/≥îv≤%d", 
tu¬ñ_id
);

1310 
	`•rötf
(
m©ch_°r
, "/ëc/≥îvµn%d", 
tu¬ñ_id
);

1312 
pid
 = 
	`¥o˚ss_toﬁ_ps
("≥îv≤", 
m©ch_°r
);

1313  
pid
;

1314 
	}
}

1316 
	$v≤_tu¬ñ_°›_≥îv≤_by_id
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1318 
cmd_buf
[300];

1319 
pid
 = 
	`gë_≥îv≤_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1320 i‡(
pid
)

1322 
	`•rötf
(
cmd_buf
, "kû»%d", 
pid
);

1323 
	`sy°em
(
cmd_buf
);

1326 
	}
}

1328 
	$v≤_tu¬ñ_°›_töc
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1330  
	`v≤_tu¬ñ_°›_töc_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
c⁄f_ty≥
);

1331 
	}
}

1333 
	$v≤_tu¬ñ_°›_≥îv≤
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1335  
	`v≤_tu¬ñ_°›_≥îv≤_by_id
(
tu¬ñ
->
tu¬ñ_id
, 
c⁄f_ty≥
);

1336 
	}
}

1338 
	$v≤_tu¬ñ_ª£t_rouãs_by_id
(
tu¬ñ_id
)

1340 
dev_buf
[200];

1341 
	`•rötf
(
dev_buf
, "sôe%d", 
tu¬ñ_id
);

1342 
	`√t_toﬁ_ª£t_rouãs
(
dev_buf
);

1344 
	}
}

1346 
	$v≤_tu¬ñ_lﬂd_whôñi°_by_id
(
tu¬ñ_id
)

1348 
	`v≤_tu¬ñ_ª£t_whôñi°_c⁄f
(
tu¬ñ_id
);

1349 
	`v≤_tu¬ñ_ª£t_rouãs_by_id
(
tu¬ñ_id
);

1350 
	`v≤_tu¬ñ_lﬂd_whôñi°_c⁄f_by_id
(
tu¬ñ_id
);

1352 
	}
}

1354 
	$v≤_tu¬ñ_u∆ﬂd_whôñi°_by_id
(
tu¬ñ_id
)

1357 
	`v≤_tu¬ñ_ª£t_whôñi°_c⁄f
(
tu¬ñ_id
);

1358 
	`v≤_tu¬ñ_ª£t_rouãs_by_id
(
tu¬ñ_id
);

1359 
	`v≤_tu¬ñ_u∆ﬂd_whôñi°_c⁄f_by_id
(
tu¬ñ_id
);

1362 
	}
}

1364 
	$v≤_tu¬ñ_lﬂd_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1366 
	`v≤_tu¬ñ_lﬂd_whôñi°_by_id
(
tu¬ñ
->
tu¬ñ_id
);

1368 
	}
}

1370 
	$v≤_tu¬ñ_u∆ﬂd_whôñi°
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1372 
	`v≤_tu¬ñ_u∆ﬂd_whôñi°_by_id
(
tu¬ñ
->
tu¬ñ_id
);

1374 
	}
}

1376 
	$v≤_tu¬ñ_ª£t_rouãs
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1378 
	`v≤_tu¬ñ_ª£t_rouãs_by_id
(
tu¬ñ
->
tu¬ñ_id
);

1379 
	}
}

1381 
	$v≤_tu¬ñ_c⁄√˘
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1383 
	`MY_DEBUG_INFO
("add conf\n");

1384 
	`v≤_tu¬ñ_add_c⁄f
(
tu¬ñ
, 
c⁄f_ty≥
);

1385 
	`MY_DEBUG_INFO
("startÅinc\n");

1386 #ifde‡
PEERVPN_TYPE


1387 
	`v≤_tu¬ñ_°¨t_≥îv≤
(
tu¬ñ
, 
c⁄f_ty≥
);

1389 
	`v≤_tu¬ñ_°¨t_töc
(
tu¬ñ
, 
c⁄f_ty≥
);

1391 
	`¶ìp
(1);

1393 
tu¬ñ
->
öfo
.
c⁄√˘_time
++;

1395 
	}
}

1397 
	$v≤_tu¬ñ_disc⁄√˘
(
v≤_tu¬ñ_s
 *
tu¬ñ
, 
c⁄f_ty≥
)

1399 #ifde‡
PEERVPN_TYPE


1400 
	`v≤_tu¬ñ_°›_≥îv≤
(
tu¬ñ
, 
c⁄f_ty≥
);

1402 
	`v≤_tu¬ñ_°›_töc
(
tu¬ñ
, 
c⁄f_ty≥
);

1404 
	`v≤_tu¬ñ_dñ_c⁄f
(
tu¬ñ
, 
c⁄f_ty≥
);

1406 
	}
}

1409 
	$v≤_tu¬ñ_œãncy
(
v≤_tu¬ñ_s
 *
tu¬ñ
)

1411 
pög_time
 = 0.0;

1412 
töc_pid
 = 
	`gë_töc_pid
(
tu¬ñ
->
tu¬ñ_id
, 
g_c⁄fig
.
tu¬ñ_ty≥
);

1413 i‡(
töc_pid
 > 0)

1416 *
tun_gw_ù
 = 
	`°rdup
("10.1.255.1");

1417 i‡(
tun_gw_ù
)

1419 
pög_time
 = 
	`√t_toﬁ_pög_ho°
(
tun_gw_ù
, 5);

1420 
tu¬ñ
->
öfo
.
œãncy
 = 
pög_time
;

1421 
	`‰ì
(
tun_gw_ù
);

1424  
pög_time
;

1425 
	}
}

1431 
	$tu¬ñ_¶ìp_öå
(
timeout
, 
√ed_ª£t
)

1433 
ªt
 = 0;

1434 
i
;

1435 
i
 = 0; i < 
timeout
; i++)

1437 
	`¶ìp
(1);

1438 i‡(
ª‰esh_Êag
 == 1)

1440 
ªt
 = -1;

1441 i‡(
√ed_ª£t
)

1443 
ª‰esh_Êag
 = 0;

1448  
ªt
;

1449 
	}
}

1455 
	$tu¬ñ_check_ªc⁄√˘
(
√ed_ª£t
)

1457 
ªt
 = 0;

1458 i‡(
ª‰esh_Êag
 == 1)

1460 
ªt
 = 1;

1461 i‡(
√ed_ª£t
)

1463 
ª‰esh_Êag
 = 0;

1466  
ªt
;

1467 
	}
}

1472 
	$tu¬ñ_¶ìp_waô⁄
()

1476 i‡(
tu¬ñ_⁄
 == 1)

1480 
	`u¶ìp
(3000);

1483 
	}
}

1485 
	$v≤_tu¬ñ_exô
(
v≤_tu¬ñ_s
* 
tu¬ñ
, 
c⁄f_ty≥
)

1487 
	`v≤_tu¬ñ_disc⁄√˘
(
tu¬ñ
, 
c⁄f_ty≥
);

1488 
	`exô
(0);

1489 
	}
}

1492 
	$check_hóπbót_ªtcode
(
ªtcode
)

1494 
ªt
 = 0;

1495 i‡(
ªtcode
 == 903

1496 || 
ªtcode
 == 904

1497 || 
ªtcode
 == 906

1498 || 
ªtcode
 == 908

1501 
ªt
 = 1;

1503  
ªt
;

1504 
	}
}

1508 
	$v≤_tu¬ñ_check_ªachabÀ
(
v≤_c⁄fig_s
* 
c⁄fig
)

1510 
ªt
 = 
	`√t_toﬁ_t˝_p‹t_ªachabÀ
(
c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 50069);

1511  
ªt
;

1512 
	}
}

1514 
	$v≤_maö_lo›
(
v≤_c⁄fig_s
 *
c⁄fig
)

1516 
Timî
 
pög_timî
;

1517 
Timî
 
gë_ªsour˚_timî
;

1518 
Timî
 
Æive_timî
;

1519 
Timî
 
°©us_timî
;

1520 
	`¸óã_≥îs_upd©e_thªad
();

1522 
	`¶ìp
(2);

1523 
	`timî_toﬁ_öô
(&
pög_timî
);

1524 
	`timî_toﬁ_cou¡down
(&
pög_timî
, 20);

1525 
	`timî_toﬁ_öô
(&
gë_ªsour˚_timî
);

1526 
	`timî_toﬁ_cou¡down
(&
gë_ªsour˚_timî
, 1);

1527 
	`timî_toﬁ_öô
(&
Æive_timî
);

1528 
	`timî_toﬁ_cou¡down
(&
Æive_timî
, 600);

1530 
ru¬ög
)

1532 
tu¬ñ_°©
;

1533 
£l_ªt
 = 0;

1534 
lﬂd_ªt
;

1535 
√ed_ªc⁄√˘
;

1536 
tu¬ñ_°©
 = 
	`v≤_tu¬ñ_gë_°©us
(&
c⁄fig
->
tu¬ñ
);

1537 i‡(
	`timî_toﬁ_is_expúed
(&
Æive_timî
))

1539 
	`v≤_tu¬ñ_Æive_c⁄fúm
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
£lf_id
, c⁄fig->
˛oud_ho°
, c⁄fig->
˛oud_p‹t
, c⁄fig->
tu¬ñ_ty≥
);

1540 
	`timî_toﬁ_cou¡down
(&
Æive_timî
, 600);

1543 
tu¬ñ_°©
)

1545 
TUNNEL_DISABLE
:

1546 
	`MY_DEBUG_INFO
("Tunnel disable\n");

1547 
	`tu¬ñ_¶ìp_öå
(1, 3);

1548 
lﬂd_ªt
 = 
	`v≤_tu¬ñ_ªlﬂd_c⁄fig
(
c⁄fig
, 
tu¬ñ_id
, c⁄fig->
tu¬ñ_ty≥
);

1549 i‡(
lﬂd_ªt
 == 0)

1551 
tu¬ñ_⁄
 = 
c⁄fig
->
tu¬ñ
.tunnel_on;

1552 i‡(
tu¬ñ_⁄
)

1554 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_READY
);

1558 
TUNNEL_READY
:

1559 
	`MY_DEBUG_INFO
("TunnelÑeady\n");

1560 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_GET_RESOURCE
);

1561 
	`u¶ìp
(3000);

1564 
TUNNEL_GET_RESOURCE
:

1565 
√ed_ªc⁄√˘
 = 
	`tu¬ñ_check_ªc⁄√˘
(0);

1566 i‡(
√ed_ªc⁄√˘
)

1568 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_DISABLE
);

1570 i‡(
	`timî_toﬁ_is_expúed
(&
gë_ªsour˚_timî
))

1572 
	`MY_DEBUG_INFO
("Tunnel get_resource\n");

1573 
	`timî_toﬁ_cou¡down
(&
gë_ªsour˚_timî
, 20);

1577 
£l_ªt
 = 
	`v≤_tu¬ñ_£À˘_ªsour˚_‰om_˛oud2
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
ãam_id
, c⁄fig->
˛oud_ho°
, c⁄fig->
˛oud_p‹t
, c⁄fig->
tu¬ñ_ty≥
, c⁄fig->tu¬ñ.
tu¬ñ_id
);

1580 i‡(
£l_ªt
 =
ERROR_SELECT_NO_RESOURCE
)

1582 
	`˘æ_dißbÀ_v≤
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1583 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_DISABLE
);

1585 i‡(
£l_ªt
 < 0)

1588 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_DISABLE
);

1592 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_CONNECT
);

1595 
	`u¶ìp
(3000);

1598 
TUNNEL_CONNECT
:

1599 
	`MY_DEBUG_INFO
("Tunnel connect\n");

1600 
	`v≤_tu¬ñ_c⁄√˘
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
tu¬ñ_ty≥
);

1601 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_DONE
);

1602 
	`˘æ_lﬂd_public_v∑th
(
c⁄fig
->
˛oud_ho°
, c⁄fig->
˛oud_p‹t
, c⁄fig->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1603 
	`˘æ_ªlﬂd_v≤
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
, c⁄fig->
ãam_id
);

1605 
	`u¶ìp
(3000);

1608 
TUNNEL_DONE
:

1610 
√ed_ªc⁄√˘
 = 
	`tu¬ñ_check_ªc⁄√˘
(0);

1612 i‡(
√ed_ªc⁄√˘
)

1615 
	`v≤_tu¬ñ_hóπbót
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
£lf_id
, c⁄fig->
˛oud_ho°
, c⁄fig->
˛oud_p‹t
, 1, 0);

1616 
	`v≤_tu¬ñ_disc⁄√˘
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
tu¬ñ_ty≥
);

1617 
	`v≤_tu¬ñ_ª£t_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
);

1618 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_DISABLE
);

1619 
	`˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1621 i‡(3 < 
	`v≤_tu¬ñ_gë_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
))

1623 
	`v≤_tu¬ñ_disc⁄√˘
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
tu¬ñ_ty≥
);

1624 
	`v≤_tu¬ñ_ª£t_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
);

1625 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_READY
);

1626 
	`˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1630 i‡(
	`timî_toﬁ_is_expúed
(&
pög_timî
))

1632 
	`MY_DEBUG_INFO
("Tunnel heartbeat\n");

1633 
	`timî_toﬁ_öô
(&
pög_timî
);

1634 
	`timî_toﬁ_cou¡down
(&
pög_timî
, 20);

1635 
cmd_buf
[100];

1636 
	`•rötf
(
cmd_buf
, "rouãádd -√à10.1.255.1Çëmask 255.255.255.255 dev sôe%d", 
c⁄fig
->
tu¬ñ
.
tu¬ñ_id
);

1637 
	`sy°em
(
cmd_buf
);

1638 
pög_°©us
 = 
	`v≤_tu¬ñ_œãncy
(&
c⁄fig
->
tu¬ñ
);

1639 
£rvî_ªachabÀ
 = 
	`v≤_tu¬ñ_check_ªachabÀ
(
c⁄fig
);

1640 
	`MY_DEBUG_INFO
("Tu¬ñÑóchabÀ = %d\n", 
£rvî_ªachabÀ
);

1641 
hóπ_bót_ªt
 = 
	`v≤_tu¬ñ_hóπbót
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
£lf_id
, c⁄fig->
˛oud_ho°
, c⁄fig->
˛oud_p‹t
, 
£rvî_ªachabÀ
, 1);

1643 i‡(
£rvî_ªachabÀ
 == 0)

1646 i‡(
	`check_hóπbót_ªtcode
(
c⁄fig
->
tu¬ñ
.
œ°_hóπbót_code
))

1648 
	`˘æ_dißbÀ_v≤
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1651 
	`v≤_tu¬ñ_disc⁄√˘
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
tu¬ñ_ty≥
);

1652 
	`v≤_tu¬ñ_ª£t_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
);

1653 
	`v≤_tu¬ñ_upd©e_°©us
(&
c⁄fig
->
tu¬ñ
, 
TUNNEL_READY
);

1654 
	`˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1657 i‡(
hóπ_bót_ªt
 < 0)

1659 
	`v≤_tu¬ñ_add_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
);

1664 
	`v≤_tu¬ñ_ª£t_c⁄√˘_Áûtime
(&
c⁄fig
->
tu¬ñ
);

1672 
	`u¶ìp
(50000);

1675 
	`ªmove_˘æ_pid_fûe
(
tu¬ñ_id
, 
c⁄fig
->
tu¬ñ_ty≥
);

1676 
	`˘æ_£rvî_exô
();

1677 
	`˘æ_dißbÀ_dnsmasq_c⁄f
(
c⁄fig
->
tu¬ñ_ty≥
, c⁄fig->
tu¬ñ
.
tu¬ñ_id
);

1678 
	`v≤_tu¬ñ_exô
(&
c⁄fig
->
tu¬ñ
, c⁄fig->
tu¬ñ_ty≥
);

1680 
	}
}

1682 
	#MY_SIG_STOP
 (35Ë

	)

1683 
	#MY_SIG_RELOAD
 (36)

	)

1684 
	#MY_SIG_START
 (37)

	)

1685 
	#MY_SIG_KILL
 (38)

	)

1686 
	#MY_SIG_BIRD
 (39)

	)

1689 
	$sig_h™dÀr
(
sig
)

1691 
	`MY_DEBUG_ERR
("GŸá sig«»%d\n", 
sig
);

1692 i‡(
sig
 =
MY_SIG_STOP
)

1694 
ª‰esh_Êag
 = 1;

1696 i‡(
sig
 =
MY_SIG_RELOAD
)

1698 
	`v≤_tu¬ñ_lﬂd_whôñi°_by_id
(
tu¬ñ_id
);

1700 i‡(
sig
 =
MY_SIG_START
)

1702 
ª‰esh_Êag
 = 1;

1704 i‡(
sig
 =
MY_SIG_KILL
)

1706 
ru¬ög
 = 0;

1709 
	}
}

1711 
	$run_no_debug_öô
()

1713 
	`˛o£
(1);

1714 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

1715 i‡(
fd
 > 0)

1717 
	`dup2
(
fd
, 1);

1719 
	}
}

1721 
	$run_dóm⁄
(
c⁄f_ty≥
)

1723 
pid_t
 
pid
;

1724 
pid
 = 
	`f‹k
();

1725 i‡(
pid
 < 0)

1727 
	`MY_DEBUG_INFO
("forkÉrror\n");

1729 if(
pid
 > 0)

1731 
	`£t_˘æ_pid
(
tu¬ñ_id
, 
pid
, 
c⁄f_ty≥
);

1732 
	`exô
(0);

1734 
	`£tsid
();

1735 
	}
}

1737 *
	$v≤_tu¬ñ_fúewÆl_m⁄ô‹_thªad
(*
¨g
)

1739 
	`±hªad_dëach
(
	`±hªad_£lf
());

1740 
tu¬ñ_id
 = *(*)
¨g
;

1741 
	`‰ì
(
¨g
);

1744 
tun_buf
[10];

1745 
	`•rötf
(
tun_buf
, "sôe%d", 
tu¬ñ_id
);

1746 
found
;

1749 
found
 = 
	`ùèbÀs_föd_ruÀ
("«t", "POSTROUTING", 
NULL
, 
tun_buf
, NULL, NULL, "MASQUERADE");

1750 i‡(!
found
)

1752 
ruÀ_°r
[200];

1753 
	`•rötf
(
ruÀ_°r
, "-ÿ%†-j MASQUERADE", 
tun_buf
);

1754 
	`ùèbÀs_ö£π_ruÀ
("«t", "POSTROUTING", 
ruÀ_°r
, 0);

1758 
found
 = 
	`ùèbÀs_föd_ruÀ
("fûãr", "FORWARD", "br0", 
tun_buf
, 
NULL
, NULL, "ACCEPT");

1759 i‡(!
found
)

1761 
ruÀ_°r
[200];

1762 
	`•rötf
(
ruÀ_°r
, "-òbr0 -ÿ%†-j ACCEPT", 
tun_buf
);

1763 
	`ùèbÀs_ö£π_ruÀ
("fûãr", "FORWARD", 
ruÀ_°r
, 0);

1767 
found
 = 
	`ùèbÀs_föd_ruÀ
("fûãr", "FORWARD", 
tun_buf
, "br0", 
NULL
, NULL, "ACCEPT");

1768 i‡(!
found
)

1770 
ruÀ_°r
[200];

1771 
	`•rötf
(
ruÀ_°r
, "-ò%†-ÿbr0 -j ACCEPT", 
tun_buf
);

1772 
	`ùèbÀs_ö£π_ruÀ
("fûãr", "FORWARD", 
ruÀ_°r
, 0);

1776 
found
 = 
	`ùèbÀs_föd_ruÀ
("fûãr", "INPUT", 
tun_buf
, 
NULL
, NULL, NULL, "ACCEPT");

1777 i‡(!
found
)

1779 
ruÀ_°r
[200];

1780 
	`•rötf
(
ruÀ_°r
, "-ò%†-j ACCEPT", 
tun_buf
);

1781 
	`ùèbÀs_ö£π_ruÀ
("fûãr", "INPUT", 
ruÀ_°r
, 0);

1785 
found
 = 
	`ùèbÀs_föd_ruÀ
("fûãr", "OUTPUT", 
NULL
, 
tun_buf
, NULL, NULL, "ACCEPT");

1786 i‡(!
found
)

1788 
ruÀ_°r
[200];

1789 
	`•rötf
(
ruÀ_°r
, "-ÿ%†-j ACCEPT", 
tun_buf
);

1790 
	`ùèbÀs_ö£π_ruÀ
("fûãr", "OUTPUT", 
ruÀ_°r
, 0);

1792 
	`¶ìp
(60);

1794 
	`‰ì
(
¨g
);

1795  
NULL
;

1796 
	}
}

1798 
	$v≤_°¨t_tu¬ñ
(
v≤_c⁄fig_s
* 
c⁄fig
, 
tu¬ñ_id
)

1800 
	`run_dóm⁄
(
c⁄fig
->
tu¬ñ_ty≥
);

1801 
	`sig«l
(
MY_SIG_STOP
, 
sig_h™dÀr
);

1802 
	`sig«l
(
MY_SIG_RELOAD
, 
sig_h™dÀr
);

1803 
	`sig«l
(
MY_SIG_START
, 
sig_h™dÀr
);

1804 
	`sig«l
(
MY_SIG_KILL
, 
sig_h™dÀr
);

1805 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1806 
	`¸óã_©èch_devi˚_thªad
();

1808 
	#CTRL_SERVER_PORT_BASE
 (4100)

	)

1810 
u_sh‹t
 
˘æ_p‹t
;

1811 i‡(
c⁄fig
->
tu¬ñ_ty≥
 == 0)

1813 
˘æ_p‹t
 = 
tu¬ñ_id
 + 
CTRL_SERVER_PORT_BASE
 + 100;

1818 
˘æ_p‹t
 = 
tu¬ñ_id
 + 
CTRL_SERVER_PORT_BASE
;

1820 i‡(
	`˘æ_£rvî_öô
(
NULL
, 
˘æ_p‹t
) < 0)

1822 
	`MY_DEBUG_INFO
("create ctrl serverÉrror, Exit\n");

1823 
	`ªmove_˘æ_pid_fûe
(
tu¬ñ_id
, 
c⁄fig
->
tu¬ñ_ty≥
);

1824 
	`exô
(-1);

1827 
	`umask
(0022);

1828 i‡(!
c⁄fig
->
debug
)

1830 
	`run_no_debug_öô
();

1832 #i‡(
BOARD_NAME
 == 7800)

1834 i‡(
tu¬ñ_id
 == 0)

1836 
	`sy°em
("/www/cgi-bin/firewall.shÑestart");

1839 
	`v≤_maö_lo›
(
c⁄fig
);

1841 
	}
}

1843 
	$v≤_°¨t_tu¬ñ_by_sig«l
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1845 
pid
 = 
	`gë_˘æ_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1847 i‡(
pid
)

1849 
	`kûl
(
pid
, 
MY_SIG_START
);

1852 
	}
}

1854 
	$v≤_°›_tu¬ñ_by_sig«l
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1856 
pid
 = 
	`gë_˘æ_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1858 i‡(
pid
)

1860 
	`kûl
(
pid
, 
MY_SIG_STOP
);

1863 
	}
}

1865 
	$v≤_kûl_tu¬ñ_by_sig«l
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1867 
pid
 = 
	`gë_˘æ_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1869 i‡(
pid
)

1871 
	`kûl
(
pid
, 
MY_SIG_KILL
);

1874 
	}
}

1876 
	$v≤_tu¬ñ_lﬂd_whôñi°_by_sig«l
(
tu¬ñ_id
, 
c⁄f_ty≥
)

1878 
pid
 = 
	`gë_˘æ_pid
(
tu¬ñ_id
, 
c⁄f_ty≥
);

1879 i‡(
pid
)

1881 
	`kûl
(
pid
, 
MY_SIG_RELOAD
);

1884 
	}
}

1886 
pid_t
 
	$gë_dnsmasq_pid
()

1888 
pid_t
 
ªt_pid
 = 0;

1889 
FILE
 *
Â
 = 
	`p›í
("/bin/ps | /bin/grep dnsmasq", "r");

1890 i‡(
Â
)

1892 
buf
[1000];

1893 
m©ch_°r
[100];

1894 
	`•rötf
(
m©ch_°r
, "/usr/sbin/dnsmasq");

1895 
	`fgës
(
buf
, (buf), 
Â
))

1897 if(
	`°r°r
(
buf
, 
m©ch_°r
))

1899 
ªt_pid
 = 
	`©oi
(
buf
);

1903 
	`p˛o£
(
Â
);

1905  
ªt_pid
;

1906 
	}
}

1908 
	#DNS_DUMP_FILE
 ("/tmp/dns.dump")

	)

1910 
	$°¨t_dns_ªp‹t_lo›
()

1912 
	`run_dóm⁄
(
g_c⁄fig
.
tu¬ñ_ty≥
);

1913 
	`umask
(0022);

1917 
pid_t
 
dns_pid
 = 
	`gë_dnsmasq_pid
();

1918 i‡(
dns_pid
 > 0)

1920 
	`kûl
(
dns_pid
, 38);

1921 
	`¶ìp
(2);

1922 *
ãxt
 = 
	`ªad_ãxt
(
DNS_DUMP_FILE
);

1923 i‡(
ãxt
)

1925 
cJSON
 *
¨øy
 = 
	`cJSON_P¨£
(
ãxt
);

1926 i‡(
¨øy
)

1928 
cJSON
 *
obj
 = 
	`cJSON_Cª©eObje˘
();

1929 
	`cJSON_AddSåögToObje˘
(
obj
, "MACAddr", 
g_c⁄fig
.
£lf_id
);

1930 
	`cJSON_AddIãmToObje˘
(
obj
, "DNSRec‹ds", 
¨øy
);

1933 
cJSON
 *
ªs
 = 
	`v≤_˛oud_toﬁ_gzù
(
obj
, 
g_c⁄fig
.
˛oud_ho°
, g_c⁄fig.
˛oud_p‹t
, "/InternetRecords");

1936 i‡(
ªs
)

1938 
	`dump_JSON
(
ªs
);

1939 
	`cJSON_Dñëe
(
ªs
);

1941 
	`cJSON_Dñëe
(
obj
);

1943 
	`‰ì
(
ãxt
);

1945 
	`ªmove
(
DNS_DUMP_FILE
);

1947 
	`¶ìp
(600);

1949 
	}
}

1959 
	$maö
(
¨gc
, **
¨gv
)

1961 
ªt
 = -1;

1962 
a˘i⁄
 = -1;

1966 
ªt
 = 
	`v≤_c⁄fig_lﬂd
(&
g_c⁄fig
, 
¨gc
, 
¨gv
, &
a˘i⁄
, &
tu¬ñ_id
);

1967 i‡(
ªt
 >= 0)

1969 
a˘i⁄
)

1971 
ACTION_RUN
:

1972 i‡(
	`gë_˘æ_pid
(
tu¬ñ_id
, 
g_c⁄fig
.
tu¬ñ_ty≥
) == 0)

1974 
	`v≤_°¨t_tu¬ñ
(&
g_c⁄fig
, 
tu¬ñ_id
);

1977 
ACTION_KILL
:

1978 
	`v≤_kûl_tu¬ñ_by_sig«l
(
tu¬ñ_id
, 
g_c⁄fig
.
tu¬ñ_ty≥
);

1980 
ACTION_RELOAD
:

1981 
	`v≤_tu¬ñ_lﬂd_whôñi°_by_sig«l
(
tu¬ñ_id
, 
g_c⁄fig
.
tu¬ñ_ty≥
);

1988 
	}
}

	@my_debug.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~"my_debug.h
"

5 
	gdeÁu…_dbg_Àvñ
 = 
DEBUG_LEVEL_NO
;

7 
	$my_debug
(
debug_Àvñ
, c⁄° *
fûe_«me
, c⁄° *
func_«me
, 
löe
, c⁄° *
fmt
, ...)

9 
ªt
 = 0;

10 
va_li°
 
≠
;

11 i‡(
deÁu…_dbg_Àvñ
 !
DEBUG_LEVEL_NO
)

13 *
¥efix_löe
 = 
NULL
;

14 i‡(
debug_Àvñ
 <
deÁu…_dbg_Àvñ
)

16 
debug_Àvñ
)

18 
DEBUG_LEVEL_ERR
:

19 
¥efix_löe
 = "\033[4m\033[47;31m[ERROR] \033[0m\n";

21 
DEBUG_LEVEL_WARN
:

22 
¥efix_löe
 = "\033[4m\033[47;33m[WARN] \033[0m\n";

24 
DEBUG_LEVEL_INFO
:

25 
¥efix_löe
 = "\033[4m\033[47;32m[INFO] \033[0m\n";

30 i‡(
¥efix_löe
)

32 
	`¥ötf
("%s", 
¥efix_löe
);

34 
	`¥ötf
("<%†%s:%d> ", 
fûe_«me
, 
func_«me
, 
löe
);

35 
	`va_°¨t
(
≠
, 
fmt
);

36 
ªt
 = 
	`v¥ötf
(
fmt
, 
≠
);

37 
	`va_íd
(
≠
);

41  
ªt
;

42 
	}
}

44 
	$my_debug_£t_Àvñ
(
Àvñ
)

46 
deÁu…_dbg_Àvñ
 = 
Àvñ
;

48 
	}
}

	@my_debug.h

1 #i‚de‡
_MY_DEBUG_H_


2 
	#_MY_DEBUG_H_


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
	edebug_Àvñ_e


9 
	mDEBUG_LEVEL_NO
,

10 
	mDEBUG_LEVEL_ERR
,

11 
	mDEBUG_LEVEL_WARN
,

12 
	mDEBUG_LEVEL_INFO
,

13 
	mDEBUG_LEVEL_ALL
,

16 
my_debug_£t_Àvñ
(
Àvñ
);

17 
my_debug
(
debug_Àvñ
, c⁄° *
fûe_«me
, c⁄° *
func_«me
, 
löe
, c⁄° *
fmt
, ...);

19 
	#MY_DEBUG_ERR
(
fmt
, 
¨gs
...Ë
	`my_debug
(
DEBUG_LEVEL_ERR
, 
__FILE__
, 
__func__
, 
__LINE__
, fmt, ##¨gs)

	)

20 
	#MY_DEBUG_WARN
(
fmt
, 
¨gs
...Ë
	`my_debug
(
DEBUG_LEVEL_WARN
, 
__FILE__
, 
__func__
, 
__LINE__
, fmt, ##¨gs)

	)

21 
	#MY_DEBUG_INFO
(
fmt
, 
¨gs
...Ë
	`my_debug
(
DEBUG_LEVEL_INFO
, 
__FILE__
, 
__func__
, 
__LINE__
, fmt, ##¨gs)

	)

	@net_tool.c

1 
	~<°dio.h
>

2 
	~<sys/sockë.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/time.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/£À˘.h
>

7 
	~<√töë/ö.h
>

8 
	~<√töë/ù.h
>

9 
	~<√töë/ù_icmp.h
>

10 
	~<√t/rouã.h
>

11 
	~<√t/if.h
>

12 
	~<löux/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<°rögs.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<√tdb.h
>

19 
	~<¨∑/öë.h
>

20 
	~"cJSON.h
"

22 
	#PACKET_SIZE
 (200)

	)

23 
	#MAX_ALLOC_LEN
 (4096)

	)

25 #i‚de‡
FREE_PTR


26 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

29 
	$gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

31 
ªt
 = -1;

32 
i‰eq
 
i‰
;

33 
sockaddr
 
ù_addr
;

34 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

35 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

36 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

37 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

38 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

39 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

40 
ªt
 = 0;

41 
	`˛o£
(
sockfd
);

43  
ªt
;

44 
	}
}

46 
	$gë_if_√tmask
(*
if_«me
, 
sockaddr
 *
sock
)

48 
ªt
 = -1;

49 
i‰eq
 
i‰
;

50 
sockaddr
 
ù_addr
;

51 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

52 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

53 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

54 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

55 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFNETMASK
, &
i‰
) == 0) {

56 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

57 
ªt
 = 0;

58 
	`˛o£
(
sockfd
);

60  
ªt
;

61 
	}
}

63 
	$√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
)

65 
ªt
 = -1;

66 
sockaddr
 
ù_addr
;

67 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

68 
ªt
 = 
	`gë_if_addr
(
if_«me
, &
ù_addr
);

69 i‡(
ªt
 == 0)

71 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

73  
ªt
;

74 
	}
}

76 
	$√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
)

78 
ªt
 = -1;

79 
sockaddr
 
ù_addr
;

80 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

81 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
ù_addr
);

82 i‡(
ªt
 == 0)

84 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

86  
ªt
;

87 
	}
}

90 
	$c⁄vît_sub√t_to_°rög
(
ö_addr
* 
ù
, ö_addr* 
mask
, *
ªt_buf
)

92 
ö_addr
 *
√tw‹k_∑π
 = 
ù
;;

93 
ö_addr
 *
mask_ö
 = 
mask
;

94 
√tw‹k_∑π_Àn
 = 0;

96 
√tw‹k_∑π
->
s_addr
 =Çëw‹k_∑π->s_add∏& 
mask_ö
->s_addr;

98 
i
;

99 
i
 = 0; i < 32; i++)

101 
bô
 = 1 << 
i
;

102 i‡(
mask_ö
->
s_addr
 & 
bô
)

104 
√tw‹k_∑π_Àn
++;

108 
	`öë_¡›
(
AF_INET
, 
√tw‹k_∑π
, 
ªt_buf
, 20);

109 
√tw‹k_∑π_Àn_buf
[10];

110 
	`•rötf
(
√tw‹k_∑π_Àn_buf
, "/%d", 
√tw‹k_∑π_Àn
);

111 
	`°rˇt
(
ªt_buf
, 
√tw‹k_∑π_Àn_buf
);

113 
	}
}

115 
uöt32_t
 
	$√t_toﬁ_√tmask_to_num
(*
√tmask
)

117 
uöt32_t
 
ªt
 = 0;

118 
ö_addr
 
mask_addr
;

119 
	`öë_©⁄
(
√tmask
, &
mask_addr
);

120 
uöt32_t
 
ãmp
 = 
	`¡ohl
(
mask_addr
.
s_addr
);

121 
ãmp
)

123 
ãmp
 =Åemp & (temp - 1);

124 
ªt
++;

126  
ªt
;

127 
	}
}

129 
	$√t_toﬁ_num_to_√tmask
(
num
, * 
out
)

131 
ªt
 = -1;

132 
out
[0] = 0;

133 i‡(
num
 > 0 &&Çum <= 32)

135 
uöt32_t
 
mask_num
 = 1 << (32 - 
num
);

136 
mask_num
 -= 1;

138 
mask_num
 = ~mask_num;

139 
	`¥ötf
("mask_num = %08x\n", 
mask_num
);

140 
ö_addr
 
mask_addr
;

141 
mask_addr
.
s_addr
 = 
	`ht⁄l
(
mask_num
);

142 
	`öë_¡›
(
AF_INET
, &
mask_addr
, 
out
, 20);

143 
ªt
 = 0;

145  
ªt
;

146 
	}
}

148 
	$√t_toﬁ_ù_to_sub√t
(*
ù
, 
mask_num
, *
out
)

150 
ªt
 = -1;

151 
out
[0] = 0;

152 
ö_addr
 
ù_addr
;

153 i‡(
mask_num
 > 0 && mask_num <= 32)

155 
mask_buf
[100];

156 
	`√t_toﬁ_num_to_√tmask
(
mask_num
, 
mask_buf
);

157 
ö_addr
 
ù_addr
;

158 
ö_addr
 
mask_addr
;

159 
	`öë_©⁄
(
ù
, &
ù_addr
);

160 
	`öë_©⁄
(
mask_buf
, &
mask_addr
);

161 
	`c⁄vît_sub√t_to_°rög
(&
ù_addr
, &
mask_addr
, 
out
);

162 
ªt
 = 0;

164  
ªt
;

165 
	}
}

167 
	$√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
)

169 
ªt
 = -1;

170 
sockaddr
 
ù_addr
;

171 
sockaddr
 
mask_addr
;

172 
sockaddr_ö
* 
ù_addr_±r
 = (sockaddr_ö*)(&
ù_addr
);

173 
sockaddr_ö
* 
mask_addr_±r
 = (sockaddr_ö*)(&
mask_addr
);

174 
ªt
 = 
	`gë_if_√tmask
(
if_«me
, &
mask_addr
Ë|| 
	`gë_if_addr
(if_«me, &
ù_addr
);

175 i‡(
ªt
 == 0)

177 
	`c⁄vît_sub√t_to_°rög
(&
ù_addr_±r
->
sö_addr
, &
mask_addr_±r
->sö_addr, 
buf
);

179  
ªt
;

180 
	}
}

182 
	$√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
)

184 
ªt
 = -1;

185 
i‰eq
 
i‰
;

186 
sockaddr
 
ù_addr
;

187 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

188 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

189 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

190 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

191 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) == 0) {

192 
i
;

193 
i
 = 0; i < 6; i++)

195 
	`•rötf
(
buf
 + 2*
i
, "%02x", ()
i‰
.
i‰_hwaddr
.
ß_d©a
[i]);

197 
ªt
 = 0;

198 
	`˛o£
(
sockfd
);

200  
ªt
;

201 
	}
}

203 
	$ˇl_chksum
(*
addr
, 
Àn
)

205 
∆e·
=
Àn
;

206 
sum
=0;

207 *
w
=
addr
;

208 
™swî
=0;

209 
∆e·
 > 1)

211 
sum
 +*
w
++;

212 
∆e·
 -= 2;

215 if–
∆e·
 == 1)

217 *(*)(&
™swî
Ë*(*)
w
;

218 
sum
 +
™swî
;

221 
sum
 = (sum >> 16) + (sum & 0xffff);

222 
sum
 += (sum >> 16);

223 
™swî
 = ~
sum
;

224  
™swî
;

225 
	}
}

228 
	$ˇl_time_öãrvÆ
(
timevÆ
 *
ﬁd_time
, timevÆ *
now_time
)

230 
öãrvÆ_m£c_öt
 = 0;

231 
öãrvÆ_m£c_dŸ
 = 0;

232 
u£d_time
 = 0;

233 
buf
[20];

234 i‡(
now_time
->
tv_u£c
 < 
ﬁd_time
->tv_usec)

236 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec - 1) * 1000;

237 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec)/1000;

238 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec))%1000;

242 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec) * 1000;

243 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec)/1000;

244 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec))%1000;

246 
	`•rötf
(
buf
, "%Œu.%Œu", 
öãrvÆ_m£c_öt
, 
öãrvÆ_m£c_dŸ
);

247 
u£d_time
 = 
	`©of
(
buf
);

248  
u£d_time
;

249 
	}
}

252 
	$pög
(
ö_addr
 *
d°ù
, 
timeout
)

254 
timevÆ
 *
tvÆ
;

255 
maxfds
 = 0;

256 
fd_£t
 
ªadfds
;

257 
u£d_time
 = 0;

259 
sockaddr_ö
 
addr
;

260 
sockaddr_ö
 
‰om
;

262 
	`bzîo
(&
addr
,(addr));

263 
addr
.
sö_Ámûy
 = 
AF_INET
;

264 
addr
.
sö_addr
.
s_addr
 = 
d°ù
->s_addr;

266 
sockfd
;

268 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

269 i‡(
sockfd
 > 0)

271 
timevÆ
 
timeo
;

273 
timeo
.
tv_£c
 = 
timeout
;

274 
timeo
.
tv_u£c
 = 0;

276 i‡(
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
timeo
, (timeo)) == 0)

278 
£nd∑ckë
[
PACKET_SIZE
];

279 
ªcv∑ckë
[
PACKET_SIZE
];

281 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

283 
pid_t
 
pid
;

285 
pid
=
	`gëpid
();

287 
ù
 *
ùh
;

288 
icmp
 *icmp;

290 
icmp
=(icmp*)
£nd∑ckë
;

291 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

292 
icmp
->
icmp_code
=0;

293 
icmp
->
icmp_cksum
=0;

294 
icmp
->
icmp_£q
=0;

295 
icmp
->
icmp_id
=
pid
;

296 
tvÆ
(
timevÆ
 *)
icmp
->
icmp_d©a
;

297 
	`gëtimeofday
(
tvÆ
,
NULL
);

298 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

300 
n
;

302 
i
;

303 
i
 = 0; i < 3; i++)

305 
n
 = 
	`£ndto
(
sockfd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

307 i‡(
n
 > 0)

314 
	`FD_ZERO
(&
ªadfds
);

315 
	`FD_SET
(
sockfd
, &
ªadfds
);

316 
maxfds
 = 
sockfd
 + 1;

317 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

318 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

321 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

322 
‰omÀn
 = (
‰om
);

323 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

324 i‡(
n
 > 1)

326 
timevÆ
 *
pkt_tv
;

327 
timevÆ
 
now_tv
;

328 
	`gëtimeofday
(&
now_tv
, 
NULL
);

329 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

331 i‡(
‰om
.
sö_addr
.
s_addr
 =
d°ù
->s_addr)

333 
ùh
 = (
ù
 *)
ªcv∑ckë
;

334 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

337 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
 && icmp->
icmp_id
 =
pid
)

340 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

357 
	`˛o£
(
sockfd
);

359  
u£d_time
;

360 
	}
}

362 
	$√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
)

364 
u£d_time
 = 0;

365 
ho°ít
 *
he
 = 
	`gëho°by«me
(
ho°
);

366 i‡(
he
 && he->
h_addπy≥
 =
AF_INET
)

368 
u£d_time
 = 
	`pög
((
ö_addr
 *)
he
->
h_addr
, 
timeout
);

372 
	`¥ötf
("C™'àgë ho° o‡%s\n", 
ho°
);

374  
u£d_time
;

375 
	}
}

377 
	$¸óã_pög_sockë
()

379  
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

380 
	}
}

382 
	$£nd_pög_∑ckës
(
fd
, 
cJSON
 *
ho°s
)

384 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

385 
i
;

386 
i
 = 0; i < 
¨øy_cou¡
; i++)

388 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

389 i‡(
ôm
)

391 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, "ip");

392 i‡(
ho°_ôem
)

394 
sockaddr_ö
 
addr
;

397 
	`bzîo
(&
addr
,(addr));

398 
addr
.
sö_Ámûy
 = 
AF_INET
;

399 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

401 
£nd∑ckë
[
PACKET_SIZE
];

403 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

406 
pid_t
 
pid
;

407 
pid
=
	`gëpid
();

408 
pid
 +
i
;

410 
icmp
 *icmp;

412 
icmp
=(icmp*)
£nd∑ckë
;

413 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

414 
icmp
->
icmp_code
=0;

415 
icmp
->
icmp_cksum
=0;

416 
icmp
->
icmp_£q
=0;

417 
icmp
->
icmp_id
=
pid
;

418 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

419 
	`gëtimeofday
(
tvÆ
,
NULL
);

420 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

422 
j
;

423 
j
 = 0; j < 1; j++)

425 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

431 
	}
}

433 
	$£nd_pög_∑ckës2
(
fd
, 
cJSON
 *
ho°s
, *
ù_«me
)

435 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

436 
i
;

437 
i
 = 0; i < 
¨øy_cou¡
; i++)

439 
cJSON
 *
ôm
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

440 i‡(
ôm
)

442 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôm
, 
ù_«me
);

443 i‡(
ho°_ôem
)

445 
sockaddr_ö
 
addr
;

448 
	`bzîo
(&
addr
,(addr));

449 
addr
.
sö_Ámûy
 = 
AF_INET
;

450 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

452 
£nd∑ckë
[
PACKET_SIZE
];

454 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

457 
pid_t
 
pid
;

458 
pid
=
	`gëpid
();

459 
pid
 +
i
;

461 
icmp
 *icmp;

463 
icmp
=(icmp*)
£nd∑ckë
;

464 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

465 
icmp
->
icmp_code
=0;

466 
icmp
->
icmp_cksum
=0;

467 
icmp
->
icmp_£q
=0;

468 
icmp
->
icmp_id
=
pid
;

469 
timevÆ
 *
tvÆ
(timevÆ *)
icmp
->
icmp_d©a
;

470 
	`gëtimeofday
(
tvÆ
,
NULL
);

471 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

473 
j
;

474 
j
 = 0; j < 1; j++)

476 
	`£ndto
(
fd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

482 
	}
}

484 
	$£t_deÁut_œãncy
(
cJSON
 *
ho°s
)

486 
j
;

487 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

488 
j
 = 0; j < 
¨øy_cou¡
; j++)

490 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

491 i‡(
ôem
)

493 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

494 i‡(!
œãncy_ôem
)

496 
	`cJSON_AddNumbîToObje˘
(
ôem
, "latency", 0);

501 
	}
}

503 
	$£t_deÁut_œãncy2
(
cJSON
 *
ho°s
, *
œãncy_«me
)

505 
j
;

506 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

507 
j
 = 0; j < 
¨øy_cou¡
; j++)

509 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
j
);

510 i‡(
ôem
)

512 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

513 i‡(!
œãncy_ôem
)

515 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 0);

520 
	}
}

522 
	$ªcv_pög_∑ckës
(
sockfd
, 
cJSON
 *
ho°s
, 
timeout
)

524 
timevÆ
 
timeo
;

526 
timeo
.
tv_£c
 = 0;

527 
timeo
.
tv_u£c
 = 1000;

528 
sockaddr_ö
 
addr
;

529 
sockaddr_ö
 
‰om
;

530 
fd_£t
 
ªadfds
;

531 
u£d_time
;

532 
pid_t
 
pid
 = 
	`gëpid
();

534 
timevÆ
 
°¨t_time
;

535 
timevÆ
 
íd_time
;

536 
ªcv∑ckë
[
PACKET_SIZE
];

537 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

541 
	`FD_ZERO
(&
ªadfds
);

542 
	`FD_SET
(
sockfd
, &
ªadfds
);

543 
maxfds
 = 
sockfd
 + 1;

544 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

545 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

548 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

549 
‰omÀn
 = (
‰om
);

550 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

551 i‡(
n
 > 1)

553 
timevÆ
 *
pkt_tv
;

554 
timevÆ
 
now_tv
;

555 
	`gëtimeofday
(&
now_tv
, 
NULL
);

556 
ù
 *
ùh
;

557 
icmp
 *icmp;

558 
ùh
 = (
ù
 *)
ªcv∑ckë
;

559 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

560 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

561 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

563 
i
;

564 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

565 
i
 = 0; i < 
¨øy_cou¡
; i++)

567 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

568 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

569 i‡(
ôem
)

571 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "ip");

572 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

574 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

576 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

578 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "latency");

579 i‡(!
œãncy_ôem
)

581 
	`cJSON_AddNumbîToObje˘
(
ôem
, "œãncy", 
u£d_time
);

590 
	`gëtimeofday
(&
íd_time
, 
NULL
);

591 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

593 
	}
}

595 
	$ªcv_pög_∑ckës2
(
sockfd
, 
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

597 
timevÆ
 
timeo
;

599 
timeo
.
tv_£c
 = 0;

600 
timeo
.
tv_u£c
 = 1000;

601 
sockaddr_ö
 
addr
;

602 
sockaddr_ö
 
‰om
;

603 
fd_£t
 
ªadfds
;

604 
u£d_time
;

605 
pid_t
 
pid
 = 
	`gëpid
();

607 
timevÆ
 
°¨t_time
;

608 
timevÆ
 
íd_time
;

609 
ªcv∑ckë
[
PACKET_SIZE
];

610 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

614 
	`FD_ZERO
(&
ªadfds
);

615 
	`FD_SET
(
sockfd
, &
ªadfds
);

616 
maxfds
 = 
sockfd
 + 1;

617 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

618 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

621 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

622 
‰omÀn
 = (
‰om
);

623 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

624 i‡(
n
 > 1)

626 
timevÆ
 *
pkt_tv
;

627 
timevÆ
 
now_tv
;

628 
	`gëtimeofday
(&
now_tv
, 
NULL
);

629 
ù
 *
ùh
;

630 
icmp
 *icmp;

631 
ùh
 = (
ù
 *)
ªcv∑ckë
;

632 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

633 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

634 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
)

636 
i
;

637 
¨øy_cou¡
 = 
	`cJSON_GëAºaySize
(
ho°s
);

638 
i
 = 0; i < 
¨øy_cou¡
; i++)

640 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

641 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
ho°s
, 
i
);

642 i‡(
ôem
)

644 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
ù_«me
);

645 
	`öë_±⁄
(
AF_INET
, 
ho°_ôem
->
vÆue°rög
, &
addr
.
sö_addr
);

647 i‡(
‰om
.
sö_addr
.
s_addr
 =
addr
.sin_addr.s_addr)

649 i‡(
icmp
->
icmp_id
 =
pid
 + 
i
)

651 
cJSON
 *
œãncy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, 
œãncy_«me
);

652 i‡(!
œãncy_ôem
)

654 
	`cJSON_AddNumbîToObje˘
(
ôem
, 
œãncy_«me
, 
u£d_time
);

663 
	`u¶ìp
(1000);

664 
	`gëtimeofday
(&
íd_time
, 
NULL
);

665 } 
íd_time
.
tv_£c
 - 
°¨t_time
.tv_£¯< 
timeout
);

667 
	}
}

694 
	$√t_toﬁ_pög_ho°s
(
cJSON
 *
ho°s
, 
timeout
)

696 
fd
 = 
	`¸óã_pög_sockë
();

697 i‡(
fd
 > 0)

699 
	`£nd_pög_∑ckës
(
fd
, 
ho°s
);

700 
	`ªcv_pög_∑ckës
(
fd
, 
ho°s
, 
timeout
);

701 
	`˛o£
(
fd
);

703 
	`£t_deÁut_œãncy
(
ho°s
);

705 
	}
}

707 
	$√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
)

709 
fd
 = 
	`¸óã_pög_sockë
();

710 i‡(
fd
 > 0)

712 
	`£nd_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
);

713 
	`ªcv_pög_∑ckës2
(
fd
, 
ho°s
, 
ù_«me
, 
œãncy_«me
, 
timeout
);

714 
	`˛o£
(
fd
);

716 
	`£t_deÁut_œãncy2
(
ho°s
, 
œãncy_«me
);

718 
	}
}

720 
	#ROUTE_FILE
 "/¥oc/√t/rouã"

	)

722 
	srouã_öfo


724 
	möãrÁ˚_buf
[20];

725 
	md°_buf
[20];

726 
	mgw_buf
[20];

727 
	mÊags_buf
[20];

728 
	mªf_buf
[20];

729 
	mu£_buf
[20];

730 
	mmëric_buf
[20];

731 
	mmask_buf
[20];

732 
	mmtu_buf
[20];

733 
	mwödow_buf
[20];

734 
rouã_öfo
 *
	m√xt
;

737 
	$dump_rouã
(
rouã_öfo
 *
rouã
)

739 
rouã_öfo
 *
cur
 = 
rouã
;

740 
	`¥ötf
("cur:%p\äext:%p\nd°: %s\tgw:%s\tmask:%s\n", 
cur
, cur->
√xt
, cur->
d°_buf
, cur->
gw_buf
, cur->
mask_buf
);

741 
	}
}

743 
	$check_rouã_if
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
)

745 
ªt
 = 0;

746 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

748 
ªt
 = 1;

750  
ªt
;

751 
	}
}

753 
	$gë_rouã_öfo
(*
buf
, 
rouã_öfo
 *
⁄e_rouã
)

755 *
tokí
 = 
NULL
;

756 *
ßve_±r1
 = 
NULL
;

757 
	`mem£t
(
⁄e_rouã
, 0, (
rouã_öfo
));

758 
tokí
 = 
	`°πok_r
(
buf
, "\t", &
ßve_±r1
);

759 
i
 = 0;

760 
tokí
)

762 
i
)

765 
	`°r˝y
(
⁄e_rouã
->
öãrÁ˚_buf
, 
tokí
);

768 
	`°r˝y
(
⁄e_rouã
->
d°_buf
, 
tokí
);

771 
	`°r˝y
(
⁄e_rouã
->
gw_buf
, 
tokí
);

774 
	`°r˝y
(
⁄e_rouã
->
Êags_buf
, 
tokí
);

777 
	`°r˝y
(
⁄e_rouã
->
ªf_buf
, 
tokí
);

780 
	`°r˝y
(
⁄e_rouã
->
u£_buf
, 
tokí
);

783 
	`°r˝y
(
⁄e_rouã
->
mëric_buf
, 
tokí
);

786 
	`°r˝y
(
⁄e_rouã
->
mask_buf
, 
tokí
);

789 
	`°r˝y
(
⁄e_rouã
->
mtu_buf
, 
tokí
);

792 
	`°r˝y
(
⁄e_rouã
->
wödow_buf
, 
tokí
);

800 
i
++;

801 
tokí
 = 
	`°πok_r
(
NULL
, "\t", &
ßve_±r1
);

804 
	}
}

806 
rouã_öfo
 *
	$gë_rouã_li°
()

808 
löe_buf
[1000];

809 
FILE
 *
fûe
 = 
	`f›í
(
ROUTE_FILE
, "r");

810 
rouã_öfo
 *
ªt
 = 
NULL
;

811 i‡(
fûe
)

813 
	`mem£t
(
löe_buf
, 0, (line_buf));

815 
	`fgës
(
löe_buf
, ÷öe_buf),
fûe
);

816 
rouã_öfo
 *
tmp
 = 
NULL
;

817 
	`fgës
(
löe_buf
, ÷öe_buf), 
fûe
))

819 
rouã_öfo
 *
⁄e_rouã
 = 
	`mÆloc
((route_info));

820 
	`gë_rouã_öfo
(
löe_buf
, 
⁄e_rouã
);

822 i‡(
tmp
 =
NULL
)

824 
ªt
 = 
⁄e_rouã
;

828 
tmp
->
√xt
 = 
⁄e_rouã
;

831 
tmp
 = 
⁄e_rouã
;

833 
	`f˛o£
(
fûe
);

835  
ªt
;

836 
	}
}

838 
	$‰ì_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

840 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

841 
cur
)

843 
rouã_öfo
 *
tmp
 = 
cur
;

844 
cur
 = cur->
√xt
;

845 
	`‰ì
(
tmp
);

848 
	}
}

850 
sockaddr
 
	$gë_sockaddr
(*
buf
)

852 *
íd±r
;

853 
sockaddr
 
addr
;

854 
numbî
 = 0;

855 
sockaddr_ö
 *
ùv4_addr
 = (sockaddr_ö *)&
addr
;

856 
ùv4_addr
->
sö_Ámûy
 = 
AF_INET
;

857 
ùv4_addr
->
sö_p‹t
 = 0;

858 
numbî
 = 
	`°πﬁl
(
buf
, &
íd±r
, 16);

859 
ùv4_addr
->
sö_addr
.
s_addr
 = (
ö_addr_t
)
numbî
;

860  
addr
;

861 
	}
}

863 
	$dñ_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

865 
πíåy
 
π
;

866 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

867 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

868 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

869 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

870 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

871 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

872 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

873 i‡(
sockfd
 > 0)

875 
	`io˘l
(
sockfd
, 
SIOCDELRT
, &
π
);

876 
	`˛o£
(
sockfd
);

879 
	}
}

881 
	$add_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

883 
πíåy
 
π
;

884 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

885 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

886 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

887 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

888 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

889 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

890 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

891 i‡(
sockfd
 > 0)

893 
	`io˘l
(
sockfd
, 
SIOCADDRT
, &
π
);

894 
	`˛o£
(
sockfd
);

897 
	}
}

899 
	$√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

901 
ªt
 = -1;

902 
i‰eq
 
i‰
;

903 
sockaddr
 
ù_addr
;

904 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

905 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

906 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

907 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

908 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

909 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

910 
ªt
 = 0;

911 
	`˛o£
(
sockfd
);

913  
ªt
;

914 
	}
}

916 
	$rouã_√ed_dñëe
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
, 
sockaddr
 *
if_addr
)

918 
ªt
 = 0;

919 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

922 
sockaddr
 
rouã_d°
;

923 
sockaddr
 
rouã_mask
;

924 
rouã_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

925 
rouã_mask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

926 
sockaddr_ö
 *
ö_rouã_d°
 = (sockaddr_ö *)&
rouã_d°
;

927 
sockaddr_ö
 *
ö_rouã_mask
 = (sockaddr_ö *)&
rouã_mask
;

928 
sockaddr_ö
 *
ö_if_addr
 = (sockaddr_ö *)
if_addr
;

929 i‡((
ö_rouã_d°
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr) !=

930 (
ö_if_addr
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr))

932 
ªt
 = 1;

935  
ªt
;

936 
	}
}

938 
	$dñ_rouãs_by_if
(
rouã_öfo
 *
fú°_rouã
, *
dev
)

940 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

941 
sockaddr
 
addr
;

942 
	`mem£t
(&
addr
, 0, (
sockaddr
));

943 
ªt
 = 
	`√t_toﬁ_gë_if_addr
(
dev
, &
addr
);

944 i‡(
ªt
 == 0)

946 
cur
)

948 i‡(
	`rouã_√ed_dñëe
(
cur
, 
dev
, &
addr
))

950 
	`dñ_⁄e_rouã
(
cur
);

952 
cur
 = cur->
√xt
;

956 
	}
}

958 
	$dump_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

960 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

961 
cur
)

963 
	`dump_rouã
(
cur
);

964 
cur
 = cur->
√xt
;

966 
	}
}

969 
	$√t_toﬁ_ª£t_rouãs
(*
dev
)

971 
rouã_öfo
 *
rouã_li°
 = 
	`gë_rouã_li°
();

972 i‡(
rouã_li°
)

975 
	`dñ_rouãs_by_if
(
rouã_li°
, 
dev
);

976 
	`‰ì_rouã_li°
(
rouã_li°
);

978 
	}
}

980 *
	$ªcv_d©a
(
sockfd
, *
Àn
)

982 
ssize_t
 
ªcv_Àn
 = 0;

983 
ssize_t
 
ªcv_Àn_tŸÆ
 = 0;

984 *
ªcv_±r
 = 
NULL
;

985 i‡(
sockfd
 > 0)

989 
ªcv_±r
 = 
	`ªÆloc
‘ecv_±r, 
ªcv_Àn_tŸÆ
 + 
MAX_ALLOC_LEN
);

990 i‡(
ªcv_±r
)

993 
	`mem£t
(
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 0, 
MAX_ALLOC_LEN
);

994 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 
MAX_ALLOC_LEN
, 0);

995 i‡(
ªcv_Àn
 > 0)

997 
ªcv_Àn_tŸÆ
 +
ªcv_Àn
;

999 if(
ªcv_Àn
 == 0)

1005 
	`FREE_PTR
(
ªcv_±r
);

1011 *
Àn
 = 
ªcv_Àn_tŸÆ
;

1012  
ªcv_±r
;

1013 
	}
}

1015 *
	$√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
)

1017 *
web
 = 
NULL
;

1018 
ho°ít
 *
he
;

1019 
sockaddr_ö
 
£rvî
;

1020 
£nd_num
;

1021 
sockfd
;

1022 
ªt
;

1023 if((
he
=
	`gëho°by«me
(
ho°
)))

1025 
sockfd
=
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

1026 
timevÆ
 
timeout
 = {8, 0};

1027 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
timeout
, (timeout));

1028 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
timeout
, (timeout));

1029 if(
sockfd
 >= 0)

1031 
	`bzîo
(&
£rvî
,(server));

1032 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

1033 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1034 
£rvî
.
sö_addr
 = *((
ö_addr
 *)
he
->
h_addr
);

1035 
ªt
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *)&
£rvî
, (server));

1036 if(
ªt
 >= 0)

1038 
£nd_num
 = 
	`£nd
(
sockfd
, 
£nd_buf
, 
£nd_Àn
, 0);

1039 i‡(
£nd_num
 > 0)

1041 
web
 = 
	`ªcv_d©a
(
sockfd
, 
ªcv_Àn
);

1044 
	`˛o£
(
sockfd
);

1047  
web
;

1048 
	}
}

1050 
	$√t_toﬁ_t˝_p‹t_ªachabÀ
(*
ho°
, 
p‹t
)

1052 
ªt_ªachabÀ
 = 0;

1053 
ho°ít
 *
he
;

1054 
sockaddr_ö
 
£rvî
;

1055 
£nd_num
;

1056 
sockfd
;

1057 
ªt
 = 0;

1058 if((
he
=
	`gëho°by«me
(
ho°
)))

1060 
sockfd
=
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

1061 
timevÆ
 
timeout
 = {8, 0};

1062 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
timeout
, (timeout));

1063 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
timeout
, (timeout));

1064 if(
sockfd
 >= 0)

1066 
	`bzîo
(&
£rvî
,(server));

1067 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

1068 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1069 
£rvî
.
sö_addr
 = *((
ö_addr
 *)
he
->
h_addr
);

1070 
ªt
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *)&
£rvî
, (server));

1071 if(
ªt
 >= 0)

1073 
ªt_ªachabÀ
 = 1;

1075 
	`˛o£
(
sockfd
);

1078  
ªt_ªachabÀ
;

1079 
	}
}

1081 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
)

1083 
cJSON
 *
ªt
 = 
NULL
;

1084 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1085 i‡(
°r_ªq
)

1087 
£nd_Àn
 = 
¥efix_size
 + 
	`°æí
(
°r_ªq
) + 1;

1089 *
£nd_buf
 = 
	`mÆloc
(
£nd_Àn
 + 4);

1090 *
£nd_d©a
 = 
£nd_buf
 + 4;

1091 *(
uöt32_t
*)
£nd_buf
 = 
	`ht⁄l
((uöt32_t)
£nd_Àn
);

1092 
	`mem˝y
(
£nd_d©a
, 
¥efix
, 
¥efix_size
);

1093 
	`mem˝y
(
£nd_d©a
 + 
¥efix_size
, 
°r_ªq
, 
	`°æí
(str_req) + 1);

1094 
ªcv_Àn
 = 0;

1095 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
£nd_Àn
 + 4, &
ªcv_Àn
);

1096 i‡(
ª•⁄£
)

1098 i‡(
ªcv_Àn
 > 0)

1100 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1102 
	`‰ì
(
ª•⁄£
);

1104 
	`‰ì
(
£nd_buf
);

1105 
	`‰ì
(
°r_ªq
);

1107  
ªt
;

1108 
	}
}

1110 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
)

1112 
cJSON
 *
ªt
 = 
NULL
;

1113 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1114 i‡(
°r_ªq
)

1116 
ªcv_Àn
 = 0;

1117 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
°r_ªq
, 
	`°æí
(°r_ªqË+ 1, &
ªcv_Àn
);

1118 i‡(
ª•⁄£
)

1120 i‡(
ªcv_Àn
 > 0)

1122 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

1124 
	`‰ì
(
ª•⁄£
);

1126 
	`‰ì
(
°r_ªq
);

1128  
ªt
;

1129 
	}
}

1131 *
	$√t_toﬁ_hâp_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, *
body
, *
ªcv_Àn
)

1133 *
ªt
 = 
NULL
;

1134 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1145 
hód_buf
[1000];

1146 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
	`°æí
(
body
));

1148 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ såÀn(
body
) + 1;

1149 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1150 i‡(
£nd_buf
)

1152 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1153 
	`°rˇt
(
£nd_buf
, 
body
);

1154 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1155 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
	`°æí
(£nd_buf), 
ªcv_Àn
);

1156 
	`‰ì
(
£nd_buf
);

1158  
ªt
;

1159 
	}
}

1161 *
	$√t_toﬁ_hâp_˛õ¡2
(
mëhod
, *
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, * 
hódî
, *
ªcv_Àn
)

1163 *
ªt
 = 
NULL
;

1164 *
web_hód
;

1165 
hód_buf
[2000];

1166 
tŸÆ_Àn
;

1167 
hód_Àn
;

1168 i‡(
mëhod
 == 0)

1170 
web_hód
 = (*)"GET %s HTTP/1.1\r\n"

1179 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
);

1180 
body
 = 
NULL
;

1184 
web_hód
 = (*)"POST %s HTTP/1.1\r\n"

1191 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
	`°æí
(
body
));

1193 i‡(
hódî
)

1195 
	`°rˇt
(
hód_buf
, 
hódî
);

1196 i‡(!
	`°r°r
(
hódî
, "\r\n"))

1198 
	`°rˇt
(
hód_buf
, "\r\n");

1201 
	`°rˇt
(
hód_buf
, "\r\n");

1202 
hód_Àn
 = 
	`°æí
(
hód_buf
);

1203 
tŸÆ_Àn
 = 
hód_Àn
 + 
body_Àn
 + 1;

1205 *
£nd_buf
 = (*)
	`mÆloc
(
tŸÆ_Àn
);

1206 i‡(
£nd_buf
)

1208 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1210 i‡(
body
)

1212 
	`mem˝y
(
£nd_buf
 + 
hód_Àn
, 
body
, 
body_Àn
);

1214 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1215 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
tŸÆ_Àn
 - 1, 
ªcv_Àn
);

1216 
	`‰ì
(
£nd_buf
);

1218  
ªt
;

1219 
	}
}

1222 
cJSON
* 
	$√t_toﬁ_hâp_js⁄_˛õ¡2
(
mëhod
, *
ho°
, 
p‹t
, *
uri
, 
cJSON
* 
ªq
, * 
hódî
)

1224 
cJSON
 *
ªt
 = 
NULL
;

1225 *
°r_ªq
 = 
NULL
;

1226 i‡(
ªq
)

1228 
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1230 
ªcv_Àn
 = 0;

1231 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_˛õ¡2
(
mëhod
, 
ho°
, 
p‹t
, 
uri
, 
°r_ªq
, så_ªq?
	`°æí
(°r_ªq):0, 
hódî
, &
ªcv_Àn
);

1232 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

1235 *
±r
 = 
	`°r°r
(
ª•⁄£
, "\r\n\r\n");

1236 i‡(
±r
)

1238 
±r
 += 4;

1242 
±r
 = 
	`°r°r
(
ª•⁄£
, "\n\n");

1243 i‡(
±r
)

1245 
±r
 += 2;

1248 i‡(
±r
)

1250 
ªt
 = 
	`cJSON_P¨£
(
±r
);

1252 
	`‰ì
(
ª•⁄£
);

1254 i‡(
°r_ªq
)

1256 
	`‰ì
(
°r_ªq
);

1258  
ªt
;

1259 
	}
}

1260 *
	$√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
)

1262 *
ªt
 = 
NULL
;

1263 *
web_hód
 = "POST %s HTTP/1.1\r\n"

1275 
hód_buf
[1000];

1276 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
body_Àn
);

1278 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ 
body_Àn
 + 1;

1279 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

1280 i‡(
£nd_buf
)

1282 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

1283 
	`mem˝y
(
£nd_buf
 + 
	`°æí
(
hód_buf
), 
body
, 
body_Àn
);

1284 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

1285 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
tŸÆ_Àn
 - 1, 
ªcv_Àn
);

1286 
	`‰ì
(
£nd_buf
);

1288  
ªt
;

1289 
	}
}

1291 
cJSON
 *
	$√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
)

1293 
cJSON
 *
ªt
 = 
NULL
;

1294 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

1295 i‡(
°r_ªq
)

1297 
ªcv_Àn
 = 0;

1298 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_˛õ¡
(
ho°
, 
p‹t
, 
uri
, 
°r_ªq
, &
ªcv_Àn
);

1299 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

1302 *
±r
 = 
	`°r°r
(
ª•⁄£
, "\r\n\r\n");

1303 i‡(
±r
)

1305 
±r
 += 4;

1309 
±r
 = 
	`°r°r
(
ª•⁄£
, "\n\n");

1310 i‡(
±r
)

1312 
±r
 += 2;

1315 i‡(
±r
)

1317 
ªt
 = 
	`cJSON_P¨£
(
±r
);

1319 
	`‰ì
(
ª•⁄£
);

1321 
	`‰ì
(
°r_ªq
);

1323  
ªt
;

1324 
	}
}

1327 
	#DNS_HOST
 0x01

	)

1328 
	#DNS_CNAME
 0x05

	)

1330 
cJSON
 *

1331 
my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
);

1333 
cJSON
 *

1334 
∑r£_dns_ª•⁄£
(
sockëfd
);

1340 
gíî©e_que°i⁄
(c⁄° *
dns_«me


1341 , *
buf
 , *
Àn
);

1348 
is_poöãr
(
ö
);

1358 
∑r£_dns_«me
(*
chunk
 , *
±r


1359 , *
out
 , *
Àn
);

1361 
cJSON
 *
	$√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
)

1363 
cJSON
 *
ªt
 = 
NULL
;

1364 
ªt
 = 
	`my_dns_∑r£
(
dns_£rvî
, 
ªque°_«me
);

1365  
ªt
;

1366 
	}
}

1375 
cJSON
 *
	$∑r£_dns_ª•⁄£
(
sockëfd
) {

1376 
buf
[1024];

1377 *
±r
 = 
buf
;

1378 
sockaddr_ö
 
addr
;

1379 
n
 , 
i
 , 
Êag
 , 
quîys
 , 
™swîs
;

1380 
ty≥
 , 
d©Æí
 , 
Àn
;

1382 
˙ame
[128] , 
™ame
[128] , 
ù
[20];

1383 
√tù
[4];

1385 
sockÀn_t
 
addr_Àn
 = (
sockaddr_ö
);

1386 
cJSON
 *
ªt
 = 
NULL
;

1387 
cJSON
 *
Æüs_¨øy
 = 
	`cJSON_Cª©eAºay
();

1388 
cJSON
 *
ù_¨øy
 = 
	`cJSON_Cª©eAºay
();

1389 
ªt
 = 
	`cJSON_Cª©eObje˘
();

1390 
	`cJSON_AddIãmToObje˘
(
ªt
, "Æüs", 
Æüs_¨øy
);

1391 
	`cJSON_AddIãmToObje˘
(
ªt
, "ù", 
ù_¨øy
);

1393 
n
 = 
	`ªcv‰om
(
sockëfd
 , 
buf
 , (buf) , 0

1394 , (
sockaddr
*)&
addr
 , &
addr_Àn
);

1395 i‡(
n
 > 0)

1397 
±r
 += 4;

1398 
quîys
 = 
	`¡ohs
(*((*)
±r
));

1399 
±r
 += 2;

1400 
™swîs
 = 
	`¡ohs
(*((*)
±r
));

1401 
±r
 += 6;

1403 
i
0 ; i < 
quîys
 ; i ++){

1405 
Êag
 = ()
±r
[0];

1406 
±r
 +(
Êag
 + 1);

1407 if(
Êag
 == 0)

1410 
±r
 += 4;

1414 
i
 = 0 ; i < 
™swîs
 ; i ++)

1416 
	`bzîo
(
™ame
 , (aname));

1417 
Àn
 = 0;

1418 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
™ame
 , &
Àn
);

1419 
±r
 += 2;

1420 
ty≥
 = 
	`ht⁄s
(*((*)
±r
));

1421 
±r
 += 4;

1423 
±r
 += 4;

1424 
d©Æí
 = 
	`¡ohs
(*((*)
±r
));

1425 
±r
 += 2;

1426 if(
ty≥
 =
DNS_CNAME
){

1427 
	`bzîo
(
˙ame
 , (cname));

1428 
Àn
 = 0;

1429 
	`∑r£_dns_«me
(
buf
 , 
±r
 , 
˙ame
 , &
Àn
);

1431 
	`cJSON_AddIãmToAºay
(
Æüs_¨øy
, 
	`cJSON_Cª©eSåög
(
˙ame
));

1432 
±r
 +
d©Æí
;

1434 if(
ty≥
 =
DNS_HOST
){

1435 
	`bzîo
(
ù
 , (ip));

1436 if(
d©Æí
 == 4){

1437 
	`mem˝y
(
√tù
 , 
±r
 , 
d©Æí
);

1438 
	`öë_¡›
(
AF_INET
 , 
√tù
 , 
ù
 , (
sockaddr
));

1439 
	`cJSON_AddIãmToAºay
(
ù_¨øy
, 
	`cJSON_Cª©eSåög
(
ù
));

1444 
±r
 +
d©Æí
;

1448 
±r
 += 2;

1450  
ªt
;

1451 
	}
}

1454 
	$∑r£_dns_«me
(*
chunk


1455 , *
±r
 , *
out
 , *
Àn
){

1456 
n
 , 
Êag
;

1457 *
pos
 = 
out
 + (*
Àn
);

1460 
Êag
 = ()
±r
[0];

1461 if(
Êag
 == 0)

1463 if(
	`is_poöãr
(
Êag
)){

1464 
n
 = ()
±r
[1];

1465 
±r
 = 
chunk
 + 
n
;

1466 
	`∑r£_dns_«me
(
chunk
 , 
±r
 , 
out
 , 
Àn
);

1469 
±r
 ++;

1470 
	`mem˝y
(
pos
 , 
±r
 , 
Êag
);

1471 
pos
 +
Êag
;

1472 
±r
 +
Êag
;

1473 *
Àn
 +
Êag
;

1474 if(()
±r
[0] != 0){

1475 
	`mem˝y
(
pos
 , "." , 1);

1476 
pos
 += 1;

1477 (*
Àn
) += 1;

1482 
	}
}

1484 
	$is_poöãr
(
ö
){

1485  ((
ö
 & 0xc0) == 0xc0);

1486 
	}
}

1488 
cJSON
 *
	$my_dns_∑r£
(*
dns_£rvî
, *
dns_«me
) {

1489 
ªque°
[256];

1490 *
±r
 = 
ªque°
;

1491 
que°i⁄
[128];

1492 
que°i⁄_Àn
;

1493 
cJSON
 *
ªt
 = 
NULL
;

1495 
sockaddr_ö
 
de°
;

1496 
	`bzîo
(&
de°
 , (dest));

1497 
de°
.
sö_Ámûy
 = 
AF_INET
;

1498 
de°
.
sö_p‹t
 = 
	`ht⁄s
(53);

1499 
de°
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
dns_£rvî
);

1501 
	`gíî©e_que°i⁄
(
dns_«me
 , 
que°i⁄
 , &
que°i⁄_Àn
);

1502 *((*)
±r
Ë
	`ht⁄s
(0xff00);

1503 
±r
 += 2;

1504 *((*)
±r
Ë
	`ht⁄s
(0x0100);

1505 
±r
 += 2;

1506 *((*)
±r
Ë
	`ht⁄s
(1);

1507 
±r
 += 2;

1508 *((*)
±r
) = 0;

1509 
±r
 += 2;

1510 *((*)
±r
) = 0;

1511 
±r
 += 2;

1512 *((*)
±r
) = 0;

1513 
±r
 += 2;

1514 
	`mem˝y
(
±r
 , 
que°i⁄
 , 
que°i⁄_Àn
);

1515 
±r
 +
que°i⁄_Àn
;

1517 
sockëfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1518 i‡(
sockëfd
 > 0)

1520 
	`£ndto
(
sockëfd
 , 
ªque°
 , 
que°i⁄_Àn
 + 12 , 0

1521 , (
sockaddr
*)&
de°
 , (sockaddr));

1522 
ªt
 = 
	`∑r£_dns_ª•⁄£
(
sockëfd
);

1524  
ªt
;

1525 
	}
}

1528 
	$gíî©e_que°i⁄
(c⁄° *
dns_«me
 , *
buf
 , *
Àn
){

1529 *
pos
;

1530 *
±r
;

1531 
n
;

1533 *
Àn
 = 0;

1534 
±r
 = 
buf
;

1535 
pos
 = (*)
dns_«me
;

1537 
n
 = 
	`°æí
(
pos
Ë- (
	`°r°r
(pos , ".") ? strlen(strstr(pos , ".")) : 0);

1538 *
±r
 ++ = ()
n
;

1539 
	`mem˝y
(
±r
 , 
pos
 , 
n
);

1540 *
Àn
 +
n
 + 1;

1541 
±r
 +
n
;

1542 if(!
	`°r°r
(
pos
 , ".")){

1543 *
±r
 = ()0;

1544 
±r
 ++;

1545 *
Àn
 += 1;

1548 
pos
 +
n
 + 1;

1550 *((*)
±r
Ë
	`ht⁄s
(1);

1551 *
Àn
 += 2;

1552 
±r
 += 2;

1553 *((*)
±r
Ë
	`ht⁄s
(1);

1554 *
Àn
 += 2;

1556 
	}
}

	@net_tool.h

1 #i‚de‡
_NET_TOOL_H_


2 
	#_NET_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<√t/rouã.h
>

10 
	~<√t/if.h
>

11 
	~"cJSON.h
"

14 
√t_toﬁ_num_to_√tmask
(
num
, * 
out
);

15 
uöt32_t
 
√t_toﬁ_√tmask_to_num
(*
√tmask
);

16 
√t_toﬁ_ù_to_sub√t
(*
ù
, 
mask_num
, *
out
);

22 
√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
);

25 
√t_toﬁ_gë_if_√tmask
(*
if_«me
, *
buf
);

28 
√t_toﬁ_gë_if_sub√t
(*
if_«me
, *
buf
);

34 
√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
*);

45 
√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
);

56 
√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
);

87 
√t_toﬁ_pög_ho°s
(
cJSON
* 
ho°s
, 
timeout
);

89 
√t_toﬁ_pög_ho°s2
(
cJSON
 *
ho°s
, *
ù_«me
, *
œãncy_«me
, 
timeout
);

96 
√t_toﬁ_ª£t_rouãs
(*
dev
);

110 
√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
);

121 
cJSON
 *

122 
√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
);

123 
cJSON
 *

124 
√t_toﬁ_t˝_js⁄_˛õ¡_wôh_size
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
, *
¥efix
, 
¥efix_size
);

140 
√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
);

142 
√t_toﬁ_t˝_p‹t_ªachabÀ
(*
ho°
, 
p‹t
);

144 *
√t_toﬁ_hâp_˛õ¡2
(
mëhod
, *
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, * 
hódî
, *
ªcv_Àn
);

146 
cJSON
* 
√t_toﬁ_hâp_js⁄_˛õ¡2
(
mëhod
, *
ho°
, 
p‹t
, *
uri
, cJSON* 
ªq
, * 
hódî
);

157 
cJSON
 *

158 
√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
);

168 
cJSON
 *

169 
√t_toﬁ_dns_ªque°
(*
dns_£rvî
, *
ªque°_«me
);

	@process_tool.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<sig«l.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

8 
	~"¥o˚ss_toﬁ.h
"

9 
	~"my_debug.h
"

11 *
	$ªad_Â_d©a
(
FILE
 *
Â
)

13 *
ªt
 = 
NULL
;

14 
löe_buf
[1024];

15 
	`mem£t
(
löe_buf
, 0,  (line_buf));

16 
	`fgës
(
löe_buf
, ÷öe_bufË- 1, 
Â
))

18 
ﬁd_°r_Àn
 = 
ªt
?(
	`°æí
(ret)):0;

19 
√w_°r_Àn
 = 
	`°æí
(
löe_buf
Ë+ 
ﬁd_°r_Àn
;

20 
ªt
 = 
	`ªÆloc
‘ë, 
√w_°r_Àn
 + 1);

21 i‡(
ﬁd_°r_Àn
 == 0)

23 
ªt
[0] = 0;

25 
	`°rˇt
(
ªt
, 
löe_buf
);

26 
	`mem£t
(
löe_buf
, 0,  (line_buf));

28  
ªt
;

29 
	}
}

31 *
	$¥o˚ss_toﬁ_run_cmd
(*
cmd_buf
)

33 *
ªt
 = 
NULL
;

34 
FILE
 *
Â
 = 
	`p›í
(
cmd_buf
, "r");

35 i‡(
Â
)

37 
ªt
 = 
	`ªad_Â_d©a
(
Â
);

38 
	`p˛o£
(
Â
);

40  
ªt
;

41 
	}
}

44 
	$¥o˚ss_toﬁ_ps
(*
¥ogøm_«me
, *
m©ch_°r
)

46 
ªt_pid
 = 0;

47 
cmd_buf
[200];

48 #ifde‡
HAVE_BUSYBOX


49 
	`•rötf
(
cmd_buf
, "p†| gª∞%s", 
¥ogøm_«me
);

51 
	`•rötf
(
cmd_buf
, "p†ax| gª∞%s", 
¥ogøm_«me
);

53 
FILE
 *
Â
 = 
	`p›í
(
cmd_buf
, "r");

54 i‡(
Â
)

56 
buf
[1000];

57 
	`fgës
(
buf
, (buf), 
Â
))

59 if(
	`°r°r
(
buf
, 
m©ch_°r
))

61 
ªt_pid
 = 
	`©oi
(
buf
);

65 
	`p˛o£
(
Â
);

67  
ªt_pid
;

68 
	}
}

70 
	$¥o˚ss_toﬁ_kûl
(*
¥ogøm_«me
, *
m©ch_°r
, 
sig
)

72 
pid
 = 
	`¥o˚ss_toﬁ_ps
(
¥ogøm_«me
, 
m©ch_°r
);

73 i‡(
pid
)

75 
	`kûl
(
pid
, 
sig
);

78 
	}
}

80 
	#MAX_ARGS_NUM
 (30)

	)

81 
	#MAX_LINE_LEN
 (2048)

	)

83 
	$˛o£_Æl_fd
()

85 
fd
;

86 
fd
 = 0; fd < 255; fd++)

88 
	`˛o£
(
fd
);

91 
	}
}

93 
	$∑r£_cmd_¨gs
(*
cmd
, *
ªt_¨gs
[], 
max_¨gs_num
)

95 
¨gs_˙t
 = 0;

96 
ªt
 = -1;

97 *
ßve_±r1
 = 
NULL
;

98 *
°r
;

99 *
tokí
;

100 
	`¥ötf
("cmd = %s\n", 
cmd
);

101 
	`¥ötf
("cmd = %p\n", 
cmd
);

102 i‡(
cmd
)

104 
ªt
 = 0;

105 
°r
 = 
cmd
, 
¨gs_˙t
 = 0; ;°∏
NULL
)

107 
tokí
 = 
	`°πok_r
(
°r
, " \t", &
ßve_±r1
);

108 i‡(
tokí
 =
NULL
)

112 
ªt_¨gs
[
¨gs_˙t
++] = 
tokí
;

113 i‡(
¨gs_˙t
 > 
max_¨gs_num
)

115 
ªt
 = -1;

121  
ªt
;

122 
	}
}

124 
	$¥o˚ss_toﬁ_sy°em
(c⁄° *
cmd
)

126 
ªt
 = -1;

127 *
¨gs
[
MAX_ARGS_NUM
] = {0};

128 
dup_cmd
[
MAX_LINE_LEN
] = {0};

129 
°©us
;

130 i‡(
cmd
 && 
	`°æí
(cmdË< 
MAX_LINE_LEN
)

132 
	`°r˝y
(
dup_cmd
, 
cmd
);

133 i‡(
	`∑r£_cmd_¨gs
(
dup_cmd
, 
¨gs
, 
MAX_ARGS_NUM
 - 1) == 0)

135 
	`MY_DEBUG_INFO
("¨g[0] = %s,árg[1] = %s\n", 
¨gs
[0],árgs[1]);

136 
pid_t
 
pid
 = 
	`f‹k
();

137 i‡(
pid
 == 0)

139 
	`˛o£_Æl_fd
();

140 
exe_ªt
 = 
	`execvp
(
¨gs
[0],árgs);

141 i‡(
exe_ªt
 < 0)

143 
	`MY_DEBUG_ERR
("execvpÉrror\n");

144 
	`exô
(-1);

147 if(
pid
 > 0)

149 
	`MY_DEBUG_INFO
("pid = %d\n", 
pid
);

150 
ªt
 = 
	`waôpid
(
pid
, &
°©us
, 0);

162  
ªt
;

163 
	}
}

	@process_tool.h

1 #i‚de‡
_PROCESS_TOOL_H_


2 
	#_PROCESS_TOOL_H_


	)

4 
	~<°dio.h
>

6 *
¥o˚ss_toﬁ_run_cmd
(*
cmd_buf
);

7 
¥o˚ss_toﬁ_ps
(*
¥ogøm_«me
, *
m©ch_°r
);

8 
¥o˚ss_toﬁ_kûl
(*
¥ogøm_«me
, *
m©ch_°r
, 
sig
);

9 
¥o˚ss_toﬁ_sy°em
(c⁄° *
cmd
);

	@timer_tool.c

8 
	~<°dio.h
>

9 
	~"timî_toﬁ.h
"

11 
	$timî_toﬁ_öô
(
Timî
* 
timî
)

13 
timî
->
íd_time
 = (
timevÆ
){0, 0};

14 
	}
}

16 
	$timî_toﬁ_is_expúed
(
Timî
* 
timî
)

18 
timevÆ
 
now
, 
ªs
;

19 
	`gëtimeofday
(&
now
, 
NULL
);

20 
	`timîsub
(&
timî
->
íd_time
, &
now
, &
ªs
);

21  
ªs
.
tv_£c
 < 0 || (ªs.tv_£¯=0 &&Ñes.
tv_u£c
 <= 0);

22 
	}
}

24 
	$timî_toﬁ_cou¡down_ms
(
Timî
* 
timî
, 
timeout
)

26 
timevÆ
 
now
;

27 
	`gëtimeofday
(&
now
, 
NULL
);

28 
timevÆ
 
öãrvÆ
 = {
timeout
 / 1000, (timeout % 1000) * 1000};

29 
	`timîadd
(&
now
, &
öãrvÆ
, &
timî
->
íd_time
);

30 
	}
}

32 
	$timî_toﬁ_cou¡down
(
Timî
* 
timî
, 
timeout
)

34 
timevÆ
 
now
;

35 
	`gëtimeofday
(&
now
, 
NULL
);

36 
timevÆ
 
öãrvÆ
 = {
timeout
, 0};

37 
	`timîadd
(&
now
, &
öãrvÆ
, &
timî
->
íd_time
);

38 
	}
}

40 
	$timî_toﬁ_À·_ms
(
Timî
* 
timî
)

42 
timevÆ
 
now
, 
ªs
;

43 
	`gëtimeofday
(&
now
, 
NULL
);

44 
	`timîsub
(&
timî
->
íd_time
, &
now
, &
ªs
);

46  (
ªs
.
tv_£c
 < 0Ë? 0 :Ñes.tv_£¯* 1000 +Ñes.
tv_u£c
 / 1000;

47 
	}
}

	@timer_tool.h

8 #i‚de‡
_TIMER_TOOL_H_


9 
	#_TIMER_TOOL_H_


	)

11 
	~<sys/time.h
>

13 
	sTimî


15 
timevÆ
 
	míd_time
;

16 } 
	tTimî
;

18 
timî_toﬁ_öô
(
Timî
* 
timî
);

19 
timî_toﬁ_is_expúed
(
Timî
* 
timî
);

20 
timî_toﬁ_cou¡down_ms
(
Timî
* 
timî
, 
timeout
);

21 
timî_toﬁ_cou¡down
(
Timî
* 
timî
, 
timeout
);

22 
timî_toﬁ_À·_ms
(
Timî
* 
timî
);

	@tinc_tool.h

1 #i‚de‡
_SRC_TINC_TOOL_H_


2 
	#_SRC_TINC_TOOL_H_


	)

	@vpn_cloud.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°rög.h
>

4 
	~"com¥ess_toﬁ.h
"

5 
	~"√t_toﬁ.h
"

6 
	~"v≤_c⁄fig.h
"

7 
	~"cJSON.h
"

10 
cJSON
 *
	$v≤_˛oud_toﬁ
(
cJSON
 *
ªq
, *
˛oud_ho°
, 
˛oud_p‹t
, *
uri
)

12 
cJSON
 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_js⁄_˛õ¡
(
˛oud_ho°
, 
˛oud_p‹t
, 
uri
, 
ªq
);

13  
ª•⁄£
;

14 
	}
}

17 
cJSON
 *
	$v≤_˛oud_toﬁ_gzù
(
cJSON
 *
ªq
, *
˛oud_ho°
, 
˛oud_p‹t
, *
uri
)

19 
cJSON
 *
ªs
 = 
NULL
;

20 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

21 i‡(
°r_ªq
)

23 
uL⁄g
 
§c_Àn
 = (uL⁄g)
	`°æí
(
°r_ªq
);

24 
uL⁄g
 
d°_Àn
 = (uL⁄g)
§c_Àn
 * 2;

25 
Byãf
 *
§c
 = (Byã‡*)
°r_ªq
;

26 
Byãf
 *
d°
 = (Byã‡*)
	`mÆloc
(
d°_Àn
);

27 
ªcv_Àn
 = 0;

28 i‡(
d°
)

30 
	`mem£t
(
d°
, 0, 
d°_Àn
);

31 
îr
 = 
	`gzcom¥ess
(
§c
, 
§c_Àn
, 
d°
, &
d°_Àn
);

33 i‡(
îr
 == 0)

37 
	`¥ötf
("d°_À¿%d, src_À¿%d\n", ()
d°_Àn
, ()
§c_Àn
);

38 *
hâp_ªs
 = 
	`√t_toﬁ_hâp_˛õ¡_øw
(
˛oud_ho°
, 
˛oud_p‹t
, 
uri
, 
d°
, 
d°_Àn
, &
ªcv_Àn
);

39 i‡(
hâp_ªs
 && 
ªcv_Àn
 > 0)

41 
ªs
 = 
	`cJSON_P¨£
(
hâp_ªs
);

42 
	`‰ì
(
hâp_ªs
);

45 
	`‰ì
(
d°
);

47 
	`‰ì
(
°r_ªq
);

49  
ªs
;

50 
	}
}

	@vpn_cloud.h

1 #i‚de‡
__VPN_CLOUD_H__


2 
	#__VPN_CLOUD_H__


	)

4 
	~<°dio.h
>

5 
	~"cJSON.h
"

7 
	svpu_˛oud_s


9 
	m˛oud_ho°
[30];

10 
	m˛oud_p‹t
;

23 
cJSON
 *
v≤_˛oud_toﬁ
(cJSON *
ªq
, *
˛oud_ho°
, 
˛oud_p‹t
, *
uri
);

36 
cJSON
 *
v≤_˛oud_toﬁ_gzù
(cJSON *
ªq
, *
˛oud_ho°
, 
˛oud_p‹t
, *
uri
);

	@vpn_config.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<°rög.h
>

5 
	~"cJSON.h
"

6 
	~"v≤_c⁄fig.h
"

7 
	~"fûe_toﬁ.h
"

8 
	~"√t_toﬁ.h
"

9 
	~"¥o˚ss_toﬁ.h
"

10 
	~"my_debug.h
"

12 
	#DEFAULT_CONFIG_FILE
 "/ëc/v≤-c⁄fig/deÁu….c⁄f"

	)

13 
	#VPPN_CLOUD_CONF_FILE_FMT
 "/ëc/sôe/m™agî"

	)

14 
	#VPPN_TUNNEL_CONF_FILE_FMT
 "/ëc/sôe/sôe%d.c⁄f"

	)

15 
	#VPN_CLOUD_CONF_FILE_FMT
 "/ëc/v≤/m™agî"

	)

16 
	#VPN_TUNNEL_CONF_FILE_FMT
 "/ëc/v≤/v≤%d.c⁄f"

	)

19 
	#DEFAULT_CLOUD_SERVER
 "220.168.30.11"

	)

20 
	#DEFAULT_CLOUD_PORT
 (8888)

	)

22 
	$¥ötUßge
()

24 
	`¥ötf
("vppnctrl [-t 0] <-d> ACTION\n");

25 
	`¥ötf
("Available ACTIONs:\n");

26 
	`¥ötf
("\trun\n");

27 
	`¥ötf
("\tkill\n");

28 
	`¥ötf
("\tstart\n");

29 
	`¥ötf
("\tstop\n");

31 
	}
}

33 
	#VPN_TINC_SERVER
 "£rvî_addr"

	)

34 
	#VPN_TINC_SERVER_PORT
 "£rvî_p‹t"

	)

35 
	#VPN_TINC_MYSELF_ADDR
 "my£lf_addr"

	)

36 
	#VPN_TINC_TEAMID
 "ãam_id"

	)

37 
	#VPN_SWITCH_STR
 "⁄"

	)

39 
	$my_skù_¸lf
(*
°r
)

41 
i
;

42 i‡(
°r
)

44 
°r_Àn
 = 
	`°æí
(
°r
);

45 
i
 = 0; i < 
°r_Àn
; i++)

47 i‡(
°r
[
i
] == '\r' || str[i] == '\n')

49 
°r
[
i
] = 0;

54 
	}
}

56 
	$v≤_c⁄fig_lﬂd_tu¬ñ_log_c⁄fig
(
v≤_c⁄fig_s
 *
c⁄fig
, 
tu¬ñ_id
)

58 
log_c⁄f_fûe
[100];

59 
	`•rötf
(
log_c⁄f_fûe
, "/tmp/vµn_log_sôe%d.c⁄f", 
tu¬ñ_id
);

60 
cJSON
 *
log_obj
 = 
	`ªad_js⁄_‰om_fûe
(
log_c⁄f_fûe
);

61 i‡(
log_obj
)

63 
cJSON
 *
⁄_ôem
 = 
	`cJSON_GëObje˘Iãm
(
log_obj
, "log_on");

64 
cJSON
 *
Àvñ_ôem
 = 
	`cJSON_GëObje˘Iãm
(
log_obj
, "log_level");

65 i‡(
⁄_ôem
 && on_ôem->
vÆueöt
 > 0

67 
Àvñ_ôem
)

69 
c⁄fig
->
tu¬ñ
.
log_⁄
 = 1;

70 
c⁄fig
->
tu¬ñ
.
log_Àvñ
 = 
Àvñ_ôem
->
vÆueöt
;

73 
	}
}

75 
	$v≤_c⁄fig_lﬂd_tu¬ñ_c⁄fig
(
v≤_c⁄fig_s
 *
c⁄fig
, *
fûe_«me
, 
tu¬ñ_id
)

77 
ªt
 = -1;

78 *
c⁄f
 = 
	`ªad_ãxt
(
fûe_«me
);

79 
	`°∫˝y
(
c⁄fig
->
tu¬ñ
.
tu¬ñ_dev
, c⁄fig->
cu°om_tu¬ñ_dev
, (config->custom_tunnel_dev));

80 i‡(
c⁄f
)

82 
cJSON
 *
roŸ
 = 
	`cJSON_P¨£
(
c⁄f
);

83 i‡(
roŸ
)

85 i‡(
roŸ
->
ty≥
 =
cJSON_Obje˘
)

87 
cJSON
 *
⁄_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_SWITCH_STR
);

88 
cJSON
 *
ãam_id_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_TINC_TEAMID
);

90 
c⁄fig
->
tu¬ñ
.
tu¬ñ_id
 =Åunnel_id;

91 i‡(
⁄_ôem
)

93 
c⁄fig
->
tu¬ñ
.
tu¬ñ_⁄
 = 
⁄_ôem
->
vÆueöt
;

95 i‡(
ãam_id_ôem
)

97 
	`°r˝y
(
c⁄fig
->
ãam_id
, 
ãam_id_ôem
->
vÆue°rög
);

100 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_TINC_SERVER
);

101 
cJSON
 *
£rvî_p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_TINC_SERVER_PORT
);

102 
cJSON
 *
my£lf_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_TINC_MYSELF_ADDR
);

103 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, 
VPN_TINC_TEAMID
);

105 
c⁄fig
->
tu¬ñ
.
tu¬ñ_id
 =Åunnel_id;

106 i‡(
⁄_ôem
)

108 
c⁄fig
->
tu¬ñ
.
tu¬ñ_⁄
 = 
⁄_ôem
->
vÆueöt
;

110 i‡(
£rvî_ôem
)

112 
	`°r˝y
(
c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_ho°
, 
£rvî_ôem
->
vÆue°rög
);

114 i‡(
£rvî_p‹t_ôem
)

116 
c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_£rvî_p‹t
 = 
£rvî_p‹t_ôem
->
vÆueöt
;

118 i‡(
my£lf_ôem
)

120 
	`°r˝y
(
c⁄fig
->
tu¬ñ
.
öfo
.
ªsour˚
.
v≤_ù
, 
my£lf_ôem
->
vÆue°rög
);

122 i‡(
ãamid_ôem
)

124 
	`°r˝y
(
c⁄fig
->
ãamid
, 
ãamid_ôem
->
vÆue°rög
);

131 
ªt
 = 0;

133 
	`cJSON_Dñëe
(
roŸ
);

135 
	`‰ì
(
c⁄f
);

141  
ªt
;

142 
	}
}

144 
	$v≤_c⁄fig_lﬂd_˛oud_c⁄fig
(
v≤_c⁄fig_s
 *
c⁄fig
, *
fûe_«me
)

146 
ªt
 = -1;

147 *
c⁄f
 = 
	`ªad_ãxt
(
fûe_«me
);

148 i‡(
c⁄f
)

150 
cJSON
 *
roŸ
 = 
	`cJSON_P¨£
(
c⁄f
);

151 i‡(
roŸ
)

153 i‡(
roŸ
->
ty≥
 =
cJSON_Obje˘
)

155 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "cloud_host");

156 
cJSON
 *
p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "cloud_port");

157 i‡(
p‹t_ôem
 && 
ho°_ôem
)

159 
c⁄fig
->
˛oud_p‹t
 = 
p‹t_ôem
->
vÆueöt
;

160 
	`°r˝y
(
c⁄fig
->
˛oud_ho°
, 
ho°_ôem
->
vÆue°rög
);

161 
ªt
 = 0;

164 
	`cJSON_Dñëe
(
roŸ
);

166 
	`‰ì
(
c⁄f
);

171 
c⁄fig
->
˛oud_p‹t
 = 
DEFAULT_CLOUD_PORT
;

172 
	`°r˝y
(
c⁄fig
->
˛oud_ho°
, 
DEFAULT_CLOUD_SERVER
);

173 
ªt
 = 0;

175  
ªt
;

176 
	}
}

178 
	$v≤_c⁄fig_˛oud_c⁄f_fûe
(*
fûe_buf
, 
tu¬ñ
, 
c⁄f_ty≥
)

180 i‡(
c⁄f_ty≥
 == 0)

182 
	`•rötf
(
fûe_buf
, 
VPN_CLOUD_CONF_FILE_FMT
);

186 
	`•rötf
(
fûe_buf
, 
VPPN_CLOUD_CONF_FILE_FMT
);

189 
	}
}

191 
	$v≤_c⁄fig_tu¬ñ_c⁄f_fûe
(*
fûe_buf
, 
tu¬ñ
, 
c⁄f_ty≥
)

193 i‡(
c⁄f_ty≥
 == 0)

195 
	`•rötf
(
fûe_buf
, 
VPN_TUNNEL_CONF_FILE_FMT
, 
tu¬ñ
);

199 
	`•rötf
(
fûe_buf
, 
VPPN_TUNNEL_CONF_FILE_FMT
, 
tu¬ñ
);

202 
	}
}

207 
	$v≤_c⁄fig_£t_£lf_id
(
v≤_c⁄fig_s
 *
c⁄fig
)

209 *
id
 = 
	`ªad_ãxt
("/etc/vppn_id");

210 i‡(
id
)

212 
	`°∫˝y
(
c⁄fig
->
£lf_id
, 
id
, (config->self_id) -1);

213 
	`‰ì
(
id
);

218 *
ªt_buf
 = 
	`¥o˚ss_toﬁ_run_cmd
((*)"artmtd -r sn | head -n 1 |áwk -F: '{print $2}'");

219 i‡(
ªt_buf
)

221 
	`my_skù_¸lf
(
ªt_buf
);

222 
	`°r˝y
(
c⁄fig
->
£lf_id
, 
ªt_buf
);

223 
	`‰ì
(
ªt_buf
);

227 
	`°r˝y
(
id
, "PC123456");

230 
	`√t_toﬁ_gë_if_hwaddr
(
c⁄fig
->
cu°om_œn_if
, c⁄fig->
£lf_id
);

235 
	}
}

237 
	$v≤_tu¬ñ_ªlﬂd_c⁄fig
(
v≤_c⁄fig_s
 *
c⁄fig
, 
tu¬ñ_id
, 
c⁄f_ty≥
)

239 
˛oud_fûe
[200];

240 
tu¬ñ_fûe
[200];

241 
ªt
 = 0;

242 
ªt_˛oud
;

243 
ªt_tu¬ñ
;

244 
	`v≤_c⁄fig_£t_£lf_id
(
c⁄fig
);

245 
	`v≤_c⁄fig_˛oud_c⁄f_fûe
(
˛oud_fûe
, 
tu¬ñ_id
, 
c⁄f_ty≥
);

246 
	`v≤_c⁄fig_tu¬ñ_c⁄f_fûe
(
tu¬ñ_fûe
, 
tu¬ñ_id
, 
c⁄f_ty≥
);

247 
ªt_˛oud
 = 
	`v≤_c⁄fig_lﬂd_˛oud_c⁄fig
(
c⁄fig
, 
˛oud_fûe
);

248 
ªt_tu¬ñ
 = 
	`v≤_c⁄fig_lﬂd_tu¬ñ_c⁄fig
(
c⁄fig
, 
tu¬ñ_fûe
, 
tu¬ñ_id
);

249 
	`v≤_c⁄fig_lﬂd_tu¬ñ_log_c⁄fig
(
c⁄fig
, 
tu¬ñ_id
);

251 
ªt
 = 
ªt_˛oud
 || 
ªt_tu¬ñ
;

252  
ªt
;

253 
	}
}

255 
	$v≤_c⁄fig_lﬂd
(
v≤_c⁄fig_s
 *
c⁄fig
, 
¨gc
, **
¨gv
, *
a˘i⁄
, *
tu¬ñ_id
)

257 
tu¬ñ
 = 0;

258 
c
;

259 
ªt
 = -1;

261 
c⁄fig
->
tu¬ñ_ty≥
 = 1;

262  (
c
=
	`gë›t
(
¨gc
,
¨gv
,"dt:c:D:")) != -1 )

264 
c
)

267 
tu¬ñ
 = 
	`©oi
(
›èrg
);

270 
c⁄fig
->
debug
 = 1;

273 
	`my_debug_£t_Àvñ
(
	`©oi
(
›èrg
));

277 i‡(
	`°rcmp
(
›èrg
, "vpn") == 0)

279 
c⁄fig
->
tu¬ñ_ty≥
 = 0;

283 
	`¥ötUßge
();

284 
	`exô
(-1);

290 
cJSON
 *
cu°om
 = 
	`ªad_js⁄_‰om_fûe
("/etc/vppn_custom.conf");

291 i‡(
cu°om
)

293 
cJSON
 *
w™_ôem
 = 
	`cJSON_GëObje˘Iãm
(
cu°om
, "wan_interface");

294 
cJSON
 *
œn_ôem
 = 
	`cJSON_GëObje˘Iãm
(
cu°om
, "lan_interface");

295 
cJSON
 *
dev_ôem
 = 
	`cJSON_GëObje˘Iãm
(
cu°om
, "tun_dev");

296 i‡(
w™_ôem
 && w™_ôem->
vÆue°rög


298 
œn_ôem
 &&Ü™_ôem->
vÆue°rög


300 
dev_ôem
 && dev_ôem->
vÆue°rög


303 
	`°∫˝y
(
c⁄fig
->
cu°om_w™_if
, 
w™_ôem
->
vÆue°rög
, (config->custom_wan_if));

304 
	`°∫˝y
(
c⁄fig
->
cu°om_œn_if
, 
œn_ôem
->
vÆue°rög
, (config->custom_lan_if));

305 
	`°∫˝y
(
c⁄fig
->
cu°om_tu¬ñ_dev
, 
dev_ôem
->
vÆue°rög
, (config->custom_tunnel_dev));

306 
CONTINUE
;

308 
	`cJSON_Dñëe
(
cu°om
);

310 
	`¥ötf
("Error, /etc/vppn_custom.confÉrror\n");

311 
	`exô
(-1);

312 
CONTINUE
:

313 i‡(
tu¬ñ
 >= 0)

315 
	`v≤_c⁄fig_£t_£lf_id
(
c⁄fig
);

316 *
tu¬ñ_id
 = 
tu¬ñ
;

317 if(
	`°rcmp
(
¨gv
[
›töd
], "run") == 0)

319 
ªt
 = 0;

320 *
a˘i⁄
 = 
ACTION_RUN
;

322 if(
	`°rcmp
(
¨gv
[
›töd
], "kill") == 0)

324 
ªt
 = 0;

325 *
a˘i⁄
 = 
ACTION_KILL
;

327 if(
	`°rcmp
(
¨gv
[
›töd
], "reload") == 0)

329 
ªt
 = 0;

330 *
a˘i⁄
 = 
ACTION_RELOAD
;

349  
ªt
;

350 
	}
}

	@vpn_config.h

1 #i‚de‡
__VPN_CONFIG_H__


2 
	#__VPN_CONFIG_H__


	)

4 
	#VPN_PORT_LOCAL_BASE
 (1000)

	)

5 
	#VPN_PORT_SERVER_BASE
 (50059)

	)

7 
	ev≤_îr‹_no


9 
	mERROR_OK
,

10 
	mERROR_CLOUD_UNREACHABLE
 = -1,

11 
	mERROR_SELECT_NO_RESOURCE
 = -2,

12 
	mERROR_PACKAGE_FLOW
 = -3,

15 
	ev≤_a˘i⁄


17 
	mACTION_RUN
,

18 
	mACTION_KILL
,

19 
	mACTION_START
,

20 
	mACTION_STOP
,

21 
	mACTION_RELOAD
,

22 
	mACTION_DNS_REPORT_LOOP


25 
	ev≤_tu¬ñ_°©us


27 
	mTUNNEL_DISABLE
,

28 
	mTUNNEL_READY
,

29 
	mTUNNEL_SELECT_SERVER
,

30 
	mTUNNEL_GET_RESOURCE
,

31 
	mTUNNEL_CONNECT
,

32 
	mTUNNEL_DONE


35 
	sv≤_ªsour˚_s


37 
	mîr‹
;

38 
	mãamid
[32];

39 
	mîr‹_code
[32];

40 
	mv≤_£rvî_ho°
[32];

41 
	mv≤_£rvî_p‹t
;

42 
	mv≤_sub√t
[32];

43 
	mv≤_ù
[32];

44 
	mv≤_pubkey
[1024];

45 
	mv≤_¥ikey
[1024];

46 
	mªsour˚_id
;

49 
	sv≤_∑ckage_s


51 
	mídtime
[32];

52 
	mÊow
[32];

53 
	mmac
[32];

54 
	mty≥
[32];

57 
	sv≤_tu¬ñ_öfo_s


59 
	m°©us
;

60 
	míabÀ
;

61 
	mc⁄√˘_time
;

62 
	mc⁄√˘_Áû_time
;

63 
	mœãncy
;

64 
v≤_ªsour˚_s
 
	mªsour˚
;

65 
v≤_∑ckage_s
 
	m∑ckage
;

68 
	sv≤_tu¬ñ_s


70 
	mtu¬ñ_⁄
;

71 
	mtu¬ñ_id
;

72 
	mtu¬ñ_ty≥
;

73 
	mauto_mode
;

74 
	mtu¬ñ_v≤_£rvî
[32];

79 
	mtu¬ñ_v≤_£rvî_p‹t
[32];

80 
	mtu¬ñ_v≤_cou¡ry
[32];

81 
	mœ°_£À˘_code
;

82 
	mœ°_hóπbót_code
;

83 
v≤_tu¬ñ_öfo_s
 
	möfo
;

84 
	mlog_Àvñ
;

85 
	mlog_⁄
;

86 
	mtu¬ñ_dev
[32];

89 
	sv≤_tu¬ñ_£t_s


91 
	mtu¬ñ_num
;

92 
v≤_tu¬ñ_s
* 
	móch_tu¬ñ
;

95 
	sv≤_c⁄fig_s


97 
	m£lf_id
[64];

98 
	mãam_id
[64];

99 
	m˛oud_ho°
[64];

100 
	m˛oud_p‹t
;

101 
v≤_tu¬ñ_s
 
	mtu¬ñ
;

102 
	mdebug
;

103 
	mtu¬ñ_ty≥
;

104 
	mcu°om_w™_if
[32];

105 
	mcu°om_œn_if
[32];

106 
	mcu°om_tu¬ñ_dev
[32];

120 
v≤_c⁄fig_lﬂd
(
v≤_c⁄fig_s
 *
c⁄fig
, 
¨gc
, **
¨gv
, *
a˘i⁄
, *
tu¬ñ_id
);

131 
v≤_tu¬ñ_ªlﬂd_c⁄fig
(
v≤_c⁄fig_s
 *
c⁄fig
, 
tu¬ñ_id
, 
c⁄f_ty≥
);

	@vppnconfig/bird_conf.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/sockë.h
>

4 
	~<√töë/ö.h
>

5 
	~<¨∑/öë.h
>

6 
	~"búd_c⁄f.h
"

7 
	~"cJSON.h
"

8 
	~"√t_toﬁ.h
"

9 
	~"fûe_toﬁ.h
"

10 
	~"nvøm-comm⁄.h
"

12 * 
	$gë_cu°om_œn_if
()

14 *
°r
 = 
NULL
;

15 
cJSON
 *
obj
 = 
	`ªad_js⁄_‰om_fûe
("/etc/vppn_custom.conf");

16 i‡(
obj
)

18 
cJSON
 *
dev_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "tun_dev");

19 
°r
 = 
	`°rdup
(
dev_ôem
->
vÆue°rög
);

20 
	`cJSON_Dñëe
(
obj
);

22  
°r
;

23 
	}
}

25 
	$búd_c⁄fig_comm⁄
(*
buf
, 
cJSON
 *
roŸ
)

27 *
comm⁄_f‹m©
 = "router id %s; \n\n"

38 
loˇl_ù
[20] = {0};

39 
comm⁄_buf
[400] = {0};

41 *
œn
 = 
	`gë_cu°om_œn_if
();

42 i‡(!
œn
)

44 
œn
 = 
	`°rdup
("br0");

46 
	`√t_toﬁ_gë_if_ù
(
œn
, 
loˇl_ù
);

48 
	`•rötf
(
comm⁄_buf
, 
comm⁄_f‹m©
, 
loˇl_ù
);

49 
	`°rˇt
(
buf
, 
comm⁄_buf
);

50 
	`‰ì
(
œn
);

52 
	}
}

54 
	$búd_c⁄fig_o•f
(*
buf
, 
cJSON
 *
roŸ
)

56 
i
=0;

57 
n
=0;

58 
ötf_fú°
[] = "protocol ospf { \n"

66 *
ötf_f‹m©
 = "\t\tinterface \"%s\" { \n"

70 
ötf_œ°
[] = "\t}; \n"

73 
	`°rˇt
(
buf
, 
ötf_fú°
);

75 
cJSON
 *
¨øy
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "interface");

76 
n
 = 
	`cJSON_GëAºaySize
(
¨øy
);

77 
i
=0; i<
n
; i++)

79 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
¨øy
, 
i
);

80 
c⁄ã¡
[100] = {0};

81 
	`•rötf
(
c⁄ã¡
, 
ötf_f‹m©
, 
ôem
->
vÆue°rög
);

82 
	`°rˇt
(
buf
, 
c⁄ã¡
);

85 
	`°rˇt
(
buf
, 
ötf_œ°
);

88 
	}
}

90 
	$búd_c⁄fig_ebgp
(*
buf
, 
cJSON
 *
roŸ
)

92 
i
=0;

93 
n
=0;

95 
cJSON
 *
loˇl_sub_ôem
 = 
NULL
;

96 
cJSON
 *
≥î_öfo_¨øy
 = 
NULL
;

99 
èbÀ_«me
[30] = {0};

101 
ö_addr
 
loˇl_vù
;

102 
ö_addr
 
≥î_vù
;

104 *
ebgp_f‹m©
 = "table %s \n"

138 
loˇl_sub_ôem
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "local_subnet");

140 
≥î_öfo_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
roŸ
, "p2p_info");

156 
n
 = 
	`cJSON_GëAºaySize
(
≥î_öfo_¨øy
);

157 
i
=0; i<
n
; i++)

159 
cJSON
 *
obj
 = 
	`cJSON_GëAºayIãm
(
≥î_öfo_¨øy
, 
i
);

160 
cJSON
 *
≥î_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "ip");

162 
cJSON
 *
loˇl_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "local_vip");

164 
cJSON
 *
tun_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "tunnel_id");

167 
	`öë_©⁄
(
≥î_ôem
->
vÆue°rög
, &
≥î_vù
);

168 
≥î_vù
.
s_addr
 = 
	`ht⁄l
(peer_vip.s_addr);

170 
	`öë_©⁄
(
loˇl_ôem
->
vÆue°rög
, &
loˇl_vù
);

171 
loˇl_vù
.
s_addr
 = 
	`ht⁄l
(local_vip.s_addr);

173 
loˇl_as
 = 
loˇl_vù
.
s_addr
%1022 + 64512;

174 
≥î_as
 = 
≥î_vù
.
s_addr
%1022 + 64512;

176 
	`•rötf
(
èbÀ_«me
, "tun%d_%d", 
tun_ôem
->
vÆueöt
, 
≥î_vù
.
s_addr
 & 0xffff);

177 
c⁄ã¡
[1024] = {0};

178 
	`•rötf
(
c⁄ã¡
, 
ebgp_f‹m©
,

179 
èbÀ_«me
,ÅabÀ_«me,ÅabÀ_«me, 
loˇl_sub_ôem
->
vÆue°rög
,

180 
èbÀ_«me
,ÅabÀ_«me, 
loˇl_ôem
->
vÆue°rög
, 
loˇl_as
, 
≥î_ôem
->vÆue°rög, 
≥î_as
,

181 
èbÀ_«me
,Åable_name);

183 
	`°rˇt
(
buf
, 
c⁄ã¡
);

185 
	}
}

187 
	$£t_búd_fûe
()

189 
ªt
 = -1;

190 *
buf
 = 
NULL
;

191 
fûe
[100] = {0};

192 
cJSON
 *
roŸ
 = 
NULL
;

193 *
±r
 = 
NULL
;

195 
buf
 = 
	`mÆloc
(256*1024);

196 i‡(
buf
)

198 
buf
[0] = 0;

199 
	`•rötf
(
fûe
, 
BIRD_INFO_FILE
);

200 
±r
 = 
	`ªad_ãxt
(
fûe
);

201 i‡(
±r
)

203 
roŸ
 = 
	`cJSON_P¨£
(
±r
);

204 i‡(
roŸ
)

206 
	`búd_c⁄fig_comm⁄
(
buf
, 
roŸ
);

207 
	`búd_c⁄fig_o•f
(
buf
, 
roŸ
);

208 
	`búd_c⁄fig_ebgp
(
buf
, 
roŸ
);

210 
	`cJSON_Dñëe
(
roŸ
);

212 
	`wrôe_ãxt
("/ëc/búd.c⁄f", 
buf
);

213 
ªt
 = 0;

215 
	`‰ì
(
±r
);

217 
	`‰ì
(
buf
);

220  
ªt
;

221 
	}
}

	@vppnconfig/bird_conf.h

1 #i‚de‡
__BIRD_CONF_H__


2 
	#__BIRD_CONF_H__


	)

4 
£t_búd_fûe
();

	@vppnconfig/cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~"cJSON.h
"

35 c⁄° *
	gï
;

37 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

39 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

41 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

42 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

43  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

44 
	}
}

46 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

47 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

49 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

51 
size_t
 
Àn
;

52 * 
c›y
;

54 
Àn
 = 
	`°æí
(
°r
) + 1;

55 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

56 
	`mem˝y
(
c›y
,
°r
,
Àn
);

57  
c›y
;

58 
	}
}

60 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

62 i‡(!
hooks
) {

63 
cJSON_mÆloc
 = 
mÆloc
;

64 
cJSON_‰ì
 = 
‰ì
;

68 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

69 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

70 
	}
}

73 
cJSON
 *
	$cJSON_New_Iãm
()

75 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

76 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

77  
node
;

78 
	}
}

81 
	$cJSON_Dñëe
(
cJSON
 *
c
)

83 
cJSON
 *
√xt
;

84 
c
)

86 
√xt
=
c
->next;

87 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

89 i‡(!(
c
->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& c->
°rög
Ë
	`cJSON_‰ì
(c->string);

90 
	`cJSON_‰ì
(
c
);

91 
c
=
√xt
;

93 
	}
}

96 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

98 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

100 i‡(*
num
=='-'Ë
sign
=-1,num++;

101 i‡(*
num
=='0')Çum++;

102 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

103 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

104 i‡(*
num
=='e' || *num=='E')

105 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

106 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

109 
n
=
sign
*n*
	`pow
(10.0,(
sˇÀ
+
subsˇÀ
*
signsubsˇÀ
));

111 
ôem
->
vÆuedoubÀ
=
n
;

112 
ôem
->
vÆueöt
=()
n
;

113 
ôem
->
ty≥
=
cJSON_Numbî
;

114  
num
;

115 
	}
}

117 
	$pow2gt
 (
x
Ë{ --x; x|=x>>1; x|=x>>2; x|=x>>4; x|=x>>8; x|=x>>16;  x+1; 
	}
}

119 °ru˘ {*
	mbuf„r
; 
	mÀngth
; 
	moff£t
; } 
	t¥ötbuf„r
;

121 * 
	$ísuª
(
¥ötbuf„r
 *
p
,
√eded
)

123 *
√wbuf„r
;
√wsize
;

124 i‡(!
p
 || !p->
buf„r
)  0;

125 
√eded
+=
p
->
off£t
;

126 i‡(
√eded
<=
p
->
Àngth
ËÖ->
buf„r
+p->
off£t
;

128 
√wsize
=
	`pow2gt
(
√eded
);

129 
√wbuf„r
=(*)
	`cJSON_mÆloc
(
√wsize
);

130 i‡(!
√wbuf„r
Ë{
	`cJSON_‰ì
(
p
->
buf„r
);p->
Àngth
=0,p->buffer=0; 0;}

131 i‡(
√wbuf„r
Ë
	`mem˝y
“ewbuf„r,
p
->
buf„r
,p->
Àngth
);

132 
	`cJSON_‰ì
(
p
->
buf„r
);

133 
p
->
Àngth
=
√wsize
;

134 
p
->
buf„r
=
√wbuf„r
;

135  
√wbuf„r
+
p
->
off£t
;

136 
	}
}

138 
	$upd©e
(
¥ötbuf„r
 *
p
)

140 *
°r
;

141 i‡(!
p
 || !p->
buf„r
)  0;

142 
°r
=
p
->
buf„r
+p->
off£t
;

143  
p
->
off£t
+
	`°æí
(
°r
);

144 
	}
}

147 *
	$¥öt_numbî
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
)

149 *
°r
=0;

150 
d
=
ôem
->
vÆuedoubÀ
;

151 i‡(
d
==0)

153 i‡(
p
Ë
°r
=
	`ísuª
(p,2);

154 
°r
=(*)
	`cJSON_mÆloc
(2);

155 i‡(
°r
Ë
	`°r˝y
(str,"0");

157 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

159 i‡(
p
Ë
°r
=
	`ísuª
(p,21);

160 
°r
=(*)
	`cJSON_mÆloc
(21);

161 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

165 i‡(
p
Ë
°r
=
	`ísuª
(p,64);

166 
°r
=(*)
	`cJSON_mÆloc
(64);

167 i‡(
°r
)

169 i‡(
	`Ábs
(
	`Êo‹
(
d
)-d)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

170 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

171 
	`•rötf
(
°r
,"%f",
d
);

174  
°r
;

175 
	}
}

177 
	$∑r£_hex4
(c⁄° *
°r
)

179 
h
=0;

180 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

181 
h
=h<<4;
°r
++;

182 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

183 
h
=h<<4;
°r
++;

184 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

185 
h
=h<<4;
°r
++;

186 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

187  
h
;

188 
	}
}

191 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

192 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

194 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

195 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

197 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

199 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

200 i‡(!
out
)  0;

202 
±r
=
°r
+1;
±r2
=
out
;

203 *
±r
!='\"' && *ptr)

205 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

208 
±r
++;

209 *
±r
)

211 'b': *
±r2
++='\b'; ;

212 'f': *
±r2
++='\f'; ;

213 'n': *
±r2
++='\n'; ;

214 'r': *
±r2
++='\r'; ;

215 't': *
±r2
++='\t'; ;

217 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

219 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

221 i‡(
uc
>=0xD800 && uc<=0xDBFF)

223 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

224 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

225 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

226 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

229 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

231 
Àn
) {

232 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

233 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

234 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

235 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

237 
±r2
+=
Àn
;

239 : *
±r2
++=*
±r
; ;

241 
±r
++;

244 *
±r2
=0;

245 i‡(*
±r
=='\"')Ötr++;

246 
ôem
->
vÆue°rög
=
out
;

247 
ôem
->
ty≥
=
cJSON_Såög
;

248  
±r
;

249 
	}
}

252 *
	$¥öt_°rög_±r
(c⁄° *
°r
,
¥ötbuf„r
 *
p
)

254 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0,
Êag
=0;
tokí
;

256 
±r
=
°r
;*±r;±r++Ë
Êag
|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;

257 i‡(!
Êag
)

259 
Àn
=
±r
-
°r
;

260 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

261 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

262 i‡(!
out
)  0;

263 
±r2
=
out
;*ptr2++='\"';

264 
	`°r˝y
(
±r2
,
°r
);

265 
±r2
[
Àn
]='\"';

266 
±r2
[
Àn
+1]=0;

267  
out
;

270 i‡(!
°r
)

272 i‡(
p
Ë
out
=
	`ísuª
(p,3);

273 
out
=(*)
	`cJSON_mÆloc
(3);

274 i‡(!
out
)  0;

275 
	`°r˝y
(
out
,"\"\"");

276  
out
;

278 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

280 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

281 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

282 i‡(!
out
)  0;

284 
±r2
=
out
;
±r
=
°r
;

285 *
±r2
++='\"';

286 *
±r
)

288 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

291 *
±r2
++='\\';

292 
tokí
=*
±r
++)

294 '\\': *
±r2
++='\\'; ;

295 '\"': *
±r2
++='\"'; ;

296 '\b': *
±r2
++='b'; ;

297 '\f': *
±r2
++='f'; ;

298 '\n': *
±r2
++='n'; ;

299 '\r': *
±r2
++='r'; ;

300 '\t': *
±r2
++='t'; ;

301 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

305 *
±r2
++='\"';*ptr2++=0;

306  
out
;

307 
	}
}

309 *
	$¥öt_°rög
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
,p);
	}
}

312 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

313 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

314 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

315 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

316 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

317 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

320 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

323 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

325 c⁄° *
íd
=0;

326 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

327 
ï
=0;

328 i‡(!
c
)  0;

330 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

331 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

334 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

335 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

336  
c
;

337 
	}
}

339 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

342 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1,0);
	}
}

343 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0,0);
	}
}

345 *
	$cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
)

347 
¥ötbuf„r
 
p
;

348 
p
.
buf„r
=(*)
	`cJSON_mÆloc
(
¥ebuf„r
);

349 
p
.
Àngth
=
¥ebuf„r
;

350 
p
.
off£t
=0;

351  
	`¥öt_vÆue
(
ôem
,0,
fmt
,&
p
);

352  
p
.
buf„r
;

353 
	}
}

357 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

359 i‡(!
vÆue
)  0;

360 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

361 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

362 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

363 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

364 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

365 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

366 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

368 
ï
=
vÆue
; 0;

369 
	}
}

372 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

374 *
out
=0;

375 i‡(!
ôem
)  0;

376 i‡(
p
)

378 (
ôem
->
ty≥
)&255)

380 
cJSON_NULL
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"null"); ;}

381 
cJSON_FÆ£
: {
out
=
	`ísuª
(
p
,6); i‡(outË
	`°r˝y
(out,"false"); ;}

382 
cJSON_True
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"true"); ;}

383 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,
p
);;

384 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,
p
);;

385 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,
p
);;

386 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,
p
);;

391 (
ôem
->
ty≥
)&255)

393 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

394 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

395 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

396 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,0);;

397 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,0);;

398 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,0);;

399 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,0);;

402  
out
;

403 
	}
}

406 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

408 
cJSON
 *
chûd
;

409 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

411 
ôem
->
ty≥
=
cJSON_Aºay
;

412 
vÆue
=
	`skù
(value+1);

413 i‡(*
vÆue
==']')  value+1;

415 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

416 i‡(!
ôem
->
chûd
)  0;

417 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

418 i‡(!
vÆue
)  0;

420 *
vÆue
==',')

422 
cJSON
 *
√w_ôem
;

423 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

424 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

425 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

426 i‡(!
vÆue
)  0;

429 i‡(*
vÆue
==']')  value+1;

430 
ï
=
vÆue
; 0;

431 
	}
}

434 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

436 **
íåõs
;

437 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

438 
cJSON
 *
chûd
=
ôem
->child;

439 
numíåõs
=0,
i
=0,
Áû
=0;

440 
size_t
 
tm∂í
=0;

443 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

445 i‡(!
numíåõs
)

447 i‡(
p
Ë
out
=
	`ísuª
(p,3);

448 
out
=(*)
	`cJSON_mÆloc
(3);

449 i‡(
out
Ë
	`°r˝y
(out,"[]");

450  
out
;

453 i‡(
p
)

456 
i
=
p
->
off£t
;

457 
±r
=
	`ísuª
(
p
,1);i‡(!±rË 0; *±r='[';Ö->
off£t
++;

458 
chûd
=
ôem
->child;

459 
chûd
 && !
Áû
)

461 
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,
p
);

462 
p
->
off£t
=
	`upd©e
(p);

463 i‡(
chûd
->
√xt
Ë{
Àn
=
fmt
?2:1;
±r
=
	`ísuª
(
p
,Àn+1);i‡(!±rË 0;*±r++=',';if(fmt)*±r++=' ';*±r=0;p->
off£t
+=len;}

464 
chûd
=chûd->
√xt
;

466 
±r
=
	`ísuª
(
p
,2);if (!ptr)  0; *ptr++=']';*ptr=0;

467 
out
=(
p
->
buf„r
)+
i
;

472 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

473 i‡(!
íåõs
)  0;

474 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

476 
chûd
=
ôem
->child;

477 
chûd
 && !
Áû
)

479 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,0);

480 
íåõs
[
i
++]=
ªt
;

481 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

482 
chûd
=chûd->
√xt
;

486 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

488 i‡(!
out
Ë
Áû
=1;

491 i‡(
Áû
)

493 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

494 
	`cJSON_‰ì
(
íåõs
);

499 *
out
='[';

500 
±r
=
out
+1;*ptr=0;

501 
i
=0;i<
numíåõs
;i++)

503 
tm∂í
=
	`°æí
(
íåõs
[
i
]);
	`mem˝y
(
±r
,entries[i],tmplen);ptr+=tmplen;

504 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

505 
	`cJSON_‰ì
(
íåõs
[
i
]);

507 
	`cJSON_‰ì
(
íåõs
);

508 *
±r
++=']';*ptr++=0;

510  
out
;

511 
	}
}

514 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

516 
cJSON
 *
chûd
;

517 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

519 
ôem
->
ty≥
=
cJSON_Obje˘
;

520 
vÆue
=
	`skù
(value+1);

521 i‡(*
vÆue
=='}')  value+1;

523 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

524 i‡(!
ôem
->
chûd
)  0;

525 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

526 i‡(!
vÆue
)  0;

527 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

528 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

529 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

530 i‡(!
vÆue
)  0;

532 *
vÆue
==',')

534 
cJSON
 *
√w_ôem
;

535 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

536 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

537 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

538 i‡(!
vÆue
)  0;

539 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

540 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

541 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

542 i‡(!
vÆue
)  0;

545 i‡(*
vÆue
=='}')  value+1;

546 
ï
=
vÆue
; 0;

547 
	}
}

550 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

552 **
íåõs
=0,**
«mes
=0;

553 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

554 
cJSON
 *
chûd
=
ôem
->child;

555 
numíåõs
=0,
Áû
=0;

556 
size_t
 
tm∂í
=0;

558 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

560 i‡(!
numíåõs
)

562 i‡(
p
Ë
out
=
	`ísuª
’,
fmt
?
dïth
+4:3);

563 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

564 i‡(!
out
)  0;

565 
±r
=
out
;*ptr++='{';

566 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

567 *
±r
++='}';*ptr++=0;

568  
out
;

570 i‡(
p
)

573 
i
=
p
->
off£t
;

574 
Àn
=
fmt
?2:1; 
±r
=
	`ísuª
(
p
,len+1); if (!ptr)  0;

575 *
±r
++='{'; i‡(
fmt
Ë*±r++='\n'; *±r=0; 
p
->
off£t
+=
Àn
;

576 
chûd
=
ôem
->chûd;
dïth
++;

577 
chûd
)

579 i‡(
fmt
)

581 
±r
=
	`ísuª
(
p
,
dïth
); if (!ptr)  0;

582 
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

583 
p
->
off£t
+=
dïth
;

585 
	`¥öt_°rög_±r
(
chûd
->
°rög
,
p
);

586 
p
->
off£t
=
	`upd©e
(p);

588 
Àn
=
fmt
?2:1;

589 
±r
=
	`ísuª
(
p
,
Àn
); if (!ptr)  0;

590 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

591 
p
->
off£t
+=
Àn
;

593 
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,
p
);

594 
p
->
off£t
=
	`upd©e
(p);

596 
Àn
=(
fmt
?1:0)+(
chûd
->
√xt
?1:0);

597 
±r
=
	`ísuª
(
p
,
Àn
+1); if (!ptr)  0;

598 i‡(
chûd
->
√xt
Ë*
±r
++=',';

599 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

600 
p
->
off£t
+=
Àn
;

601 
chûd
=chûd->
√xt
;

603 
±r
=
	`ísuª
(
p
,
fmt
?(
dïth
+1):2); if (!ptr)  0;

604 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

605 *
±r
++='}';*ptr=0;

606 
out
=(
p
->
buf„r
)+
i
;

611 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

612 i‡(!
íåõs
)  0;

613 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

614 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

615 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

616 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

619 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

620 
chûd
)

622 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
,0);

623 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,0);

624 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

625 
chûd
=chûd->
√xt
;

629 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

630 i‡(!
out
Ë
Áû
=1;

633 i‡(
Áû
)

635 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

636 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

641 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

642 
i
=0;i<
numíåõs
;i++)

644 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

645 
tm∂í
=
	`°æí
(
«mes
[
i
]);
	`mem˝y
(
±r
,names[i],tmplen);ptr+=tmplen;

646 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

647 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

648 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

649 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

650 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

653 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

654 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

655 *
±r
++='}';*ptr++=0;

657  
out
;

658 
	}
}

661 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

662 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

663 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

666 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

668 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

671 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

672 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

673 
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(!(ôem->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& iãm->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=(*)°rög;ôem->ty≥|=cJSON_SåögIsC⁄°;
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

674 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

675 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

677 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

678 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

679 
cJSON
 *
	$cJSON_DëachIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
) {

680 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

681 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

682 
	$cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay2
◊ºay,c));
	}
}

683 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

684 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

687 
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;i‡(!cË{
	`cJSON_AddIãmToAºay
(array,newitem);;}

688 
√wôem
->
√xt
=
c
;√wôem->
¥ev
=c->¥ev;c->¥evÚewôem;i‡(c==
¨øy
->
chûd
Ë¨øy->chûdÚewôem; √wôem->¥ev->√xtÚewôem;
	}
}

689 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

690 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

691 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

692 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

695 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

696 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

697 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

698 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

699 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

700 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

701 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

702 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

705 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

706 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

707 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

708 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

711 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

713 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

715 i‡(!
ôem
)  0;

717 
√wôem
=
	`cJSON_New_Iãm
();

718 i‡(!
√wôem
)  0;

720 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

721 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

722 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

724 i‡(!
ªcur£
Ë 
√wôem
;

726 
˝å
=
ôem
->
chûd
;

727 
˝å
)

729 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

730 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

731 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

732 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

733 
˝å
=˝å->
√xt
;

735  
√wôem
;

736 
	}
}

738 
	$cJSON_Möify
(*
js⁄
)

740 *
öto
=
js⁄
;

741 *
js⁄
)

743 i‡(*
js⁄
==' ') json++;

744 i‡(*
js⁄
=='\t') json++;

745 i‡(*
js⁄
=='\r') json++;

746 i‡(*
js⁄
=='\n') json++;

747 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

748 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

749 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

750 *
öto
++=*
js⁄
++;

752 *
öto
=0;

753 
	}
}

	@vppnconfig/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

40 
	#cJSON_IsRe„ªn˚
 256

	)

41 
	#cJSON_SåögIsC⁄°
 512

	)

44 
	scJSON
 {

45 
cJSON
 *
√xt
,*
¥ev
;

46 
cJSON
 *
chûd
;

48 
ty≥
;

50 *
vÆue°rög
;

51 
vÆueöt
;

52 
vÆuedoubÀ
;

54 *
°rög
;

55 } 
	tcJSON
;

57 
	scJSON_Hooks
 {

58 *(*
mÆloc_‚
)(
size_t
 
sz
);

59 (*
‰ì_‚
)(*
±r
);

60 } 
	tcJSON_Hooks
;

63 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

67 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

69 *
cJSON_Pröt
(
cJSON
 *
ôem
);

71 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

73 *
cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
);

75 
cJSON_Dñëe
(
cJSON
 *
c
);

78 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

80 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

82 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

85 c⁄° *
cJSON_GëEº‹På
();

88 
cJSON
 *
cJSON_Cª©eNuŒ
();

89 
cJSON
 *
cJSON_Cª©eTrue
();

90 
cJSON
 *
cJSON_Cª©eFÆ£
();

91 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

92 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

93 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

94 
cJSON
 *
cJSON_Cª©eAºay
();

95 
cJSON
 *
cJSON_Cª©eObje˘
();

98 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

99 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

100 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

101 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

104 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

105 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

106 
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

108 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

109 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

112 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

113 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

114 
cJSON_DñëeIãmFromAºay2
(
cJSON
 *
¨øy
, cJSON *
c
);

115 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

116 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

119 
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

120 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

121 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

124 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

130 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

132 
cJSON_Möify
(*
js⁄
);

135 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

136 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

137 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

138 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

139 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

140 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

143 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

144 
	#cJSON_SëNumbîVÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

146 #ifde‡
__˝lu•lus


	@vppnconfig/file_tool.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<löux/io˘l.h
>

4 
	~<löux/°©.h
>

5 
	~<f˙é.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<uni°d.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~"fûe_toﬁ.h
"

13 
	$gë_fûe_Àn
(*
fûe_«me
)

15 
ªt
 = -1;

16 
°©
 
fûe_°©
;

17 
ªt
 = 
	`°©
(
fûe_«me
, &
fûe_°©
);

18 i‡(
ªt
 == 0)

20 
ªt
 = 
fûe_°©
.
°_size
;

22  
ªt
;

23 
	}
}

25 *
	$ªad_ãxt
(*
fûe_«me
)

27 *
ªt_±r
 = 
NULL
;

28 
fûe_Àn
 = 
	`gë_fûe_Àn
(
fûe_«me
);

29 i‡(
fûe_Àn
 > 0)

31 
fd
 = 
	`›í
(
fûe_«me
, 
O_RDONLY
);

32 i‡(
fd
 > 0)

34 
ªt_±r
 = 
	`mÆloc
(
fûe_Àn
 + 1);

35 
	`ªad
(
fd
, 
ªt_±r
, 
fûe_Àn
);

36 
ªt_±r
[
fûe_Àn
] = 0;

37 
	`˛o£
(
fd
);

40  
ªt_±r
;

41 
	}
}

43 
	$wrôe_fûe
(*
fûe_«me
, 
mode
, *
buf
, 
size
)

45 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 
mode
);

46 i‡(
fd
 > 0)

48 
	`wrôe
(
fd
, 
buf
, 
size
);

49 
	`˛o£
(
fd
);

52 
	}
}

54 
	$wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
)

56 
	`wrôe_fûe
(
fûe_«me
, 0644, 
c⁄ã¡
, 
	`°æí
(content));

58 
	}
}

60 
cJSON
 *
	$ªad_js⁄_‰om_fûe
(*
fûe_«me
)

62 
cJSON
 *
±r
 = 
NULL
;

63 *
ãxt
 = 
	`ªad_ãxt
(
fûe_«me
);

64 i‡(
ãxt
)

66 
±r
 = 
	`cJSON_P¨£
(
ãxt
);

67 
	`‰ì
(
ãxt
);

69  
±r
;

70 
	}
}

72 
	$wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
)

74 *
°r
 = 
	`cJSON_Pröt
(
js⁄
);

75 i‡(
°r
)

77 
	`wrôe_ãxt
(
fûe_«me
, 
°r
);

78 
	`‰ì
(
°r
);

81 
	}
}

83 
	$wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
)

85 
	`wrôe_fûe
(
fûe_«me
, 0755, 
c⁄ã¡
, 
	`°æí
(content));

87 
	}
}

89 
	$≠≥nd_löe
(*
fûe_«me
, *
löe
)

91 
fd
 = 
	`›í
(
fûe_«me
, 
O_CREAT
 | 
O_APPEND
 | 
O_WRONLY
);

92 i‡(
fd
 > 0)

94 
	`wrôe
(
fd
, 
löe
, 
	`°æí
(line));

95 
	`˛o£
(
fd
);

98 
	}
}

103 
	$fûe_toﬁ_föd_dú
(*
∑th
)

105 
ªt
 = 0;

106 
°©
 
fûe_°©
;

107 
°©_ªt
 = 
	`°©
(
∑th
, &
fûe_°©
);

108 i‡(
°©_ªt
 == 0)

110 
mode_t
 
∑th_mode
 = 
fûe_°©
.
°_mode
;

111 i‡(
	`S_ISDIR
(
∑th_mode
))

113 
ªt
 = 1;

117 
ªt
 = -1;

120  
ªt
;

122 
	}
}

124 
	$fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
)

126 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

127 i‡(
föd
 == 0)

129 
	`mkdú
(
∑th
, 
mode
);

132 
	}
}

134 
	$fûe_toﬁ_ªmove_dú
(*
∑th
)

136 
föd
 = 
	`fûe_toﬁ_föd_dú
(
∑th
);

137 i‡(
föd
 == 1)

140 
	`rmdú
(
∑th
);

143 
	}
}

	@vppnconfig/file_tool.h

1 #i‚de‡
_FILE_TOOL_H_


2 
	#_FILE_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~"cJSON.h
"

7 *
ªad_ãxt
(*
fûe_«me
);

8 
wrôe_ãxt
(*
fûe_«me
, *
c⁄ã¡
);

9 
wrôe_shñl
(*
fûe_«me
, *
c⁄ã¡
);

10 
≠≥nd_löe
(*
fûe_«me
, *
löe
);

13 
wrôe_js⁄_to_fûe
(*
fûe_«me
, 
cJSON
 *
js⁄
);

14 
cJSON
 *
ªad_js⁄_‰om_fûe
(*
fûe_«me
);

16 
fûe_toﬁ_¸óã_dú
(*
∑th
, 
mode
);

17 
fûe_toﬁ_ªmove_dú
(*
∑th
);

	@vppnconfig/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

8 
	~"nvøm-comm⁄.h
"

9 
	~"nvøm-›.h
"

10 
	~"cJSON.h
"

11 
	~"fûe_toﬁ.h
"

12 
	~"√t_toﬁ.h
"

14 #i‚de‡
FREE_PTR


15 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

18 
	eVPN_Ty≥


20 
	mTYPE_VPN
,

21 
	mTYPE_VPPN


24 
	$dump_JSON
(
cJSON
 *
roŸ
)

26 i‡(
roŸ
)

28 *
±r
 = 
	`cJSON_Pröt
(
roŸ
);

29 i‡(
±r
)

31 
	`¥ötf
("%s\n", 
±r
);

32 
	`‰ì
(
±r
);

36 
	}
}

38 
	$gë_fûe_by_id
(*
fmt
, 
id
, *
ªt_buf
)

40 
	`•rötf
(
ªt_buf
, 
fmt
, 
id
);

42 
	}
}

44 *
	$my_°rˇt
(*
°r1
, *
°r2
)

46 *
ªt
 = 
NULL
;

47 
ªt_Àn
;

48 
°r1_Àn
 = (
°r1
?
	`°æí
(str1):0);

50 
ªt_Àn
 = 
°r1_Àn
 + 
	`°æí
(
°r2
) + strlen(":") + 1;

51 
ªt
 = 
	`ªÆloc
(
°r1
, 
ªt_Àn
);

52 i‡(!
°r1_Àn
)

54 
ªt
[0] = 0;

58 
	`°rˇt
(
ªt
, ":");

60 
	`°rˇt
(
ªt
, 
°r2
);

61  
ªt
;

62 
	}
}

65 
	$run_ö_nodebug
()

67 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

68 i‡(
fd
 > 0)

70 
	`dup2
(2, 
fd
);

71 
	`dup2
(1, 
fd
);

73 
	}
}

75 
	$lﬂd_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
id
)

77 
c⁄f_tu¬ñ_⁄
[100];

81 
c⁄f_tu¬ñ_ãamid
[100];

82 
c⁄f_tu¬ñ_fûe
[100];

83 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

85 
	`•rötf
(
c⁄f_tu¬ñ_⁄
, "v≤%d_íabÀ", 
id
);

89 
	`•rötf
(
c⁄f_tu¬ñ_ãamid
, "v≤%d_ãamid", 
id
);

90 
	`•rötf
(
c⁄f_tu¬ñ_fûe
, "/ëc/v≤/v≤%d.c⁄f", 
id
);

94 
	`•rötf
(
c⁄f_tu¬ñ_⁄
, "sôe%d_⁄", 
id
);

98 
	`•rötf
(
c⁄f_tu¬ñ_ãamid
, "sôe%d_ãamid", 
id
);

99 
	`•rötf
(
c⁄f_tu¬ñ_fûe
, "/ëc/sôe/sôe%d.c⁄f", 
id
);

101 *
tu¬ñ_⁄
 = 
	`GëC⁄fig
(
c⁄f_tu¬ñ_⁄
);

105 *
tu¬ñ_ãamid
 = 
	`GëC⁄fig
(
c⁄f_tu¬ñ_ãamid
);

106 
cJSON
 *
obj
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_tu¬ñ_fûe
);

107 i‡(
obj
)

109 i‡(
tu¬ñ_⁄
 &&Åunnel_on[0])

111 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, "⁄", 
	`cJSON_Cª©eNumbî
(
	`©oi
(
tu¬ñ_⁄
)));

113 i‡(
tu¬ñ_ãamid
 &&Åunnel_teamid[0])

115 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, "ãam_id", 
	`cJSON_Cª©eSåög
(
tu¬ñ_ãamid
));

118 i‡(
tu¬ñ_£rvî
 &&Åunnel_server[0])

120 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, "£rvî_addr", 
	`cJSON_Cª©eSåög
(
tu¬ñ_£rvî
));

122 i‡(
tu¬ñ_£rvî_p‹t
 &&Åunnel_server_port[0])

124 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, "£rvî_p‹t", 
	`cJSON_Cª©eNumbî
(
	`©oi
(
tu¬ñ_£rvî_p‹t
)));

126 i‡(
tu¬ñ_£lf
 &&Åunnel_self[0])

128 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, "my£lf_addr", 
	`cJSON_Cª©eSåög
(
tu¬ñ_£lf
));

134 
obj
 = 
	`cJSON_Cª©eObje˘
();

135 i‡(
tu¬ñ_⁄
 &&Åunnel_on[0])

137 
	`cJSON_AddNumbîToObje˘
(
obj
, "⁄", 
	`©oi
(
tu¬ñ_⁄
));

141 
	`cJSON_AddNumbîToObje˘
(
obj
, "on", 0);

143 i‡(
tu¬ñ_ãamid
 &&Åunnel_teamid[0])

145 
	`cJSON_AddSåögToObje˘
(
obj
, "ãam_id", 
tu¬ñ_ãamid
);

149 
	`cJSON_AddSåögToObje˘
(
obj
, "team_id", "");

153 i‡(
tu¬ñ_£rvî
 &&Åunnel_server[0])

155 
	`cJSON_AddSåögToObje˘
(
obj
, "£rvî_addr", 
tu¬ñ_£rvî
);

159 
	`cJSON_AddSåögToObje˘
(
obj
, "server_addr", "");

162 i‡(
tu¬ñ_£rvî_p‹t
 &&Åunnel_server_port[0])

164 
	`cJSON_AddNumbîToObje˘
(
obj
, "£rvî_p‹t", 
	`©oi
(
tu¬ñ_£rvî_p‹t
));

168 
	`cJSON_AddNumbîToObje˘
(
obj
, "server_port", 0);

170 i‡(
tu¬ñ_£lf
 &&Åunnel_self[0])

172 
	`cJSON_AddSåögToObje˘
(
obj
, "my£lf_addr", 
tu¬ñ_£lf
);

176 
	`cJSON_AddSåögToObje˘
(
obj
, "server_addr", "");

181 
	`wrôe_js⁄_to_fûe
(
c⁄f_tu¬ñ_fûe
, 
obj
);

182 
	`cJSON_Dñëe
(
obj
);

183 
	`FREE_PTR
(
tu¬ñ_⁄
);

185 
	`FREE_PTR
(
tu¬ñ_£rvî
);

186 
	`FREE_PTR
(
tu¬ñ_£rvî_p‹t
);

187 
	`FREE_PTR
(
tu¬ñ_£lf
);

188 
	`FREE_PTR
(
tu¬ñ_ãamid
);

189 
	`FREE_PTR
(
tu¬ñ_£rvî
);

192 
	}
}

194 
	$ßve_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
id
)

196 
c⁄f_tu¬ñ_⁄
[100];

197 
c⁄f_tu¬ñ_ãamid
[100];

198 
c⁄f_tu¬ñ_fûe
[100];

200 
c⁄f_tu¬ñ_£rvî
[100];

201 
c⁄f_tu¬ñ_£rvî_p‹t
[100];

202 
c⁄f_tu¬ñ_£lf
[100];

204 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

206 
	`•rötf
(
c⁄f_tu¬ñ_⁄
, "v≤%d_íabÀ", 
id
);

207 
	`•rötf
(
c⁄f_tu¬ñ_ãamid
, "v≤%d_ãamid", 
id
);

209 
	`•rötf
(
c⁄f_tu¬ñ_£rvî
, "v≤%d_£rvî", 
id
);

210 
	`•rötf
(
c⁄f_tu¬ñ_£rvî_p‹t
, "v≤%d_£rvî_p‹t", 
id
);

211 
	`•rötf
(
c⁄f_tu¬ñ_£lf
, "v≤%d_£lf", 
id
);

213 
	`•rötf
(
c⁄f_tu¬ñ_fûe
, "/ëc/v≤/v≤%d.c⁄f", 
id
);

217 
	`•rötf
(
c⁄f_tu¬ñ_⁄
, "sôe%d_⁄", 
id
);

218 
	`•rötf
(
c⁄f_tu¬ñ_ãamid
, "sôe%d_ãamid", 
id
);

220 
	`•rötf
(
c⁄f_tu¬ñ_£rvî
, "sôe%d_£rvî", 
id
);

221 
	`•rötf
(
c⁄f_tu¬ñ_£rvî_p‹t
, "sôe%d_£rvî_p‹t", 
id
);

222 
	`•rötf
(
c⁄f_tu¬ñ_£lf
, "sôe%d_£lf", 
id
);

224 
	`•rötf
(
c⁄f_tu¬ñ_fûe
, "/ëc/sôe/sôe%d.c⁄f", 
id
);

228 
tu¬ñ_⁄
[100] = "0";

229 
tu¬ñ_ãamid
[100]="";

231 
tu¬ñ_£rvî
[100]="";

232 
tu¬ñ_£rvî_p‹t
[100]="";

233 
tu¬ñ_£lf
[100]="";

235 
cJSON
 *
obj
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_tu¬ñ_fûe
);

236 i‡(
obj
)

238 
cJSON
 *
⁄_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "on");

239 
cJSON
 *
ãamid_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "team_id");

241 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "server_addr");

242 
cJSON
 *
£rvî_p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "server_port");

243 
cJSON
 *
£lf_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "myself_addr");

245 i‡(
⁄_ôem
)

247 
	`•rötf
(
tu¬ñ_⁄
, "%d", 
⁄_ôem
->
vÆueöt
);

249 i‡(
ãamid_ôem
)

251 
	`•rötf
(
tu¬ñ_ãamid
, "%s", 
ãamid_ôem
->
vÆue°rög
);

254 i‡(
£rvî_ôem
)

256 
	`•rötf
(
tu¬ñ_£rvî
, "%s", 
£rvî_ôem
->
vÆue°rög
);

259 i‡(
£rvî_p‹t_ôem
)

261 
	`•rötf
(
tu¬ñ_£rvî_p‹t
, "%d", 
£rvî_p‹t_ôem
->
vÆueöt
);

264 i‡(
£lf_ôem
)

266 
	`•rötf
(
tu¬ñ_£lf
, "%s", 
£lf_ôem
->
vÆue°rög
);

269 
	`cJSON_Dñëe
(
obj
);

272 
	`SëC⁄fig
(
c⁄f_tu¬ñ_⁄
, 
tu¬ñ_⁄
);

273 
	`SëC⁄fig
(
c⁄f_tu¬ñ_ãamid
, 
tu¬ñ_ãamid
);

275 
	`SëC⁄fig
(
c⁄f_tu¬ñ_£rvî
, 
tu¬ñ_£rvî
);

276 
	`SëC⁄fig
(
c⁄f_tu¬ñ_£rvî_p‹t
, 
tu¬ñ_£rvî_p‹t
);

277 
	`SëC⁄fig
(
c⁄f_tu¬ñ_£lf
, 
tu¬ñ_£lf
);

280 
	}
}

282 
	$lﬂd_m™agî
(
c⁄f_ty≥
)

284 
c⁄f_m™agî_ho°
[100];

285 
c⁄f_m™agî_p‹t
[100];

286 
c⁄f_m™agî_fûe
[100];

287 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

289 
	`•rötf
(
c⁄f_m™agî_ho°
, "vpn_manager_host");

290 
	`•rötf
(
c⁄f_m™agî_p‹t
, "vpn_manager_port");

291 
	`•rötf
(
c⁄f_m™agî_fûe
, "/etc/vpn/manager");

295 
	`•rötf
(
c⁄f_m™agî_ho°
, "vppn_manager_host");

296 
	`•rötf
(
c⁄f_m™agî_p‹t
, "vppn_manager_port");

297 
	`•rötf
(
c⁄f_m™agî_fûe
, "/etc/site/manager");

300 *
ho°
 = 
	`GëC⁄fig
(
c⁄f_m™agî_ho°
);

301 *
p‹t
 = 
	`GëC⁄fig
(
c⁄f_m™agî_p‹t
);

302 
cJSON
 *
obj
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_m™agî_fûe
);

303 i‡(
obj
)

305 i‡(
ho°
 && host[0])

307 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, 
CLOUD_HOST
, 
	`cJSON_Cª©eSåög
(
ho°
));

309 i‡(
p‹t
 &&Öort[0])

311 
p‹t_num
 = 
	`©oi
(
p‹t
);

312 
	`cJSON_Rïœ˚IãmInObje˘
(
obj
, 
CLOUD_PORT
, 
	`cJSON_Cª©eNumbî
(
p‹t_num
));

314 
	`wrôe_js⁄_to_fûe
(
FILE_SITE_MANAGER
, 
obj
);

315 
	`cJSON_Dñëe
(
obj
);

322 
	`FREE_PTR
(
ho°
);

323 
	`FREE_PTR
(
p‹t
);

325 
	}
}

327 
	$ßve_m™agî
(
c⁄f_ty≥
)

329 
c⁄f_m™agî_ho°
[100];

330 
c⁄f_m™agî_p‹t
[100];

331 
c⁄f_m™agî_fûe
[100];

332 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

334 
	`•rötf
(
c⁄f_m™agî_ho°
, "vpn_manager_host");

335 
	`•rötf
(
c⁄f_m™agî_p‹t
, "vpn_manager_port");

336 
	`•rötf
(
c⁄f_m™agî_fûe
, "/etc/vpn/manager");

340 
	`•rötf
(
c⁄f_m™agî_ho°
, "vppn_manager_host");

341 
	`•rötf
(
c⁄f_m™agî_p‹t
, "vppn_manager_port");

342 
	`•rötf
(
c⁄f_m™agî_fûe
, "/etc/site/manager");

345 
cJSON
 *
obj
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_m™agî_fûe
);

346 i‡(
obj
)

348 
cJSON
 *
ho°_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, 
CLOUD_HOST
);

349 i‡(
ho°_ôem
)

351 
	`SëC⁄fig
(
c⁄f_m™agî_ho°
, 
ho°_ôem
->
vÆue°rög
);

353 
cJSON
 *
p‹t_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, 
CLOUD_PORT
);

354 i‡(
p‹t_ôem
)

356 
buf
[100];

357 
	`•rötf
(
buf
, "%d", 
p‹t_ôem
->
vÆueöt
);

358 
	`SëC⁄fig
(
c⁄f_m™agî_p‹t
, 
buf
);

360 
	`cJSON_Dñëe
(
obj
);

363 
	}
}

365 
cJSON
 *
	$∑r£_tu¬ñ_≥îs
(*
±r
)

367 *
ßve_±r1
 = 
NULL
;

368 *
°r1
;

369 *
tokí
;

371 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

372 i‡(
±r
 &&Ötr[0])

374 
°r1
 = 
±r
; ; så1 = 
NULL
)

376 
tokí
 = 
	`°πok_r
(
°r1
, ":", &
ßve_±r1
);

377 i‡(
tokí
 =
NULL
)

381 *
£∑øt‹
 = 
	`°rchr
(
tokí
, '@');

382 *
£∑øt‹
 = 0;

383 *
≥î_vù
 = 
tokí
;

384 *
≥î_£rvî
 = ++
£∑øt‹
;

385 
cJSON
 *
obj
 = 
	`cJSON_Cª©eObje˘
();

386 
	`cJSON_AddSåögToObje˘
(
obj
, "≥î_vù", 
≥î_vù
);

387 
	`cJSON_AddSåögToObje˘
(
obj
, "≥î_£rvî", 
≥î_£rvî
);

388 
	`cJSON_AddIãmToAºay
(
ªt
, 
obj
);

391  
ªt
;

392 
	}
}

394 
	$£t_≥î_˙t
(
id
, 
˙t
)

396 
c⁄f_≥î
[100];

397 
c⁄f_≥î_buf
[100];

398 
	`•rötf
(
c⁄f_≥î
, "vµn_≥î%d_˙t", 
id
);

399 
	`•rötf
(
c⁄f_≥î_buf
, "%d", 
˙t
);

400 
	`SëC⁄fig
(
c⁄f_≥î
, 
c⁄f_≥î_buf
);

402 
	}
}

404 
	$gë_≥î_˙t
(
id
)

406 
ªt
 = 0;

407 
c⁄f_≥î
[100];

408 
	`•rötf
(
c⁄f_≥î
, "vµn_≥î%d_˙t", 
id
);

409 *
c⁄f_±r
 = 
	`GëC⁄fig
(
c⁄f_≥î
);

410 i‡(
c⁄f_±r
)

412 
ªt
 = 
	`©oi
(
c⁄f_±r
);

413 
	`‰ì
(
c⁄f_±r
);

415  
ªt
;

416 
	}
}

418 
cJSON
 *
	$gë_≥î_c⁄f
(
tu¬ñ_id
, 
ödex
)

420 *
±r
 = 
NULL
;

421 
cJSON
 *
obj
 = 
NULL
;

422 
c⁄f_≥î
[100];

423 
	`•rötf
(
c⁄f_≥î
, "vµn_≥î%d_ôem%d", 
tu¬ñ_id
, 
ödex
);

424 
±r
 = 
	`GëC⁄fig
(
c⁄f_≥î
);

425 i‡(
±r
)

427 * 
£p
 = 
	`°rchr
(
±r
, '@');

428 *
£p
 = 0;

429 * 
ãam_id
 = 
£p
+1;

430 *
≥î_vù
 = 
±r
;

431 
obj
 = 
	`cJSON_Cª©eObje˘
();

432 
	`cJSON_AddSåögToObje˘
(
obj
, "≥î_vù", 
≥î_vù
);

433 
	`cJSON_AddSåögToObje˘
(
obj
, "≥î_ãamid", 
ãam_id
);

434 
	`‰ì
(
±r
);

436  
obj
;

437 
	}
}

439 
	$£t_≥î_c⁄f
(
tu¬ñ_id
, 
ödex
, 
cJSON
 *
≥î
)

441 
c⁄f_≥î
[100];

442 
	`•rötf
(
c⁄f_≥î
, "vµn_≥î%d_ôem%d", 
tu¬ñ_id
, 
ödex
);

443 *
°r
 = 
NULL
;

444 
cJSON
 *
vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_vip");

446 
°r
 = 
	`mÆloc
(
	`°æí
(
vù_ôem
->
vÆue°rög
) + 1);

447 i‡(
°r
)

449 
°r
[0] = 0;

450 
	`°r˝y
(
°r
, 
vù_ôem
->
vÆue°rög
);

451 i‡(
	`°æí
(
°r
) <= 100)

453 
	`SëC⁄fig
(
c⁄f_≥î
, 
°r
);

457 
	`Un£tC⁄fig
(
c⁄f_≥î
);

459 
	`‰ì
(
°r
);

462 
	}
}

464 
	$lﬂd_≥î_c⁄f2
(
c⁄f_ty≥
, 
id
)

466 
≥î_˙t
 = 
	`gë_≥î_˙t
(
id
);

467 
i
;

468 
c⁄f_≥î_fûe
[100];

469 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

470 
cJSON
 *
¨øy
 = 
	`cJSON_Cª©eAºay
();

471 
i
 = 0; i < 
≥î_˙t
; i++)

473 
cJSON
 *
obj
 = 
	`gë_≥î_c⁄f
(
id
, 
i
);

474 i‡(
obj
)

476 
	`cJSON_AddIãmToAºay
(
¨øy
, 
obj
);

479 
	`wrôe_js⁄_to_fûe
(
c⁄f_≥î_fûe
, 
¨øy
);

480 
	`cJSON_Dñëe
(
¨øy
);

482 
	}
}

484 
	$lﬂd_≥î_c⁄f
(
c⁄f_ty≥
, 
id
)

486 
c⁄f_≥î
[100];

487 
c⁄f_≥î_fûe
[100];

489 *
c⁄f_±r
 = 
NULL
;

490 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

492 
	`•rötf
(
c⁄f_≥î
, "vµn%d_≥îs", 
id
);

493 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

494 
c⁄f_±r
 = 
	`GëC⁄fig
(
c⁄f_≥î
);

495 
cJSON
 *
≥îs
 = 
	`∑r£_tu¬ñ_≥îs
(
c⁄f_±r
);

496 i‡(
≥îs
)

498 
	`wrôe_js⁄_to_fûe
(
c⁄f_≥î_fûe
, 
≥îs
);

499 
	`cJSON_Dñëe
(
≥îs
);

506 
	`FREE_PTR
(
c⁄f_±r
);

508 
	}
}

510 
	$lﬂd_≥î_c⁄fs
(
c⁄f_ty≥
)

512 
i
;

513 
i
 = 0; i < 5; i++)

515 
	`lﬂd_≥î_c⁄f2
(
c⁄f_ty≥
, 
i
);

518 
	}
}

520 
	$ßve_≥î_c⁄f
(
c⁄f_ty≥
, 
id
)

522 
c⁄f_≥î
[100];

523 
c⁄f_≥î_fûe
[100];

524 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

526 
	`•rötf
(
c⁄f_≥î
, "vµn%d_≥îs", 
id
);

527 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

528 
cJSON
 *
≥îs
 =
	`ªad_js⁄_‰om_fûe
(
c⁄f_≥î_fûe
);

529 i‡(
≥îs
)

531 
i
;

532 
≥î_˙t
 = 
	`cJSON_GëAºaySize
(
≥îs
);

533 *
ßve_c⁄f
 = 
NULL
;

534 
i
 = 0; i < 
≥î_˙t
; i++)

536 
cJSON
 *
≥î
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

537 
cJSON
 *
≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_vip");

538 
cJSON
 *
≥î_£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_teamid");

539 *
≥î_c⁄f
 = 
	`mÆloc
(
	`°æí
(
≥î_vù_ôem
->
vÆue°rög
Ë+ såÀn(
≥î_£rvî_ôem
->valuestring) + strlen("@") + 1);

540 
	`°r˝y
(
≥î_c⁄f
, 
≥î_vù_ôem
->
vÆue°rög
);

541 
	`°rˇt
(
≥î_c⁄f
, "@");

542 
	`°rˇt
(
≥î_c⁄f
, 
≥î_£rvî_ôem
->
vÆue°rög
);

543 
ßve_c⁄f
 = 
	`my_°rˇt
(ßve_c⁄f, 
≥î_c⁄f
);

544 
	`‰ì
(
≥î_c⁄f
);

546 i‡(
ßve_c⁄f
)

548 
	`SëC⁄fig
(
c⁄f_≥î
, 
ßve_c⁄f
);

549 
	`‰ì
(
ßve_c⁄f
);

551 
	`cJSON_Dñëe
(
≥îs
);

559 
	}
}

561 
	$ßve_≥î_c⁄f2
(
c⁄f_ty≥
, 
id
)

563 
c⁄f_≥î
[100];

564 
c⁄f_≥î_fûe
[100];

565 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

567 
	`•rötf
(
c⁄f_≥î
, "vµn%d_≥îs", 
id
);

568 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

569 
cJSON
 *
≥îs
 =
	`ªad_js⁄_‰om_fûe
(
c⁄f_≥î_fûe
);

570 i‡(
≥îs
)

572 
i
;

573 
≥î_˙t
 = 
	`cJSON_GëAºaySize
(
≥îs
);

574 
	`£t_≥î_˙t
(
id
, 
≥î_˙t
);

575 
i
 = 0; i < 
≥î_˙t
; i++)

577 
cJSON
 *
≥î
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

578 
	`£t_≥î_c⁄f
(
id
, 
i
, 
≥î
);

580 
	`cJSON_Dñëe
(
≥îs
);

584 
	`£t_≥î_˙t
(
id
, 0);

592 
	}
}

594 
	$ßve_≥î_c⁄fs
(
c⁄f_ty≥
)

596 
i
;

597 
i
 = 0; i < 5; i++)

599 
	`ßve_≥î_c⁄f2
(
c⁄f_ty≥
, 
i
);

602 
	}
}

604 
cJSON
 *
	$∑r£_tu¬ñ_v∑th
(*
±r
, 
c⁄f_ty≥
)

606 *
ßve_±r1
 = 
NULL
;

607 *
°r1
;

608 *
tokí
;

610 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

611 i‡(
±r
)

613 
°r1
 = 
±r
; ; så1 = 
NULL
)

615 
tokí
 = 
	`°πok_r
(
°r1
, ":", &
ßve_±r1
);

616 i‡(
tokí
 =
NULL
)

620 *
uri
 = 
NULL
;

621 *
¥oxy
 = 
NULL
;

622 *
£rvî
 = 
NULL
;

624 
uri
 = 
tokí
;

625 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

627 *
£∑øt‹
 = 
	`°rchr
(
uri
, '@');

628 *
£∑øt‹
 = 0;

629 
¥oxy
 = ++
£∑øt‹
;

630 
£∑øt‹
 = 
	`°rchr
(
¥oxy
, '@');

631 *
£∑øt‹
 = 0;

632 
£rvî
 = ++
£∑øt‹
;

637 
cJSON
 *
obj
 = 
	`cJSON_Cª©eObje˘
();

638 
	`cJSON_AddSåögToObje˘
(
obj
, "uri", 
uri
);

639 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

641 
	`cJSON_AddSåögToObje˘
(
obj
, "v¥oxy", 
¥oxy
);

642 
	`cJSON_AddSåögToObje˘
(
obj
, "£rvî", 
£rvî
);

644 
	`cJSON_AddIãmToAºay
(
ªt
, 
obj
);

647  
ªt
;

648 
	}
}

650 
cJSON
 *
	$∑r£_tu¬ñ_ﬁd_v∑th
(*
±r
, 
c⁄f_ty≥
)

652 *
ßve_±r1
 = 
NULL
;

653 *
°r1
;

654 *
tokí
;

656 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

657 i‡(
±r
)

659 
°r1
 = 
±r
; ; så1 = 
NULL
)

661 
tokí
 = 
	`°πok_r
(
°r1
, ":", &
ßve_±r1
);

662 i‡(
tokí
 =
NULL
)

666 *
uri
 = 
NULL
;

667 *
¥oxy
 = 
NULL
;

669 
uri
 = 
tokí
;

670 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

672 *
£∑øt‹
 = 
	`°rchr
(
uri
, '@');

673 *
£∑øt‹
 = 0;

674 
¥oxy
 = ++
£∑øt‹
;

679 
cJSON
 *
obj
 = 
	`cJSON_Cª©eObje˘
();

680 
	`cJSON_AddSåögToObje˘
(
obj
, "uri", 
uri
);

681 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

683 
	`cJSON_AddSåögToObje˘
(
obj
, "v¥oxy", 
¥oxy
);

685 
	`cJSON_AddIãmToAºay
(
ªt
, 
obj
);

688  
ªt
;

689 
	}
}

691 
	$lﬂd_v∑th_c⁄f
(
c⁄f_ty≥
, 
id
)

693 
c⁄f_v∑th
[100];

694 
c⁄f_v∑th_fûe
[100];

695 *
v∑th
;

696 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

698 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th", 
id
);

699 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

704 
	`•rötf
(
c⁄f_v∑th
, "v≤%d_v∑th", 
id
);

705 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
id
);

708 
v∑th
 = 
	`GëC⁄fig
(
c⁄f_v∑th
);

709 i‡(
v∑th
 && vpath[0])

711 
cJSON
 *
tu¬ñ_v∑th
 = 
	`∑r£_tu¬ñ_v∑th
(
v∑th
, 
c⁄f_ty≥
);

712 i‡(
tu¬ñ_v∑th
)

714 
	`wrôe_js⁄_to_fûe
(
c⁄f_v∑th_fûe
, 
tu¬ñ_v∑th
);

715 
	`cJSON_Dñëe
(
tu¬ñ_v∑th
);

718 
	`FREE_PTR
(
v∑th
);

720 
	}
}

722 
	$gë_v∑th_˙t
(
tu¬ñ_id
)

724 
ªt
 = 0;

725 
c⁄f_v∑th
[100];

726 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th_˙t", 
tu¬ñ_id
);

727 *
±r
 = 
	`GëC⁄fig
(
c⁄f_v∑th
);

728 i‡(
±r
)

730 
ªt
 = 
	`©oi
(
±r
);

731 
	`‰ì
(
±r
);

733  
ªt
;

734 
	}
}

736 
	$£t_v∑th_˙t
(
tu¬ñ_id
, 
˙t
)

738 
c⁄f_v∑th
[100];

739 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th_˙t", 
tu¬ñ_id
);

740 
vÆue
[100];

741 
	`•rötf
(
vÆue
, "%d", 
˙t
);

742 
	`SëC⁄fig
(
c⁄f_v∑th
, 
vÆue
);

744 
	}
}

746 
cJSON
 *
	$gë_v∑th_c⁄f
(
tu¬ñ_id
, 
ödex
)

748 
cJSON
 *
obj
 = 
NULL
;

749 *
uri
 = 
NULL
;

750 *
¥oxy
 = 
NULL
;

751 *
ãam_id
 = 
NULL
;

752 
c⁄f_v∑th
[100];

753 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th%d", 
tu¬ñ_id
, 
ödex
);

754 *
°r
 = 
	`GëC⁄fig
(
c⁄f_v∑th
);

755 i‡(
°r
)

757 i‡(
	`°æí
(
°r
) < 100)

759 
uri
 = 
°r
;

760 *
£∑øt‹
 = 
	`°rchr
(
uri
, '@');

761 *
£∑øt‹
 = 0;

762 
¥oxy
 = ++
£∑øt‹
;

763 
£∑øt‹
 = 
	`°rchr
(
¥oxy
, '@');

764 *
£∑øt‹
 = 0;

765 
ãam_id
 = ++
£∑øt‹
;

766 
obj
 = 
	`cJSON_Cª©eObje˘
();

767 
	`cJSON_AddSåögToObje˘
(
obj
, "uri", 
uri
);

768 
	`cJSON_AddSåögToObje˘
(
obj
, "v¥oxy", 
¥oxy
);

769 
	`cJSON_AddSåögToObje˘
(
obj
, "ãam_id", 
ãam_id
);

771 
	`‰ì
(
°r
);

773  
obj
;

774 
	}
}

776 
	$£t_v∑th_c⁄f
(
tu¬ñ_id
, 
ödex
, 
cJSON
 *
obj
)

778 *
°r
 = 
NULL
;

779 
c⁄f_v∑th
[100];

780 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th%d", 
tu¬ñ_id
, 
ödex
);

781 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "uri");

782 
cJSON
 *
¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "vproxy");

783 
cJSON
 *
ãam_id_ôem
 = 
	`cJSON_GëObje˘Iãm
(
obj
, "team_id");

784 
tŸÆ_Àn
 = 
	`°æí
(
uri_ôem
->
vÆue°rög
Ë+ såÀn(
¥oxy_ôem
->vÆue°rögË+ såÀn(
ãam_id_ôem
->valuestring) + strlen("@") + strlen("@") + 1;

785 i‡(
tŸÆ_Àn
 < 100)

787 
°r
 = 
	`mÆloc
(
tŸÆ_Àn
 + 1);

788 i‡(
°r
)

790 
	`°r˝y
(
°r
, 
uri_ôem
->
vÆue°rög
);

791 
	`°rˇt
(
°r
, "@");

792 
	`°rˇt
(
°r
, 
¥oxy_ôem
->
vÆue°rög
);

793 
	`°rˇt
(
°r
, "@");

794 
	`°rˇt
(
°r
, 
ãam_id_ôem
->
vÆue°rög
);

795 
	`SëC⁄fig
(
c⁄f_v∑th
, 
°r
);

799 
	}
}

801 
	$lﬂd_v∑th_c⁄f2
(
c⁄f_ty≥
, 
id
)

803 
c⁄f_v∑th_fûe
[100];

805 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

807 
cJSON
 *
¨øy
 = 
	`cJSON_Cª©eAºay
();

808 
v∑th_˙t
 = 
	`gë_v∑th_˙t
(
id
);

809 
i
;

810 
i
 = 0; i < 
v∑th_˙t
; i++)

812 
cJSON
 *
obj
 = 
	`gë_v∑th_c⁄f
(
id
, 
i
);

813 i‡(
obj
)

815 
	`cJSON_AddIãmToAºay
(
¨øy
, 
obj
);

818 
	`wrôe_js⁄_to_fûe
(
c⁄f_v∑th_fûe
, 
¨øy
);

819 
	`cJSON_Dñëe
(
¨øy
);

821 
	}
}

823 
	$ßve_v∑th_c⁄f2
(
c⁄f_ty≥
, 
id
)

825 
c⁄f_v∑th
[100];

826 
c⁄f_v∑th_fûe
[100];

828 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th", 
id
);

829 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

831 
cJSON
 *
tu¬ñ_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_v∑th_fûe
);

832 i‡(
tu¬ñ_v∑th
)

834 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
tu¬ñ_v∑th
);

835 
i
;

836 
	`£t_v∑th_˙t
(
id
, 
v∑th_˙t
);

837 
i
 = 0; i < 
v∑th_˙t
; i++)

839 
cJSON
 *
obj
 = 
	`cJSON_GëAºayIãm
(
tu¬ñ_v∑th
, 
i
);

840 
	`£t_v∑th_c⁄f
(
id
, 
i
, 
obj
);

842 
	`cJSON_Dñëe
(
tu¬ñ_v∑th
);

845 
	}
}

847 
	$ßve_v∑th_js⁄_to_c⁄f
(
cJSON
 *
tu¬ñ_v∑th
, 
c⁄f_ty≥
, 
id
)

849 
c⁄f_v∑th
[100];

850 
c⁄f_v∑th_fûe
[100];

851 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

853 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th", 
id
);

854 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

859 
	`•rötf
(
c⁄f_v∑th
, "v≤%d_v∑th", 
id
);

860 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
id
);

863 *
ßve_±r
 = 
NULL
;

864 i‡(
tu¬ñ_v∑th
)

866 
i
;

867 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
tu¬ñ_v∑th
);

868 
i
 = 0; i < 
v∑th_˙t
; i++)

870 *
v∑th_c⁄f
 = 
NULL
;

871 
cJSON
 *
⁄e_ôem
 = 
	`cJSON_GëAºayIãm
(
tu¬ñ_v∑th
, 
i
);

872 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "uri");

873 
cJSON
 *
¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "vproxy");

874 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "server");

875 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

877 
v∑th_c⁄f
 = 
	`mÆloc
(
	`°æí
(
uri_ôem
->
vÆue°rög
Ë+ såÀn(
¥oxy_ôem
->vÆue°rögË+ såÀn(
£rvî_ôem
->valuestring) + strlen("@") + strlen("@") + 1);

878 
	`°r˝y
(
v∑th_c⁄f
, 
uri_ôem
->
vÆue°rög
);

879 
	`°rˇt
(
v∑th_c⁄f
, "@");

880 
	`°rˇt
(
v∑th_c⁄f
, 
¥oxy_ôem
->
vÆue°rög
);

881 
	`°rˇt
(
v∑th_c⁄f
, "@");

882 
	`°rˇt
(
v∑th_c⁄f
, 
£rvî_ôem
->
vÆue°rög
);

886 
v∑th_c⁄f
 = 
	`mÆloc
(
	`°æí
(
uri_ôem
->
vÆue°rög
) + 1);

887 
	`°r˝y
(
v∑th_c⁄f
, 
uri_ôem
->
vÆue°rög
);

890 
ßve_±r
 = 
	`my_°rˇt
(ßve_±r, 
v∑th_c⁄f
);

891 
	`FREE_PTR
(
v∑th_c⁄f
);

893 i‡(
ßve_±r
)

895 
	`SëC⁄fig
(
c⁄f_v∑th
, 
ßve_±r
);

896 
	`‰ì
(
ßve_±r
);

900 
	}
}

902 
	$ßve_v∑th_c⁄f
(
c⁄f_ty≥
, 
id
)

904 
c⁄f_v∑th
[100];

905 
c⁄f_v∑th_fûe
[100];

906 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

908 
	`•rötf
(
c⁄f_v∑th
, "vµn%d_v∑th", 
id
);

909 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

914 
	`•rötf
(
c⁄f_v∑th
, "v≤%d_v∑th", 
id
);

915 
	`•rötf
(
c⁄f_v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
id
);

918 *
ßve_±r
 = 
NULL
;

919 
cJSON
 *
tu¬ñ_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
c⁄f_v∑th_fûe
);

920 i‡(
tu¬ñ_v∑th
)

922 
i
;

923 
v∑th_˙t
 = 
	`cJSON_GëAºaySize
(
tu¬ñ_v∑th
);

924 
i
 = 0; i < 
v∑th_˙t
; i++)

926 *
v∑th_c⁄f
 = 
NULL
;

927 
cJSON
 *
⁄e_ôem
 = 
	`cJSON_GëAºayIãm
(
tu¬ñ_v∑th
, 
i
);

928 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "uri");

929 
cJSON
 *
¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "vproxy");

930 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
⁄e_ôem
, "server");

931 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

933 
v∑th_c⁄f
 = 
	`mÆloc
(
	`°æí
(
uri_ôem
->
vÆue°rög
Ë+ såÀn(
¥oxy_ôem
->vÆue°rögË+ såÀn(
£rvî_ôem
->valuestring) + strlen("@") + strlen("@") + 1);

934 
	`°r˝y
(
v∑th_c⁄f
, 
uri_ôem
->
vÆue°rög
);

935 
	`°rˇt
(
v∑th_c⁄f
, "@");

936 
	`°rˇt
(
v∑th_c⁄f
, 
¥oxy_ôem
->
vÆue°rög
);

937 
	`°rˇt
(
v∑th_c⁄f
, "@");

938 
	`°rˇt
(
v∑th_c⁄f
, 
£rvî_ôem
->
vÆue°rög
);

942 
v∑th_c⁄f
 = 
	`mÆloc
(
	`°æí
(
uri_ôem
->
vÆue°rög
) + 1);

943 
	`°r˝y
(
v∑th_c⁄f
, 
uri_ôem
->
vÆue°rög
);

946 
ßve_±r
 = 
	`my_°rˇt
(ßve_±r, 
v∑th_c⁄f
);

947 
	`FREE_PTR
(
v∑th_c⁄f
);

949 i‡(
ßve_±r
)

951 
	`SëC⁄fig
(
c⁄f_v∑th
, 
ßve_±r
);

952 
	`‰ì
(
ßve_±r
);

954 
	`cJSON_Dñëe
(
tu¬ñ_v∑th
);

957 
	}
}

959 
	$lﬂd_v∑th_c⁄fs
(
c⁄f_ty≥
)

961 
i
;

962 
i
 = 0; i < 5; i++)

964 
	`lﬂd_v∑th_c⁄f2
(
c⁄f_ty≥
, 
i
);

967 
	}
}

969 
	$ßve_v∑th_c⁄fs
(
c⁄f_ty≥
)

971 
i
;

972 
i
 = 0; i < 5; i++)

974 
	`ßve_v∑th_c⁄f2
(
c⁄f_ty≥
, 
i
);

977 
	}
}

979 
	$lﬂd_tu¬ñ_c⁄fs
(
c⁄f_ty≥
)

981 
i
;

982 
	`lﬂd_m™agî
(
c⁄f_ty≥
);

983 
i
 = 0; i < 5; i++)

985 
	`lﬂd_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
i
);

988 
	}
}

990 
	$ßve_tu¬ñ_c⁄fs
(
c⁄f_ty≥
)

992 
i
;

993 
	`ßve_m™agî
(
c⁄f_ty≥
);

994 
i
 = 0; i < 5; i++)

996 
	`ßve_tu¬ñ_c⁄f
(
c⁄f_ty≥
, 
i
);

999 
	}
}

1001 
	$check_r7800
()

1003 
ªt
 = 0;

1004 
FILE
 *
Â
 = 
	`f›í
("/module_name", "r");

1005 i‡(
Â
)

1007 
löe_buf
[4096] = "";

1008 
	`fgës
(
löe_buf
,  (löe_buf), 
Â
);

1009 i‡(
	`°∫cmp
(
löe_buf
, "R78", 3) == 0)

1011 
ªt
 = 1;

1013 
	`f˛o£
(
Â
);

1015  
ªt
;

1016 
	}
}

1018 
	$¥ñﬂd_7800_ﬁd_tu¬ñ_≥îs
(
cJSON
 *
p2p_¨øy
, 
tu¬ñ_id
)

1020 
√w_≥îs_fûe
[100];

1021 
	`•rötf
(
√w_≥îs_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
tu¬ñ_id
);

1022 
cJSON
 *
√w_≥îs
 = 
	`cJSON_Cª©eAºay
();

1023 
˙t
 = 
	`cJSON_GëAºaySize
(
p2p_¨øy
);

1024 
i
;

1025 
i
 = 0; i < 
˙t
; i++)

1027 
cJSON
 *
≥î
 = 
	`cJSON_GëAºayIãm
(
p2p_¨øy
, 
i
);

1028 
cJSON
 *
ù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "ip");

1029 
cJSON
 *
tu¬ñ_id_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "tunnel_id");

1030 i‡(
tu¬ñ_id_ôem
->
vÆueöt
 =
tu¬ñ_id
)

1032 
cJSON
 * 
√w_obj1
 = 
	`cJSON_Cª©eObje˘
();

1033 
	`cJSON_AddSåögToObje˘
(
√w_obj1
, "≥î_vù", 
ù_ôem
->
vÆue°rög
);

1034 
	`cJSON_AddSåögToObje˘
(
√w_obj1
, "peer_server", "220.168.30.11");

1036 
cJSON
 * 
√w_obj2
 = 
	`cJSON_Cª©eObje˘
();

1037 
	`cJSON_AddSåögToObje˘
(
√w_obj2
, "≥î_vù", 
ù_ôem
->
vÆue°rög
);

1038 
	`cJSON_AddSåögToObje˘
(
√w_obj2
, "peer_server", "220.168.30.12");

1040 
	`cJSON_AddIãmToAºay
(
√w_≥îs
, 
√w_obj1
);

1041 
	`cJSON_AddIãmToAºay
(
√w_≥îs
, 
√w_obj2
);

1044 
	`wrôe_js⁄_to_fûe
(
√w_≥îs_fûe
, 
√w_≥îs
);

1045 
	`cJSON_Dñëe
(
√w_≥îs
);

1047 
	}
}

1049 
	$¥ñﬂd_7800_ﬁd_≥îs
()

1051 
≥îs_fûe
[100] = "/etc/site/bird_info.txt";

1052 
cJSON
 *
ﬁd_≥îs
 = 
	`ªad_js⁄_‰om_fûe
(
≥îs_fûe
);

1053 i‡(
ﬁd_≥îs
)

1055 
cJSON
 *
p2p_¨øy
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_≥îs
, "p2p_info");

1056 i‡(
p2p_¨øy
)

1058 
i
;

1059 
i
 = 0; i < 5; i++)

1061 
	`¥ñﬂd_7800_ﬁd_tu¬ñ_≥îs
(
p2p_¨øy
, 
i
);

1064 
	`cJSON_Dñëe
(
ﬁd_≥îs
);

1066 
	`ªmove
(
≥îs_fûe
);

1067 
	}
}

1069 
cJSON
 *
	$∑r£_ﬁd_tu¬ñ_≥îs
(*
±r
)

1071 *
ßve_±r1
 = 
NULL
;

1072 *
°r1
;

1073 *
tokí
;

1075 
cJSON
 *
ªt
 = 
	`cJSON_Cª©eAºay
();

1076 i‡(
±r
 &&Ötr[0])

1078 
°r1
 = 
±r
; ; så1 = 
NULL
)

1080 
tokí
 = 
	`°πok_r
(
°r1
, ":", &
ßve_±r1
);

1081 i‡(
tokí
 =
NULL
)

1085 *
≥î_vù
 = 
tokí
;

1086 
cJSON
 *
obj1
 = 
	`cJSON_Cª©eObje˘
();

1087 
	`cJSON_AddSåögToObje˘
(
obj1
, "≥î_vù", 
≥î_vù
);

1088 
	`cJSON_AddSåögToObje˘
(
obj1
, "peer_server", "220.168.30.11");

1090 
cJSON
 *
obj2
 = 
	`cJSON_Cª©eObje˘
();

1091 
	`cJSON_AddSåögToObje˘
(
obj2
, "≥î_vù", 
≥î_vù
);

1092 
	`cJSON_AddSåögToObje˘
(
obj2
, "peer_server", "220.168.30.12");

1094 
	`cJSON_AddIãmToAºay
(
ªt
, 
obj1
);

1095 
	`cJSON_AddIãmToAºay
(
ªt
, 
obj2
);

1098  
ªt
;

1099 
	}
}

1101 
	$add_ﬁd_öto_√w
(
cJSON
 *
√w
, cJSON *
ﬁd_ôem
)

1103 
cJSON
 *
ﬁd_≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "peer_vip");

1104 
cJSON
 *
ﬁd_≥î_£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "peer_server");

1105 
√w_˙t
 = 
	`cJSON_GëAºaySize
(
√w
);

1106 
i
;

1107 
found
 = 0;

1108 
i
 = 0; i < 
√w_˙t
; i++)

1110 
cJSON
 *
√w_ôem
 = 
	`cJSON_GëAºayIãm
(
√w
, 
i
);

1111 
cJSON
 *
≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
√w_ôem
, "peer_vip");

1112 
cJSON
 *
≥î_£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
√w_ôem
, "peer_server");

1113 i‡(
	`°rcmp
(
≥î_vù_ôem
->
vÆue°rög
, 
ﬁd_≥î_vù_ôem
->vÆue°rögË=0 && såcmp(
≥î_£rvî_ôem
->vÆue°rög, 
ﬁd_≥î_£rvî_ôem
->valuestring) == 0)

1115 
found
 = 1;

1119 i‡(!
found
)

1121 
	`cJSON_AddIãmToAºay
(
√w
, 
	`cJSON_Du∂iˇã
(
ﬁd_ôem
, 1));

1124 
	}
}

1126 
	$mîge_ﬁd_öto_√w
(
cJSON
 *
√w
, cJSON *
ﬁd
)

1128 
i
;

1129 
ﬁd_˙t
 = 
	`cJSON_GëAºaySize
(
ﬁd
);

1130 
i
 = 0; i < 
ﬁd_˙t
; i++)

1132 
cJSON
 *
ﬁd_ôem
 = 
	`cJSON_GëAºayIãm
(
ﬁd
, 
i
);

1133 
	`add_ﬁd_öto_√w
(
√w
, 
ﬁd_ôem
);

1136 
	}
}

1138 
	$ßve_≥îs_js⁄_to_c⁄f
(
cJSON
 *
≥îs
, 
id
)

1140 
c⁄f_≥î
[100];

1141 
c⁄f_≥î_fûe
[100];

1143 
	`•rötf
(
c⁄f_≥î
, "vµn%d_≥îs", 
id
);

1144 
	`•rötf
(
c⁄f_≥î_fûe
, "/ëc/sôe/vµn%d_≥îs.c⁄f", 
id
);

1145 i‡(
≥îs
)

1147 
i
;

1148 
≥î_˙t
 = 
	`cJSON_GëAºaySize
(
≥îs
);

1149 *
ßve_c⁄f
 = 
NULL
;

1150 
i
 = 0; i < 
≥î_˙t
; i++)

1152 
cJSON
 *
≥î
 = 
	`cJSON_GëAºayIãm
(
≥îs
, 
i
);

1153 
cJSON
 *
≥î_vù_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_vip");

1154 
cJSON
 *
≥î_£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
≥î
, "peer_server");

1155 *
≥î_c⁄f
 = 
	`mÆloc
(
	`°æí
(
≥î_vù_ôem
->
vÆue°rög
Ë+ såÀn(
≥î_£rvî_ôem
->valuestring) + strlen("@") + 1);

1156 
	`°r˝y
(
≥î_c⁄f
, 
≥î_vù_ôem
->
vÆue°rög
);

1157 
	`°rˇt
(
≥î_c⁄f
, "@");

1158 
	`°rˇt
(
≥î_c⁄f
, 
≥î_£rvî_ôem
->
vÆue°rög
);

1159 
ßve_c⁄f
 = 
	`my_°rˇt
(ßve_c⁄f, 
≥î_c⁄f
);

1160 
	`‰ì
(
≥î_c⁄f
);

1162 i‡(
ßve_c⁄f
)

1164 
	`SëC⁄fig
(
c⁄f_≥î
, 
ßve_c⁄f
);

1165 
	`‰ì
(
ßve_c⁄f
);

1170 
	}
}

1172 
	$¥ñﬂd_n⁄_7800_ﬁd_tu¬ñ_≥îs
(
tu¬ñ_id
)

1174 
ﬁd_≥îs_c⁄f
[100];

1175 
√w_≥îs_c⁄f
[100];

1176 
	`•rötf
(
ﬁd_≥îs_c⁄f
, "sôe_ªmŸe_≥î%d", 
tu¬ñ_id
);

1177 
	`•rötf
(
√w_≥îs_c⁄f
, "vµn%d_≥îs", 
tu¬ñ_id
);

1178 *
√w_c⁄f
 = 
	`GëC⁄fig
(
√w_≥îs_c⁄f
);

1179 *
ﬁd_c⁄f
 = 
	`GëC⁄fig
(
ﬁd_≥îs_c⁄f
);

1180 
cJSON
 *
√w_c⁄f_¨øy
 = 
	`∑r£_tu¬ñ_≥îs
(
√w_c⁄f
);

1181 
cJSON
 *
ﬁd_c⁄f_¨øy
 = 
	`∑r£_ﬁd_tu¬ñ_≥îs
(
ﬁd_c⁄f
);

1182 
	`mîge_ﬁd_öto_√w
(
√w_c⁄f_¨øy
, 
ﬁd_c⁄f_¨øy
);

1183 
	`ßve_≥îs_js⁄_to_c⁄f
(
√w_c⁄f_¨øy
, 
tu¬ñ_id
);

1184 
	`Un£tC⁄fig
(
ﬁd_≥îs_c⁄f
);

1185 
	`FREE_PTR
(
√w_c⁄f
);

1186 
	`FREE_PTR
(
ﬁd_c⁄f
);

1187 
	}
}

1189 
	$¥ñﬂd_n⁄_7800_ﬁd_≥îs
()

1191 
i
;

1192 
i
 = 0; i < 5; i++)

1194 
	`¥ñﬂd_n⁄_7800_ﬁd_tu¬ñ_≥îs
(
i
);

1197 
	}
}

1199 
	$¥ñﬂd_ﬁd_≥îs
()

1201 i‡(
	`check_r7800
())

1203 
	`¥ñﬂd_7800_ﬁd_≥îs
();

1207 
	`¥ñﬂd_n⁄_7800_ﬁd_≥îs
();

1208 
	`sy°em
("config commit");

1211 
	}
}

1213 
	$add_v≤_√w_∑th
(
cJSON
 *
√w_¨øy
, cJSON *
ﬁd_ôem
)

1215 
i
;

1216 
found
 = 0;

1217 
˙t
 = 
	`cJSON_GëAºaySize
(
√w_¨øy
);

1218 
i
 = 0; i < 
˙t
; i++)

1220 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
√w_¨øy
, 
i
);

1221 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

1222 i‡(
	`°rcmp
(
uri_ôem
->
vÆue°rög
, 
ﬁd_ôem
->valuestring) == 0)

1224 
found
 = 1;

1228 i‡(!
found
)

1230 
cJSON
 *
√w_ôem
 = 
	`cJSON_Cª©eObje˘
();

1231 
	`cJSON_AddSåögToObje˘
(
√w_ôem
, "uri", 
ﬁd_ôem
->
vÆue°rög
);

1232 
	`cJSON_AddIãmToAºay
(
√w_¨øy
, 
√w_ôem
);

1235 
	}
}

1237 
	$mîge_ﬁd_v≤_v∑th_öto_√w
(
cJSON
 *
√w_¨øy
, cJSON *
ﬁd_¨øy
)

1239 i‡(
ﬁd_¨øy
)

1241 
i
;

1242 
ﬁd_˙t
 = 
	`cJSON_GëAºaySize
(
ﬁd_¨øy
);

1243 
i
 = 0; i < 
ﬁd_˙t
; i++)

1245 
cJSON
 *
ﬁd_ôem
 = 
	`cJSON_GëAºayIãm
(
ﬁd_¨øy
, 
i
);

1246 
	`add_v≤_√w_∑th
(
√w_¨øy
, 
ﬁd_ôem
);

1250 
	}
}

1252 
	$add_vµn_√w_∑th
(
cJSON
 *
√w_¨øy
, cJSON *
ﬁd_ôem
)

1254 
i
;

1255 
found
 = 0;

1256 
cJSON
 *
ﬁd_uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "uri");

1257 
cJSON
 *
ﬁd_v¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ﬁd_ôem
, "vproxy");

1258 
˙t
 = 
	`cJSON_GëAºaySize
(
√w_¨øy
);

1259 
i
 = 0; i < 
˙t
; i++)

1261 
cJSON
 *
ôem
 = 
	`cJSON_GëAºayIãm
(
√w_¨øy
, 
i
);

1262 
cJSON
 *
uri_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "uri");

1263 
cJSON
 *
v¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
ôem
, "vproxy");

1264 i‡(
	`°rcmp
(
uri_ôem
->
vÆue°rög
, 
ﬁd_uri_ôem
->valuestring) == 0 &&

1265 
	`°rcmp
(
v¥oxy_ôem
->
vÆue°rög
, 
ﬁd_v¥oxy_ôem
->valuestring) == 0)

1267 
found
 = 1;

1271 i‡(!
found
)

1273 
cJSON
 *
dup_ﬁd1
 = 
	`cJSON_Du∂iˇã
(
ﬁd_ôem
, 1);

1274 
	`cJSON_AddSåögToObje˘
(
dup_ﬁd1
, "server", "220.168.30.11");

1275 
cJSON
 *
dup_ﬁd2
 = 
	`cJSON_Du∂iˇã
(
ﬁd_ôem
, 1);

1276 
	`cJSON_AddSåögToObje˘
(
dup_ﬁd2
, "server", "220.168.30.12");

1277 
	`cJSON_AddIãmToAºay
(
√w_¨øy
, 
dup_ﬁd1
);

1278 
	`cJSON_AddIãmToAºay
(
√w_¨øy
, 
dup_ﬁd2
);

1281 
	}
}

1283 
	$mîge_ﬁd_vµn_v∑th_öto_√w
(
cJSON
 *
√w_¨øy
, cJSON *
ﬁd_¨øy
)

1285 i‡(
ﬁd_¨øy
)

1287 
i
;

1288 
ﬁd_˙t
 = 
	`cJSON_GëAºaySize
(
ﬁd_¨øy
);

1289 
i
 = 0; i < 
ﬁd_˙t
; i++)

1291 
cJSON
 *
ﬁd_obj
 = 
	`cJSON_GëAºayIãm
(
ﬁd_¨øy
, 
i
);

1292 
	`add_vµn_√w_∑th
(
√w_¨øy
, 
ﬁd_obj
);

1296 
	}
}

1298 
	$¥ñﬂd_7800_ﬁd_tu¬ñ_v∑th
(
c⁄f_ty≥
, 
id
)

1300 
ﬁd_v∑th_fûe
[100];

1301 
√w_v∑th_fûe
[100];

1303 i‡(
c⁄f_ty≥
 == 0)

1305 
	`•rötf
(
ﬁd_v∑th_fûe
, "/ëc/v≤/whôñi°%d.c⁄f", 
id
);

1306 
	`•rötf
(
√w_v∑th_fûe
, "/ëc/v≤/v≤%d_v∑th.c⁄f", 
id
);

1307 
cJSON
 *
√w_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
√w_v∑th_fûe
);

1308 i‡(!
√w_v∑th
)

1310 
√w_v∑th
 = 
	`cJSON_Cª©eAºay
();

1312 
cJSON
 *
ﬁd_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
ﬁd_v∑th_fûe
);

1313 i‡(!
ﬁd_v∑th
)

1315 
ﬁd_v∑th
 = 
	`cJSON_Cª©eObje˘
();

1317 
	`mîge_ﬁd_v≤_v∑th_öto_√w
(
√w_v∑th
, 
	`cJSON_GëObje˘Iãm
(
ﬁd_v∑th
, "whitelist"));

1318 
	`wrôe_js⁄_to_fûe
(
√w_v∑th_fûe
, 
√w_v∑th
);

1319 
	`ªmove
(
ﬁd_v∑th_fûe
);

1320 
	`cJSON_Dñëe
(
√w_v∑th
);

1321 
	`cJSON_Dñëe
(
ﬁd_v∑th
);

1325 
	`•rötf
(
ﬁd_v∑th_fûe
, "/ëc/sôe/whôñi°%d.c⁄f", 
id
);

1326 
	`•rötf
(
√w_v∑th_fûe
, "/ëc/sôe/vµn%d_v∑th.c⁄f", 
id
);

1327 
cJSON
 *
√w_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
√w_v∑th_fûe
);

1328 i‡(!
√w_v∑th
)

1330 
√w_v∑th
 = 
	`cJSON_Cª©eAºay
();

1332 
cJSON
 *
ﬁd_v∑th
 = 
	`ªad_js⁄_‰om_fûe
(
ﬁd_v∑th_fûe
);

1333 i‡(!
ﬁd_v∑th
)

1335 
ﬁd_v∑th
 = 
	`cJSON_Cª©eAºay
();

1338 
	`mîge_ﬁd_vµn_v∑th_öto_√w
(
√w_v∑th
, 
ﬁd_v∑th
);

1339 
	`wrôe_js⁄_to_fûe
(
√w_v∑th_fûe
, 
√w_v∑th
);

1340 
	`ªmove
(
ﬁd_v∑th_fûe
);

1341 
	`cJSON_Dñëe
(
√w_v∑th
);

1342 
	`cJSON_Dñëe
(
ﬁd_v∑th
);

1345 
	`ªmove
(
ﬁd_v∑th_fûe
);

1347 
	}
}

1349 
	$¥ñﬂd_7800_ﬁd_v∑ths
(
c⁄f_ty≥
)

1351 
i
;

1352 
i
 = 0; i < 5; i++)

1354 
	`¥ñﬂd_7800_ﬁd_tu¬ñ_v∑th
(
c⁄f_ty≥
, 
i
);

1357 
	}
}

1359 
	$¥ñﬂd_n⁄_7800_ﬁd_tu¬ñ_v∑th
(
c⁄f_ty≥
, 
id
)

1361 *
ﬁd_c⁄f
 = 
NULL
;

1362 *
√w_c⁄f
 = 
NULL
;

1363 
ﬁd_v∑th_c⁄f
[100];

1364 
√w_v∑th_c⁄f
[100];

1366 i‡(
c⁄f_ty≥
 == 0)

1368 
	`•rötf
(
ﬁd_v∑th_c⁄f
, "v≤_whôñi°%d", 
id
);

1369 
	`•rötf
(
√w_v∑th_c⁄f
, "v≤%d_v∑th", 
id
);

1370 
ﬁd_c⁄f
 = 
	`GëC⁄fig
(
ﬁd_v∑th_c⁄f
);

1371 
√w_c⁄f
 = 
	`GëC⁄fig
(
√w_v∑th_c⁄f
);

1376 
	`•rötf
(
ﬁd_v∑th_c⁄f
, "sôe_whôñi°%d", 
id
);

1377 
	`•rötf
(
√w_v∑th_c⁄f
, "vµn%d_v∑th", 
id
);

1379 
cJSON
 *
√w_¨øy
 = 
	`∑r£_tu¬ñ_v∑th
(
√w_c⁄f
, 
c⁄f_ty≥
);

1380 
cJSON
 *
ﬁd_¨øy
 = 
	`∑r£_tu¬ñ_ﬁd_v∑th
(
ﬁd_c⁄f
, 
c⁄f_ty≥
);

1381 i‡(
c⁄f_ty≥
 == 0)

1383 
	`mîge_ﬁd_v≤_v∑th_öto_√w
(
√w_¨øy
, 
ﬁd_¨øy
);

1387 
	`mîge_ﬁd_vµn_v∑th_öto_√w
(
√w_¨øy
, 
ﬁd_¨øy
);

1389 
	`ßve_v∑th_js⁄_to_c⁄f
(
√w_¨øy
, 
c⁄f_ty≥
, 
id
);

1390 
	`cJSON_Dñëe
(
√w_¨øy
);

1391 
	`cJSON_Dñëe
(
ﬁd_¨øy
);

1392 
	`FREE_PTR
(
ﬁd_c⁄f
);

1393 
	`FREE_PTR
(
√w_c⁄f
);

1394 
	`Un£tC⁄fig
(
ﬁd_v∑th_c⁄f
);

1396 
	}
}

1398 
	$¥ñﬂd_n⁄_7800_ﬁd_v∑ths
(
c⁄f_ty≥
)

1400 
i
;

1401 
i
 = 0; i < 5; i++)

1403 
	`¥ñﬂd_n⁄_7800_ﬁd_tu¬ñ_v∑th
(
c⁄f_ty≥
, 
i
);

1406 
	}
}

1408 
	$¥ñﬂd_ﬁd_v∑th
(
c⁄f_ty≥
)

1410 i‡(
	`check_r7800
())

1412 
	`¥ñﬂd_7800_ﬁd_v∑ths
(
c⁄f_ty≥
);

1416 
	`¥ñﬂd_n⁄_7800_ﬁd_v∑ths
(
c⁄f_ty≥
);

1417 
	`sy°em
("config commit");

1420 
	}
}

1422 
	$lﬂd_public_v∑th_swôch_c⁄f
(
c⁄f_ty≥
, 
tu¬ñ_id
)

1424 
public_v∑th_swôch_fûe
[100];

1425 
c⁄f_public_v∑th_swôch_⁄
[100];

1426 
c⁄f_public_v∑th_swôch_v¥oxy
[100];

1427 
c⁄f_public_v∑th_swôch_£rvî
[100];

1429 *
c⁄f_public_v∑th_swôch_⁄_°r
 = 
NULL
;

1430 *
c⁄f_public_v∑th_swôch_v¥oxy_°r
 = 
NULL
;

1431 *
c⁄f_public_v∑th_swôch_£rvî_°r
 = 
NULL
;

1432 
cJSON
 *
c⁄f_js⁄
 = 
	`cJSON_Cª©eObje˘
();

1433 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

1435 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/v≤/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

1436 
	`•rötf
(
c⁄f_public_v∑th_swôch_⁄
, "public_v≤_v∑th%d_swôch_⁄", 
tu¬ñ_id
);

1440 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/sôe/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

1441 
	`•rötf
(
c⁄f_public_v∑th_swôch_⁄
, "public_vµn_v∑th%d_swôch_⁄", 
tu¬ñ_id
);

1442 
	`•rötf
(
c⁄f_public_v∑th_swôch_v¥oxy
, "public_vµn_v∑th%d_swôch_v¥oxy", 
tu¬ñ_id
);

1443 
	`•rötf
(
c⁄f_public_v∑th_swôch_£rvî
, "public_vµn_v∑th%d_swôch_£rvî", 
tu¬ñ_id
);

1445 
c⁄f_public_v∑th_swôch_⁄_°r
 = 
	`GëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
);

1446 
c⁄f_public_v∑th_swôch_v¥oxy_°r
 = 
	`GëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
);

1447 
c⁄f_public_v∑th_swôch_£rvî_°r
 = 
	`GëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
);

1449 i‡(
c⁄f_public_v∑th_swôch_⁄_°r
 && conf_public_vpath_switch_on_str[0] == '1')

1451 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

1453 i‡(
c⁄f_public_v∑th_swôch_v¥oxy_°r
 && 
c⁄f_public_v∑th_swôch_£rvî_°r
)

1455 
	`cJSON_AddNumbîToObje˘
(
c⁄f_js⁄
, "on", 1);

1456 
	`cJSON_AddSåögToObje˘
(
c⁄f_js⁄
, "v∑th_tu¬ñ", 
c⁄f_public_v∑th_swôch_v¥oxy_°r
);

1457 
	`cJSON_AddSåögToObje˘
(
c⁄f_js⁄
, "tu¬ñ_£rvî", 
c⁄f_public_v∑th_swôch_£rvî_°r
);

1462 
	`cJSON_AddNumbîToObje˘
(
c⁄f_js⁄
, "on", 0);

1467 
	`cJSON_AddNumbîToObje˘
(
c⁄f_js⁄
, "on", 1);

1472 
	`cJSON_AddNumbîToObje˘
(
c⁄f_js⁄
, "on", 0);

1474 
	`wrôe_js⁄_to_fûe
(
public_v∑th_swôch_fûe
, 
c⁄f_js⁄
);

1475 
	`cJSON_Dñëe
(
c⁄f_js⁄
);

1476 
	`FREE_PTR
(
c⁄f_public_v∑th_swôch_⁄_°r
);

1477 
	`FREE_PTR
(
c⁄f_public_v∑th_swôch_v¥oxy_°r
);

1478 
	`FREE_PTR
(
c⁄f_public_v∑th_swôch_£rvî_°r
);

1480 
	}
}

1482 
	$lﬂd_public_v∑th_swôch_c⁄fs
(
c⁄f_ty≥
)

1484 
i
;

1485 
i
 = 0; i < 5; i++)

1487 
	`lﬂd_public_v∑th_swôch_c⁄f
(
c⁄f_ty≥
, 
i
);

1490 
	}
}

1492 
	$ßve_public_v∑th_swôch_c⁄f
(
c⁄f_ty≥
, 
tu¬ñ_id
)

1494 
public_v∑th_swôch_fûe
[100];

1495 
c⁄f_public_v∑th_swôch_⁄
[100];

1496 
c⁄f_public_v∑th_swôch_v¥oxy
[100];

1497 
c⁄f_public_v∑th_swôch_£rvî
[100];

1499 i‡(
c⁄f_ty≥
 =
TYPE_VPN
)

1501 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/v≤/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

1502 
	`•rötf
(
c⁄f_public_v∑th_swôch_⁄
, "public_v≤_v∑th%d_swôch_⁄", 
tu¬ñ_id
);

1506 
	`•rötf
(
public_v∑th_swôch_fûe
, "/ëc/sôe/public_v∑th%d_swôch.c⁄f", 
tu¬ñ_id
);

1507 
	`•rötf
(
c⁄f_public_v∑th_swôch_⁄
, "public_vµn_v∑th%d_swôch_⁄", 
tu¬ñ_id
);

1508 
	`•rötf
(
c⁄f_public_v∑th_swôch_v¥oxy
, "public_vµn_v∑th%d_swôch_v¥oxy", 
tu¬ñ_id
);

1509 
	`•rötf
(
c⁄f_public_v∑th_swôch_£rvî
, "public_vµn_v∑th%d_swôch_£rvî", 
tu¬ñ_id
);

1511 
cJSON
 *
c⁄f_js⁄
 = 
	`ªad_js⁄_‰om_fûe
(
public_v∑th_swôch_fûe
);

1512 i‡(!
c⁄f_js⁄
)

1514 
c⁄f_js⁄
 = 
	`cJSON_Cª©eObje˘
();

1515 
	`cJSON_AddNumbîToObje˘
(
c⁄f_js⁄
, "on", 0);

1518 
cJSON
 *
⁄_ôem
 = 
	`cJSON_GëObje˘Iãm
(
c⁄f_js⁄
, "on");

1519 
cJSON
 *
v¥oxy_ôem
 = 
	`cJSON_GëObje˘Iãm
(
c⁄f_js⁄
, "vpath_tunnel");

1520 
cJSON
 *
£rvî_ôem
 = 
	`cJSON_GëObje˘Iãm
(
c⁄f_js⁄
, "tunnel_server");

1523 i‡(
c⁄f_ty≥
 =
TYPE_VPPN
)

1525 i‡(
⁄_ôem
 && 
v¥oxy_ôem
 && 
£rvî_ôem


1527 
⁄_ôem
->
vÆueöt
 == 1

1529 
v¥oxy_ôem
->
vÆue°rög


1531 
£rvî_ôem
->
vÆue°rög


1535 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
, "1");

1536 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_v¥oxy
, 
v¥oxy_ôem
->
vÆue°rög
);

1537 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_£rvî
, 
£rvî_ôem
->
vÆue°rög
);

1541 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
, "0");

1546 i‡(
⁄_ôem
 && on_ôem->
vÆueöt
 == 1)

1548 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
, "1");

1552 
	`SëC⁄fig
(
c⁄f_public_v∑th_swôch_⁄
, "0");

1555 
	`cJSON_Dñëe
(
c⁄f_js⁄
);

1557 
	}
}

1559 
	$ßve_public_v∑th_swôch_c⁄fs
(
c⁄f_ty≥
)

1561 
i
;

1562 
i
 = 0; i < 5; i++)

1564 
	`ßve_public_v∑th_swôch_c⁄f
(
c⁄f_ty≥
, 
i
);

1567 
	}
}

1569 
	$maö
(
¨gc
, **
¨gv
)

1571 
ªt
 = 0;

1572 
c⁄f_ty≥
;

1573 
	`run_ö_nodebug
();

1574 i‡(
¨gc
 == 3)

1576 i‡(
	`°rcmp
(
¨gv
[2], "vpn") == 0)

1578 
c⁄f_ty≥
 = 
TYPE_VPN
;

1582 
c⁄f_ty≥
 = 
TYPE_VPPN
;

1584 i‡(
	`°rcmp
(
¨gv
[1], "loadconfig") == 0)

1586 
	`lﬂd_tu¬ñ_c⁄fs
(
c⁄f_ty≥
);

1588 
	`lﬂd_v∑th_c⁄fs
(
c⁄f_ty≥
);

1591 i‡(
	`°rcmp
(
¨gv
[1], "saveconfig") == 0)

1593 
	`ßve_tu¬ñ_c⁄fs
(
c⁄f_ty≥
);

1595 
	`ßve_v∑th_c⁄fs
(
c⁄f_ty≥
);

1597 
	`sy°em
("config commit");

1599 i‡(
	`°rcmp
(
¨gv
[1], "adapt_old_config") == 0)

1601 
	`¥ñﬂd_ﬁd_≥îs
();

1602 
	`¥ñﬂd_ﬁd_v∑th
(
c⁄f_ty≥
);

1605  
ªt
;

1606 
	}
}

	@vppnconfig/net_tool.c

1 
	~<°dio.h
>

2 
	~<sys/sockë.h
>

3 
	~<sys/ty≥s.h
>

4 
	~<sys/time.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/£À˘.h
>

7 
	~<√töë/ö.h
>

8 
	~<√töë/ù.h
>

9 
	~<√töë/ù_icmp.h
>

10 
	~<√t/rouã.h
>

11 
	~<√t/if.h
>

12 
	~<löux/°©.h
>

13 
	~<f˙é.h
>

14 
	~<uni°d.h
>

15 
	~<°rögs.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<√tdb.h
>

19 
	~<¨∑/öë.h
>

20 
	~"cJSON.h
"

22 
	#PACKET_SIZE
 (4096)

	)

23 
	#MAX_ALLOC_LEN
 (4096)

	)

25 #i‚de‡
FREE_PTR


26 
	#FREE_PTR
(
±r
Ëdo{i‡’åË{
	`‰ì
(’å)); (±r)=
NULL
;}}0);

	)

29 
	$gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

31 
ªt
 = -1;

32 
i‰eq
 
i‰
;

33 
sockaddr
 
ù_addr
;

34 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

35 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

36 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

37 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

38 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

39 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

40 
ªt
 = 0;

41 
	`˛o£
(
sockfd
);

43  
ªt
;

44 
	}
}

46 
	$√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
)

48 
ªt
 = -1;

49 
sockaddr
 
ù_addr
;

50 
sockaddr_ö
 *
±r
 = (sockaddr_ö *)&
ù_addr
;

51 
ªt
 = 
	`gë_if_addr
(
if_«me
, &
ù_addr
);

52 i‡(
ªt
 == 0)

54 
	`öë_¡›
(
AF_INET
, &
±r
->
sö_addr
, 
buf
, 20);

56  
ªt
;

57 
	}
}

59 
	$√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
)

61 
ªt
 = -1;

62 
i‰eq
 
i‰
;

63 
sockaddr
 
ù_addr
;

64 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

65 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

66 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

67 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

68 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFHWADDR
, &
i‰
) == 0) {

69 
i
;

70 
i
 = 0; i < 6; i++)

72 
	`•rötf
(
buf
 + 2*
i
, "%02x", ()
i‰
.
i‰_hwaddr
.
ß_d©a
[i]);

74 
ªt
 = 0;

75 
	`˛o£
(
sockfd
);

77  
ªt
;

78 
	}
}

80 
	$ˇl_chksum
(*
addr
, 
Àn
)

82 
∆e·
=
Àn
;

83 
sum
=0;

84 *
w
=
addr
;

85 
™swî
=0;

86 
∆e·
 > 1)

88 
sum
 +*
w
++;

89 
∆e·
 -= 2;

92 if–
∆e·
 == 1)

94 *(*)(&
™swî
Ë*(*)
w
;

95 
sum
 +
™swî
;

98 
sum
 = (sum >> 16) + (sum & 0xffff);

99 
sum
 += (sum >> 16);

100 
™swî
 = ~
sum
;

101  
™swî
;

102 
	}
}

105 
	$ˇl_time_öãrvÆ
(
timevÆ
 *
ﬁd_time
, timevÆ *
now_time
)

107 
öãrvÆ_m£c_öt
 = 0;

108 
öãrvÆ_m£c_dŸ
 = 0;

109 
u£d_time
 = 0;

110 
buf
[20];

111 i‡(
now_time
->
tv_u£c
 < 
ﬁd_time
->tv_usec)

113 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec - 1) * 1000;

114 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec)/1000;

115 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
 + 1000000Ë- 
ﬁd_time
->tv_usec))%1000;

119 
öãrvÆ_m£c_öt
 = (
now_time
->
tv_£c
 - 
ﬁd_time
->tv_sec) * 1000;

120 
öãrvÆ_m£c_öt
 +((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec)/1000;

121 
öãrvÆ_m£c_dŸ
 = (((
now_time
->
tv_u£c
Ë- 
ﬁd_time
->tv_usec))%1000;

123 
	`•rötf
(
buf
, "%Œu.%Œu", 
öãrvÆ_m£c_öt
, 
öãrvÆ_m£c_dŸ
);

124 
u£d_time
 = 
	`©of
(
buf
);

125  
u£d_time
;

126 
	}
}

129 
	$pög
(
ö_addr
 *
d°ù
, 
timeout
)

131 
timevÆ
 *
tvÆ
;

132 
maxfds
 = 0;

133 
fd_£t
 
ªadfds
;

134 
u£d_time
 = 0;

136 
sockaddr_ö
 
addr
;

137 
sockaddr_ö
 
‰om
;

139 
	`bzîo
(&
addr
,(addr));

140 
addr
.
sö_Ámûy
 = 
AF_INET
;

141 
addr
.
sö_addr
.
s_addr
 = 
d°ù
->s_addr;

143 
sockfd
;

145 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_ICMP
);

146 i‡(
sockfd
 > 0)

148 
timevÆ
 
timeo
;

150 
timeo
.
tv_£c
 = 
timeout
;

151 
timeo
.
tv_u£c
 = 0;

153 i‡(
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
timeo
, (timeo)) == 0)

155 
£nd∑ckë
[
PACKET_SIZE
];

156 
ªcv∑ckë
[
PACKET_SIZE
];

158 
	`mem£t
(
£nd∑ckë
, 0, (sendpacket));

160 
pid_t
 
pid
;

162 
pid
=
	`gëpid
();

164 
ù
 *
ùh
;

165 
icmp
 *icmp;

167 
icmp
=(icmp*)
£nd∑ckë
;

168 
icmp
->
icmp_ty≥
=
ICMP_ECHO
;

169 
icmp
->
icmp_code
=0;

170 
icmp
->
icmp_cksum
=0;

171 
icmp
->
icmp_£q
=0;

172 
icmp
->
icmp_id
=
pid
;

173 
tvÆ
(
timevÆ
 *)
icmp
->
icmp_d©a
;

174 
	`gëtimeofday
(
tvÆ
,
NULL
);

175 
icmp
->
icmp_cksum
=
	`ˇl_chksum
((*)icmp,(icmp));

177 
n
;

179 
i
;

180 
i
 = 0; i < 5; i++)

182 
n
 = 
	`£ndto
(
sockfd
, (*)&
£nd∑ckë
, (
icmp
), 0, (
sockaddr
 *)&
addr
, (addr));

184 i‡(
n
 > 0)

191 
	`FD_ZERO
(&
ªadfds
);

192 
	`FD_SET
(
sockfd
, &
ªadfds
);

193 
maxfds
 = 
sockfd
 + 1;

194 
n
 = 
	`£À˘
(
maxfds
, &
ªadfds
, 
NULL
, NULL, &
timeo
);

195 i‡(
n
 > 0 && 
	`FD_ISSET
(
sockfd
, &
ªadfds
))

198 
	`mem£t
(
ªcv∑ckë
, 0, (recvpacket));

199 
‰omÀn
 = (
‰om
);

200 
n
 = 
	`ªcv‰om
(
sockfd
, 
ªcv∑ckë
, ‘ecv∑ckë), 0, (
sockaddr
 *)&
‰om
, (
sockÀn_t
 *)&
‰omÀn
);

201 i‡(
n
 > 1)

203 
timevÆ
 *
pkt_tv
;

204 
timevÆ
 
now_tv
;

205 
	`gëtimeofday
(&
now_tv
, 
NULL
);

206 
pkt_tv
 = (
timevÆ
 *)
icmp
->
icmp_d©a
;

208 i‡(
‰om
.
sö_addr
.
s_addr
 =
d°ù
->s_addr)

210 
ùh
 = (
ù
 *)
ªcv∑ckë
;

211 
icmp
=(icm∞*)(
ªcv∑ckë
 + (
ùh
->
ù_hl
<<2));

214 i‡(
icmp
->
icmp_ty≥
 =
ICMP_ECHOREPLY
 && icmp->
icmp_id
 =
pid
)

217 
u£d_time
 = 
	`ˇl_time_öãrvÆ
(
pkt_tv
, &
now_tv
);

234 
	`˛o£
(
sockfd
);

236  
u£d_time
;

237 
	}
}

239 
	$√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
)

241 
u£d_time
 = 0;

242 
ho°ít
 *
he
 = 
	`gëho°by«me
(
ho°
);

243 i‡(
he
 && he->
h_addπy≥
 =
AF_INET
)

245 
u£d_time
 = 
	`pög
((
ö_addr
 *)
he
->
h_addr
, 
timeout
);

249 
	`¥ötf
("C™'àgë ho° o‡%s\n", 
ho°
);

251  
u£d_time
;

252 
	}
}

255 
	#ROUTE_FILE
 "/¥oc/√t/rouã"

	)

257 
	srouã_öfo


259 
	möãrÁ˚_buf
[20];

260 
	md°_buf
[20];

261 
	mgw_buf
[20];

262 
	mÊags_buf
[20];

263 
	mªf_buf
[20];

264 
	mu£_buf
[20];

265 
	mmëric_buf
[20];

266 
	mmask_buf
[20];

267 
	mmtu_buf
[20];

268 
	mwödow_buf
[20];

269 
rouã_öfo
 *
	m√xt
;

272 
	$dump_rouã
(
rouã_öfo
 *
rouã
)

274 
rouã_öfo
 *
cur
 = 
rouã
;

275 
	`¥ötf
("cur:%p\äext:%p\nd°: %s\tgw:%s\tmask:%s\n", 
cur
, cur->
√xt
, cur->
d°_buf
, cur->
gw_buf
, cur->
mask_buf
);

276 
	}
}

278 
	$check_rouã_if
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
)

280 
ªt
 = 0;

281 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

283 
ªt
 = 1;

285  
ªt
;

286 
	}
}

288 
	$gë_rouã_öfo
(*
buf
, 
rouã_öfo
 *
⁄e_rouã
)

290 *
tokí
 = 
NULL
;

291 *
ßve_±r1
 = 
NULL
;

292 
	`mem£t
(
⁄e_rouã
, 0, (
rouã_öfo
));

293 
tokí
 = 
	`°πok_r
(
buf
, "\t", &
ßve_±r1
);

294 
i
 = 0;

295 
tokí
)

297 
i
)

300 
	`°r˝y
(
⁄e_rouã
->
öãrÁ˚_buf
, 
tokí
);

303 
	`°r˝y
(
⁄e_rouã
->
d°_buf
, 
tokí
);

306 
	`°r˝y
(
⁄e_rouã
->
gw_buf
, 
tokí
);

309 
	`°r˝y
(
⁄e_rouã
->
Êags_buf
, 
tokí
);

312 
	`°r˝y
(
⁄e_rouã
->
ªf_buf
, 
tokí
);

315 
	`°r˝y
(
⁄e_rouã
->
u£_buf
, 
tokí
);

318 
	`°r˝y
(
⁄e_rouã
->
mëric_buf
, 
tokí
);

321 
	`°r˝y
(
⁄e_rouã
->
mask_buf
, 
tokí
);

324 
	`°r˝y
(
⁄e_rouã
->
mtu_buf
, 
tokí
);

327 
	`°r˝y
(
⁄e_rouã
->
wödow_buf
, 
tokí
);

335 
i
++;

336 
tokí
 = 
	`°πok_r
(
NULL
, "\t", &
ßve_±r1
);

339 
	}
}

341 
rouã_öfo
 *
	$gë_rouã_li°
()

343 
löe_buf
[1000];

344 
FILE
 *
fûe
 = 
	`f›í
(
ROUTE_FILE
, "r");

345 
rouã_öfo
 *
ªt
 = 
NULL
;

346 i‡(
fûe
)

348 
	`mem£t
(
löe_buf
, 0, (line_buf));

350 
	`fgës
(
löe_buf
, ÷öe_buf),
fûe
);

351 
rouã_öfo
 *
tmp
 = 
NULL
;

352 
	`fgës
(
löe_buf
, ÷öe_buf), 
fûe
))

354 
rouã_öfo
 *
⁄e_rouã
 = 
	`mÆloc
((route_info));

355 
	`gë_rouã_öfo
(
löe_buf
, 
⁄e_rouã
);

357 i‡(
tmp
 =
NULL
)

359 
ªt
 = 
⁄e_rouã
;

363 
tmp
->
√xt
 = 
⁄e_rouã
;

366 
tmp
 = 
⁄e_rouã
;

368 
	`f˛o£
(
fûe
);

370  
ªt
;

371 
	}
}

373 
	$‰ì_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

375 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

376 
cur
)

378 
rouã_öfo
 *
tmp
 = 
cur
;

379 
cur
 = cur->
√xt
;

380 
	`‰ì
(
tmp
);

383 
	}
}

385 
sockaddr
 
	$gë_sockaddr
(*
buf
)

387 *
íd±r
;

388 
sockaddr
 
addr
;

389 
numbî
 = 0;

390 
sockaddr_ö
 *
ùv4_addr
 = (sockaddr_ö *)&
addr
;

391 
ùv4_addr
->
sö_Ámûy
 = 
AF_INET
;

392 
ùv4_addr
->
sö_p‹t
 = 0;

393 
numbî
 = 
	`°πﬁl
(
buf
, &
íd±r
, 16);

394 
ùv4_addr
->
sö_addr
.
s_addr
 = (
ö_addr_t
)
numbî
;

395  
addr
;

396 
	}
}

398 
	$dñ_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

400 
πíåy
 
π
;

401 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

402 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

403 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

404 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

405 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

406 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

407 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

408 i‡(
sockfd
 > 0)

410 
	`io˘l
(
sockfd
, 
SIOCDELRT
, &
π
);

411 
	`˛o£
(
sockfd
);

414 
	}
}

416 
	$add_⁄e_rouã
(
rouã_öfo
 *
⁄e_rouã
)

418 
πíåy
 
π
;

419 
	`mem£t
((*Ë&
π
, 0, (
πíåy
));

420 
π
.
π_Êags
 = ()
	`©oi
(
⁄e_rouã
->
Êags_buf
);

421 
π
.
π_dev
 = 
⁄e_rouã
->
öãrÁ˚_buf
;

422 
π
.
π_g©eway
 = 
	`gë_sockaddr
(
⁄e_rouã
->
gw_buf
);

423 
π
.
π_gímask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

424 
π
.
π_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

425 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

426 i‡(
sockfd
 > 0)

428 
	`io˘l
(
sockfd
, 
SIOCADDRT
, &
π
);

429 
	`˛o£
(
sockfd
);

432 
	}
}

434 
	$√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
 *
sock
)

436 
ªt
 = -1;

437 
i‰eq
 
i‰
;

438 
sockaddr
 
ù_addr
;

439 
	`mem£t
(&
ù_addr
, 0, (
sockaddr
));

440 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

441 
	`°r˝y
(
i‰
.
i‰_«me
, 
if_«me
);

442 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

443 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFADDR
, &
i‰
) == 0) {

444 
	`mem˝y
(
sock
, &
i‰
.
i‰_addr
, (
sockaddr
));

445 
ªt
 = 0;

446 
	`˛o£
(
sockfd
);

448  
ªt
;

449 
	}
}

451 
	$rouã_√ed_dñëe
(
rouã_öfo
 *
⁄e_rouã
, *
if_«me
, 
sockaddr
 *
if_addr
)

453 
ªt
 = 0;

454 i‡(
	`°rcmp
(
⁄e_rouã
->
öãrÁ˚_buf
, 
if_«me
) == 0)

457 
sockaddr
 
rouã_d°
;

458 
sockaddr
 
rouã_mask
;

459 
rouã_d°
 = 
	`gë_sockaddr
(
⁄e_rouã
->
d°_buf
);

460 
rouã_mask
 = 
	`gë_sockaddr
(
⁄e_rouã
->
mask_buf
);

461 
sockaddr_ö
 *
ö_rouã_d°
 = (sockaddr_ö *)&
rouã_d°
;

462 
sockaddr_ö
 *
ö_rouã_mask
 = (sockaddr_ö *)&
rouã_mask
;

463 
sockaddr_ö
 *
ö_if_addr
 = (sockaddr_ö *)
if_addr
;

464 i‡((
ö_rouã_d°
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr) !=

465 (
ö_if_addr
->
sö_addr
.
s_addr
 & 
ö_rouã_mask
->sin_addr.s_addr))

467 
ªt
 = 1;

470  
ªt
;

471 
	}
}

473 
	$dñ_rouãs_by_if
(
rouã_öfo
 *
fú°_rouã
, *
dev
)

475 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

476 
sockaddr
 
addr
;

477 
	`mem£t
(&
addr
, 0, (
sockaddr
));

478 
ªt
 = 
	`√t_toﬁ_gë_if_addr
(
dev
, &
addr
);

479 i‡(
ªt
 == 0)

481 
cur
)

483 i‡(
	`rouã_√ed_dñëe
(
cur
, 
dev
, &
addr
))

485 
	`dñ_⁄e_rouã
(
cur
);

487 
cur
 = cur->
√xt
;

491 
	}
}

493 
	$dump_rouã_li°
(
rouã_öfo
 *
fú°_rouã
)

495 
rouã_öfo
 *
cur
 = 
fú°_rouã
;

496 
cur
)

498 
	`dump_rouã
(
cur
);

499 
cur
 = cur->
√xt
;

501 
	}
}

504 
	$√t_toﬁ_ª£t_rouãs
(*
dev
)

506 
rouã_öfo
 *
rouã_li°
 = 
	`gë_rouã_li°
();

507 i‡(
rouã_li°
)

510 
	`dñ_rouãs_by_if
(
rouã_li°
, 
dev
);

511 
	`‰ì_rouã_li°
(
rouã_li°
);

513 
	}
}

515 *
	$ªcv_d©a
(
sockfd
, *
Àn
)

517 
ssize_t
 
ªcv_Àn
 = 0;

518 
ssize_t
 
ªcv_Àn_tŸÆ
 = 0;

519 *
ªcv_±r
 = 
NULL
;

520 i‡(
sockfd
 > 0)

524 
ªcv_±r
 = 
	`ªÆloc
‘ecv_±r, 
ªcv_Àn_tŸÆ
 + 
MAX_ALLOC_LEN
);

525 i‡(
ªcv_±r
)

528 
	`mem£t
(
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 0, 
MAX_ALLOC_LEN
);

529 
ªcv_Àn
 = 
	`ªcv
(
sockfd
, 
ªcv_±r
 + 
ªcv_Àn_tŸÆ
, 
MAX_ALLOC_LEN
, 0);

530 i‡(
ªcv_Àn
 > 0)

532 
ªcv_Àn_tŸÆ
 +
ªcv_Àn
;

534 if(
ªcv_Àn
 == 0)

540 
	`FREE_PTR
(
ªcv_±r
);

546 *
Àn
 = 
ªcv_Àn_tŸÆ
;

547  
ªcv_±r
;

548 
	}
}

550 *
	$√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
)

552 *
web
 = 
NULL
;

553 
ho°ít
 *
he
;

554 
sockaddr_ö
 
£rvî
;

555 
£nd_num
;

556 
sockfd
;

557 
ªt
;

558 if((
he
=
	`gëho°by«me
(
ho°
)))

560 
sockfd
=
	`sockë
(
AF_INET
,
SOCK_STREAM
, 0);

561 
timevÆ
 
timeout
 = {8, 0};

562 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (*)&
timeout
, (timeout));

563 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, (*)&
timeout
, (timeout));

564 if(
sockfd
 >= 0)

566 
	`bzîo
(&
£rvî
,(server));

567 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

568 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

569 
£rvî
.
sö_addr
 = *((
ö_addr
 *)
he
->
h_addr
);

570 
ªt
 = 
	`c⁄√˘
(
sockfd
, (
sockaddr
 *)&
£rvî
, (server));

571 if(
ªt
 >= 0)

573 
£nd_num
 = 
	`£nd
(
sockfd
, 
£nd_buf
, 
£nd_Àn
, 0);

574 i‡(
£nd_num
 > 0)

576 
web
 = 
	`ªcv_d©a
(
sockfd
, 
ªcv_Àn
);

579 
	`˛o£
(
sockfd
);

582  
web
;

583 
	}
}

585 
cJSON
 *
	$√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
)

587 
cJSON
 *
ªt
 = 
NULL
;

588 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

589 i‡(
°r_ªq
)

591 
ªcv_Àn
 = 0;

592 *
ª•⁄£
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
°r_ªq
, 
	`°æí
(°r_ªqË+ 1, &
ªcv_Àn
);

593 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

595 
ªt
 = 
	`cJSON_P¨£
(
ª•⁄£
);

597 
	`‰ì
(
°r_ªq
);

599  
ªt
;

600 
	}
}

602 *
	$√t_toﬁ_hâp_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, *
body
, *
ªcv_Àn
)

604 *
ªt
 = 
NULL
;

605 *
web_hód
 = "POST %s HTTP/1.1\r\n"

616 
hód_buf
[1000];

617 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
	`°æí
(
body
));

619 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ såÀn(
body
) + 1;

620 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

621 i‡(
£nd_buf
)

623 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

624 
	`°rˇt
(
£nd_buf
, 
body
);

625 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

626 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
	`°æí
(£nd_buf), 
ªcv_Àn
);

627 
	`‰ì
(
£nd_buf
);

629  
ªt
;

630 
	}
}

632 *
	$√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
)

634 *
ªt
 = 
NULL
;

635 *
web_hód
 = "POST %s HTTP/1.1\r\n"

647 
hód_buf
[1000];

648 
	`•rötf
(
hód_buf
, 
web_hód
, 
uri
, 
ho°
, 
body_Àn
);

650 
tŸÆ_Àn
 = 
	`°æí
(
hód_buf
Ë+ 
body_Àn
 + 1;

651 *
£nd_buf
 = 
	`mÆloc
(
tŸÆ_Àn
);

652 i‡(
£nd_buf
)

654 
	`°r˝y
(
£nd_buf
, 
hód_buf
);

655 
	`mem˝y
(
£nd_buf
 + 
	`°æí
(
hód_buf
), 
body
, 
body_Àn
);

656 
£nd_buf
[
tŸÆ_Àn
 - 1] = 0;

657 
ªt
 = 
	`√t_toﬁ_t˝_˛õ¡
(
ho°
, 
p‹t
, 
£nd_buf
, 
tŸÆ_Àn
 - 1, 
ªcv_Àn
);

658 
	`‰ì
(
£nd_buf
);

660  
ªt
;

661 
	}
}

663 
cJSON
 *
	$√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
)

665 
cJSON
 *
ªt
 = 
NULL
;

666 *
°r_ªq
 = 
	`cJSON_Pröt
(
ªq
);

667 i‡(
°r_ªq
)

669 
ªcv_Àn
 = 0;

670 *
ª•⁄£
 = 
	`√t_toﬁ_hâp_˛õ¡
(
ho°
, 
p‹t
, 
uri
, 
°r_ªq
, &
ªcv_Àn
);

671 i‡(
ª•⁄£
 && 
ªcv_Àn
 > 0)

674 *
±r
 = 
	`°r°r
(
ª•⁄£
, "\r\n\r\n");

675 i‡(
±r
)

677 
±r
 += 4;

681 
±r
 = 
	`°r°r
(
ª•⁄£
, "\n\n");

682 i‡(
±r
)

684 
±r
 += 2;

687 i‡(
±r
)

689 
ªt
 = 
	`cJSON_P¨£
(
±r
);

691 
	`‰ì
(
ª•⁄£
);

693 
	`‰ì
(
°r_ªq
);

695  
ªt
;

696 
	}
}

	@vppnconfig/net_tool.h

1 #i‚de‡
_NET_TOOL_H_


2 
	#_NET_TOOL_H_


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<√t/rouã.h
>

10 
	~<√t/if.h
>

11 
	~"cJSON.h
"

14 
√t_toﬁ_gë_if_ù
(*
if_«me
, *
buf
);

17 
√t_toﬁ_gë_if_addr
(*
if_«me
, 
sockaddr
*);

20 
√t_toﬁ_gë_if_hwaddr
(*
if_«me
, *
buf
);

23 
√t_toﬁ_pög_ho°
(c⁄° * 
ho°
, 
timeout
);

26 
√t_toﬁ_ª£t_rouãs
(*
dev
);

29 
√t_toﬁ_t˝_˛õ¡
(*
ho°
, 
p‹t
, *
£nd_buf
, 
£nd_Àn
, *
ªcv_Àn
);

31 
cJSON
 *

32 
√t_toﬁ_t˝_js⁄_˛õ¡
(*
ho°
, 
p‹t
, 
cJSON
 *
ªq
);

35 
√t_toﬁ_hâp_˛õ¡_øw
(*
ho°
, 
p‹t
, *
uri
, *
body
, 
body_Àn
, *
ªcv_Àn
);

37 
cJSON
 *

38 
√t_toﬁ_hâp_js⁄_˛õ¡
(*
ho°
, 
p‹t
, *
uri
, 
cJSON
 *
ªq
);

	@vppnconfig/nvram-common.h

1 #i‚de‡
__NVRAM_COMMON_H__


2 
	#__NVRAM_COMMON_H__


	)

4 
	#NVRAM_BIN
 "c⁄fig"

	)

6 
	#BIRD_INFO_FILE
 "/ëc/sôe/búd_öfo.txt"

	)

7 
	#SITE_FILE
 "/ëc/sôe/sôe%d.c⁄f"

	)

9 
	#NVRAM_INTERFACE
 "sôe_öãrÁ˚"

	)

10 
	#NVRAM_REMOTEPEER
 "sôe_ªmŸe_≥î%d"

	)

11 
	#NVRAM_LOCALVIP
 "sôe_loˇl_vù%d"

	)

12 
	#NVRAM_LOCALVSUBNET
 "sôe_loˇlsub√t"

	)

14 
	#NVRAM_SITE_ON
 "sôe%d_⁄"

	)

15 
	#NVRAM_SITE_SERVER
 "sôe%d_£rvî"

	)

17 
	#CLOUD_HOST
 "˛oud_ho°"

	)

18 
	#CLOUD_PORT
 "˛oud_p‹t"

	)

20 
	#NVRAM_SITE_MANAGER_HOST
 "sôe_˛oud_ho°"

	)

21 
	#NVRAM_SITE_MANAGER_PORT
 "sôe_˛oud_p‹t"

	)

23 
	#NVRAM_VPPN_WHITELIST_FMT
 "sôe_whôñi°%d"

	)

25 
	#FILE_SITE_MANAGER
 "/ëc/sôe/m™agî"

	)

	@vppnconfig/nvram-op.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~"nvøm-›.h
"

6 
	~"nvøm-comm⁄.h
"

8 
	$skù_¸lf
(*
°r
)

10 
Àn
 = 
	`°æí
(
°r
);

11 
i
;

12 
i
 = 0; i < 
Àn
; i++)

14 i‡(
°r
[
i
] == '\n' || str[i] == '\r')

16 
°r
[
i
] = 0;

21 
	}
}

23 
	$SëC⁄fig
(c⁄° *
«me
, *
vÆue
)

25 
FILE
 *
fûe
 = 
NULL
;

26 *
cmd_buf
;

27 
ªad_buf
[100];

28 
cmd_buf_Àn
 = 
	`°æí
(
«me
Ë+ såÀn(
vÆue
) + 100;

29 
cmd_buf
 = 
	`mÆloc
(
cmd_buf_Àn
);

30 i‡(
cmd_buf
)

32 
	`•rötf
(
cmd_buf
, 
NVRAM_BIN
" së %s=\"%s\"", 
«me
, 
vÆue
);

34 
fûe
 = 
	`p›í
(
cmd_buf
, "r");

35 i‡(
fûe
)

37 
	`fgës
(
ªad_buf
, ‘ód_buf), 
fûe
))

39 
	`u¶ìp
(100);

41 
	`p˛o£
(
fûe
);

43 
	`‰ì
(
cmd_buf
);

47 
	}
}

49 
	$Un£tC⁄fig
(c⁄° *
«me
)

51 
FILE
 *
fûe
 = 
NULL
;

52 
cmd_buf
[4000];

53 
ªad_buf
[100];

54 
	`•rötf
(
cmd_buf
, 
NVRAM_BIN
" un£à%s", 
«me
);

55 
	`¥ötf
("%s\n", 
cmd_buf
);

56 
fûe
 = 
	`p›í
(
cmd_buf
, "r");

57 i‡(
fûe
)

59 
	`fgës
(
ªad_buf
, ‘ód_buf), 
fûe
))

61 
	`u¶ìp
(1000);

63 
	`p˛o£
(
fûe
);

67 
	}
}

69 * 
	$GëC⁄fig
(c⁄° *
«me
)

71 
FILE
 *
fûe
 = 
NULL
;

72 
cmd_buf
[4000];

73 
ªad_buf
[4000];

74 *
ªt_±r
 = 
NULL
;

75 
	`•rötf
(
cmd_buf
, 
NVRAM_BIN
 " gë %s", 
«me
);

76 
fûe
 = 
	`p›í
(
cmd_buf
, "r");

77 i‡(
fûe
)

79 
œ°_Àn
 = 0;

80 
	`fgës
(
ªad_buf
, ‘ód_buf), 
fûe
))

82 
	`skù_¸lf
(
ªad_buf
);

83 i‡(!
ªt_±r
)

85 
œ°_Àn
 = 
	`°æí
(
ªad_buf
) + 1;

86 
ªt_±r
 = 
	`ªÆloc
‘ë_±r, 
œ°_Àn
);

87 
ªt_±r
[0] = 0;

91 
œ°_Àn
 = 
	`°æí
(
ªad_buf
Ë+ såÀn(
ªt_±r
) + 1;

92 
ªt_±r
 = 
	`ªÆloc
‘ë_±r, 
œ°_Àn
);

94 
	`°rˇt
(
ªt_±r
, 
ªad_buf
);

96 
	`p˛o£
(
fûe
);

98  
ªt_±r
;

99 
	}
}

	@vppnconfig/nvram-op.h

1 #i‚de‡
__NVRAM_OP_H__


2 
	#__NVRAM_OP_H__


	)

4 
SëC⁄fig
(c⁄° *
«me
, *
vÆue
);

5 
Un£tC⁄fig
(c⁄° *
«me
);

6 * 
GëC⁄fig
(c⁄° *
«me
);

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/stat.h

1 #i‚de‡
_LINUX_STAT_H


2 
	#_LINUX_STAT_H


	)

5 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

7 
	#S_IFMT
 00170000

	)

8 
	#S_IFSOCK
 0140000

	)

9 
	#S_IFLNK
 0120000

	)

10 
	#S_IFREG
 0100000

	)

11 
	#S_IFBLK
 0060000

	)

12 
	#S_IFDIR
 0040000

	)

13 
	#S_IFCHR
 0020000

	)

14 
	#S_IFIFO
 0010000

	)

15 
	#S_ISUID
 0004000

	)

16 
	#S_ISGID
 0002000

	)

17 
	#S_ISVTX
 0001000

	)

19 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

20 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

21 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

22 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

23 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

24 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

25 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

27 
	#S_IRWXU
 00700

	)

28 
	#S_IRUSR
 00400

	)

29 
	#S_IWUSR
 00200

	)

30 
	#S_IXUSR
 00100

	)

32 
	#S_IRWXG
 00070

	)

33 
	#S_IRGRP
 00040

	)

34 
	#S_IWGRP
 00020

	)

35 
	#S_IXGRP
 00010

	)

37 
	#S_IRWXO
 00007

	)

38 
	#S_IROTH
 00004

	)

39 
	#S_IWOTH
 00002

	)

40 
	#S_IXOTH
 00001

	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/route.h

20 #i‚de‡
_NET_ROUTE_H


21 
	#_NET_ROUTE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<√töë/ö.h
>

27 
	~<bôs/w‹dsize.h
>

31 
	sπíåy


33 
	mπ_∑d1
;

34 
sockaddr
 
	mπ_d°
;

35 
sockaddr
 
	mπ_g©eway
;

36 
sockaddr
 
	mπ_gímask
;

37 
	mπ_Êags
;

38 
	mπ_∑d2
;

39 
	mπ_∑d3
;

40 
	mπ_tos
;

41 
	mπ_˛ass
;

42 #i‡
__WORDSIZE
 == 64

43 
	mπ_∑d4
[3];

45 
	mπ_∑d4
;

47 
	mπ_mëric
;

48 *
	mπ_dev
;

49 
	mπ_mtu
;

50 
	mπ_wödow
;

51 
	mπ_úâ
;

54 
	#π_mss
 
π_mtu


	)

57 
	sö6_πmsg


59 
ö6_addr
 
	mπmsg_d°
;

60 
ö6_addr
 
	mπmsg_§c
;

61 
ö6_addr
 
	mπmsg_g©eway
;

62 
u_öt32_t
 
	mπmsg_ty≥
;

63 
u_öt16_t
 
	mπmsg_d°_Àn
;

64 
u_öt16_t
 
	mπmsg_§c_Àn
;

65 
u_öt32_t
 
	mπmsg_mëric
;

66 
	mπmsg_öfo
;

67 
u_öt32_t
 
	mπmsg_Êags
;

68 
	mπmsg_ifödex
;

72 
	#RTF_UP
 0x0001

	)

73 
	#RTF_GATEWAY
 0x0002

	)

75 
	#RTF_HOST
 0x0004

	)

76 
	#RTF_REINSTATE
 0x0008

	)

77 
	#RTF_DYNAMIC
 0x0010

	)

78 
	#RTF_MODIFIED
 0x0020

	)

79 
	#RTF_MTU
 0x0040

	)

80 
	#RTF_MSS
 
RTF_MTU


	)

81 
	#RTF_WINDOW
 0x0080

	)

82 
	#RTF_IRTT
 0x0100

	)

83 
	#RTF_REJECT
 0x0200

	)

84 
	#RTF_STATIC
 0x0400

	)

85 
	#RTF_XRESOLVE
 0x0800

	)

86 
	#RTF_NOFORWARD
 0x1000

	)

87 
	#RTF_THROW
 0x2000

	)

88 
	#RTF_NOPMTUDISC
 0x4000

	)

91 
	#RTF_DEFAULT
 0x00010000

	)

92 
	#RTF_ALLONLINK
 0x00020000

	)

93 
	#RTF_ADDRCONF
 0x00040000

	)

95 
	#RTF_LINKRT
 0x00100000

	)

96 
	#RTF_NONEXTHOP
 0x00200000

	)

98 
	#RTF_CACHE
 0x01000000

	)

99 
	#RTF_FLOW
 0x02000000

	)

100 
	#RTF_POLICY
 0x04000000

	)

102 
	#RTCF_VALVE
 0x00200000

	)

103 
	#RTCF_MASQ
 0x00400000

	)

104 
	#RTCF_NAT
 0x00800000

	)

105 
	#RTCF_DOREDIRECT
 0x01000000

	)

106 
	#RTCF_LOG
 0x02000000

	)

107 
	#RTCF_DIRECTSRC
 0x04000000

	)

109 
	#RTF_LOCAL
 0x80000000

	)

110 
	#RTF_INTERFACE
 0x40000000

	)

111 
	#RTF_MULTICAST
 0x20000000

	)

112 
	#RTF_BROADCAST
 0x10000000

	)

113 
	#RTF_NAT
 0x08000000

	)

115 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

116 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

118 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

120 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

121 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

123 
	#RT_CLASS_UNSPEC
 0

	)

124 
	#RT_CLASS_DEFAULT
 253

	)

126 
	#RT_CLASS_MAIN
 254

	)

127 
	#RT_CLASS_LOCAL
 255

	)

128 
	#RT_CLASS_MAX
 255

	)

131 
	#RTMSG_ACK
 
NLMSG_ACK


	)

132 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

134 
	#RTMSG_NEWDEVICE
 0x11

	)

135 
	#RTMSG_DELDEVICE
 0x12

	)

136 
	#RTMSG_NEWROUTE
 0x21

	)

137 
	#RTMSG_DELROUTE
 0x22

	)

138 
	#RTMSG_NEWRULE
 0x31

	)

139 
	#RTMSG_DELRULE
 0x32

	)

140 
	#RTMSG_CONTROL
 0x40

	)

142 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/ip.h

18 #i‚de‡
__NETINET_IP_H


19 
	#__NETINET_IP_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<√töë/ö.h
>

26 
__BEGIN_DECLS


28 
	stime°amp


30 
u_öt8_t
 
	mÀn
;

31 
u_öt8_t
 
	m±r
;

32 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


33 
	mÊags
:4;

34 
	movîÊow
:4;

35 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


36 
	movîÊow
:4;

37 
	mÊags
:4;

41 
u_öt32_t
 
	md©a
[9];

44 
	sùhdr


46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	mihl
:4;

48 
	mvîsi⁄
:4;

49 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	mvîsi⁄
:4;

51 
	mihl
:4;

55 
u_öt8_t
 
	mtos
;

56 
u_öt16_t
 
	mtŸ_Àn
;

57 
u_öt16_t
 
	mid
;

58 
u_öt16_t
 
	m‰ag_off
;

59 
u_öt8_t
 
	mâl
;

60 
u_öt8_t
 
	m¥Ÿocﬁ
;

61 
u_öt16_t
 
	mcheck
;

62 
u_öt32_t
 
	mßddr
;

63 
u_öt32_t
 
	mdaddr
;

67 #ifde‡
__USE_BSD


107 
	sù


109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
	mù_hl
:4;

111 
	mù_v
:4;

113 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


114 
	mù_v
:4;

115 
	mù_hl
:4;

117 
u_öt8_t
 
	mù_tos
;

118 
u_sh‹t
 
	mù_Àn
;

119 
u_sh‹t
 
	mù_id
;

120 
u_sh‹t
 
	mù_off
;

121 
	#IP_RF
 0x8000

	)

122 
	#IP_DF
 0x4000

	)

123 
	#IP_MF
 0x2000

	)

124 
	#IP_OFFMASK
 0x1ff‡

	)

125 
u_öt8_t
 
	mù_âl
;

126 
u_öt8_t
 
	mù_p
;

127 
u_sh‹t
 
	mù_sum
;

128 
ö_addr
 
	mù_§c
, 
	mù_d°
;

134 
	sù_time°amp


136 
u_öt8_t
 
	mùt_code
;

137 
u_öt8_t
 
	mùt_Àn
;

138 
u_öt8_t
 
	mùt_±r
;

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	mùt_Êg
:4;

141 
	mùt_oÊw
:4;

143 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


144 
	mùt_oÊw
:4;

145 
	mùt_Êg
:4;

147 
u_öt32_t
 
	md©a
[9];

151 
	#IPVERSION
 4

	)

152 
	#IP_MAXPACKET
 65535

	)

160 
	#IPTOS_ECN_MASK
 0x03

	)

161 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

162 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

163 
	#IPTOS_ECN_ECT1
 0x01

	)

164 
	#IPTOS_ECN_ECT0
 0x02

	)

165 
	#IPTOS_ECN_CE
 0x03

	)

173 
	#IPTOS_DSCP_MASK
 0xfc

	)

174 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

175 
	#IPTOS_DSCP_AF11
 0x28

	)

176 
	#IPTOS_DSCP_AF12
 0x30

	)

177 
	#IPTOS_DSCP_AF13
 0x38

	)

178 
	#IPTOS_DSCP_AF21
 0x48

	)

179 
	#IPTOS_DSCP_AF22
 0x50

	)

180 
	#IPTOS_DSCP_AF23
 0x58

	)

181 
	#IPTOS_DSCP_AF31
 0x68

	)

182 
	#IPTOS_DSCP_AF32
 0x70

	)

183 
	#IPTOS_DSCP_AF33
 0x78

	)

184 
	#IPTOS_DSCP_AF41
 0x88

	)

185 
	#IPTOS_DSCP_AF42
 0x90

	)

186 
	#IPTOS_DSCP_AF43
 0x98

	)

187 
	#IPTOS_DSCP_EF
 0xb8

	)

194 
	#IPTOS_CLASS_MASK
 0xe0

	)

195 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

196 
	#IPTOS_CLASS_CS0
 0x00

	)

197 
	#IPTOS_CLASS_CS1
 0x20

	)

198 
	#IPTOS_CLASS_CS2
 0x40

	)

199 
	#IPTOS_CLASS_CS3
 0x60

	)

200 
	#IPTOS_CLASS_CS4
 0x80

	)

201 
	#IPTOS_CLASS_CS5
 0xa0

	)

202 
	#IPTOS_CLASS_CS6
 0xc0

	)

203 
	#IPTOS_CLASS_CS7
 0xe0

	)

205 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

211 
	#IPTOS_TOS_MASK
 0x1E

	)

212 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

213 
	#IPTOS_LOWDELAY
 0x10

	)

214 
	#IPTOS_THROUGHPUT
 0x08

	)

215 
	#IPTOS_RELIABILITY
 0x04

	)

216 
	#IPTOS_LOWCOST
 0x02

	)

217 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

222 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

223 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

224 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

225 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

226 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

227 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

228 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

229 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

230 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

231 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

236 
	#IPOPT_COPY
 0x80

	)

237 
	#IPOPT_CLASS_MASK
 0x60

	)

238 
	#IPOPT_NUMBER_MASK
 0x1f

	)

240 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

241 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

242 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

244 
	#IPOPT_CONTROL
 0x00

	)

245 
	#IPOPT_RESERVED1
 0x20

	)

246 
	#IPOPT_DEBMEAS
 0x40

	)

247 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

248 
	#IPOPT_RESERVED2
 0x60

	)

250 
	#IPOPT_EOL
 0

	)

251 
	#IPOPT_END
 
IPOPT_EOL


	)

252 
	#IPOPT_NOP
 1

	)

253 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

255 
	#IPOPT_RR
 7

	)

256 
	#IPOPT_TS
 68

	)

257 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

258 
	#IPOPT_SECURITY
 130

	)

259 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

260 
	#IPOPT_LSRR
 131

	)

261 
	#IPOPT_SATID
 136

	)

262 
	#IPOPT_SID
 
IPOPT_SATID


	)

263 
	#IPOPT_SSRR
 137

	)

264 
	#IPOPT_RA
 148

	)

269 
	#IPOPT_OPTVAL
 0

	)

270 
	#IPOPT_OLEN
 1

	)

271 
	#IPOPT_OFFSET
 2

	)

272 
	#IPOPT_MINOFF
 4

	)

274 
	#MAX_IPOPTLEN
 40

	)

277 
	#IPOPT_TS_TSONLY
 0

	)

278 
	#IPOPT_TS_TSANDADDR
 1

	)

279 
	#IPOPT_TS_PRESPEC
 3

	)

282 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

283 
	#IPOPT_SECUR_CONFID
 0xf135

	)

284 
	#IPOPT_SECUR_EFTO
 0x789a

	)

285 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

286 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

287 
	#IPOPT_SECUR_SECRET
 0xd788

	)

288 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

293 
	#MAXTTL
 255

	)

294 
	#IPDEFTTL
 64

	)

295 
	#IPFRAGTTL
 60

	)

296 
	#IPTTLDEC
 1

	)

298 
	#IP_MSS
 576

	)

300 
	g__END_DECLS


	@/usr/include/netinet/ip_icmp.h

18 #i‚de‡
__NETINET_IP_ICMP_H


19 
	#__NETINET_IP_ICMP_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
__BEGIN_DECLS


26 
	sicmphdr


28 
u_öt8_t
 
	mty≥
;

29 
u_öt8_t
 
	mcode
;

30 
u_öt16_t
 
	mchecksum
;

35 
u_öt16_t
 
	mid
;

36 
u_öt16_t
 
	m£quí˚
;

37 } 
	mecho
;

38 
u_öt32_t
 
	mg©eway
;

41 
u_öt16_t
 
	m__glibc_ª£rved
;

42 
u_öt16_t
 
	mmtu
;

43 } 
	m‰ag
;

44 } 
	mun
;

47 
	#ICMP_ECHOREPLY
 0

	)

48 
	#ICMP_DEST_UNREACH
 3

	)

49 
	#ICMP_SOURCE_QUENCH
 4

	)

50 
	#ICMP_REDIRECT
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TIME_EXCEEDED
 11

	)

53 
	#ICMP_PARAMETERPROB
 12

	)

54 
	#ICMP_TIMESTAMP
 13

	)

55 
	#ICMP_TIMESTAMPREPLY
 14

	)

56 
	#ICMP_INFO_REQUEST
 15

	)

57 
	#ICMP_INFO_REPLY
 16

	)

58 
	#ICMP_ADDRESS
 17

	)

59 
	#ICMP_ADDRESSREPLY
 18

	)

60 
	#NR_ICMP_TYPES
 18

	)

64 
	#ICMP_NET_UNREACH
 0

	)

65 
	#ICMP_HOST_UNREACH
 1

	)

66 
	#ICMP_PROT_UNREACH
 2

	)

67 
	#ICMP_PORT_UNREACH
 3

	)

68 
	#ICMP_FRAG_NEEDED
 4

	)

69 
	#ICMP_SR_FAILED
 5

	)

70 
	#ICMP_NET_UNKNOWN
 6

	)

71 
	#ICMP_HOST_UNKNOWN
 7

	)

72 
	#ICMP_HOST_ISOLATED
 8

	)

73 
	#ICMP_NET_ANO
 9

	)

74 
	#ICMP_HOST_ANO
 10

	)

75 
	#ICMP_NET_UNR_TOS
 11

	)

76 
	#ICMP_HOST_UNR_TOS
 12

	)

77 
	#ICMP_PKT_FILTERED
 13

	)

78 
	#ICMP_PREC_VIOLATION
 14

	)

79 
	#ICMP_PREC_CUTOFF
 15

	)

80 
	#NR_ICMP_UNREACH
 15

	)

83 
	#ICMP_REDIR_NET
 0

	)

84 
	#ICMP_REDIR_HOST
 1

	)

85 
	#ICMP_REDIR_NETTOS
 2

	)

86 
	#ICMP_REDIR_HOSTTOS
 3

	)

89 
	#ICMP_EXC_TTL
 0

	)

90 
	#ICMP_EXC_FRAGTIME
 1

	)

93 #ifde‡
__USE_BSD


125 
	~<√töë/ö.h
>

126 
	~<√töë/ù.h
>

131 
	sicmp_ø_addr


133 
u_öt32_t
 
	múa_addr
;

134 
u_öt32_t
 
	múa_¥e„ªn˚
;

137 
	sicmp


139 
u_öt8_t
 
	micmp_ty≥
;

140 
u_öt8_t
 
	micmp_code
;

141 
u_öt16_t
 
	micmp_cksum
;

144 
u_ch¨
 
	mih_µå
;

145 
ö_addr
 
	mih_gwaddr
;

146 
	sih_id£q


148 
u_öt16_t
 
	micd_id
;

149 
u_öt16_t
 
	micd_£q
;

150 } 
	mih_id£q
;

151 
u_öt32_t
 
	mih_void
;

154 
	sih_pmtu


156 
u_öt16_t
 
	mùm_void
;

157 
u_öt16_t
 
	mùm_√xtmtu
;

158 } 
	mih_pmtu
;

160 
	sih_πødv


162 
u_öt8_t
 
	mút_num_addrs
;

163 
u_öt8_t
 
	mút_w∑
;

164 
u_öt16_t
 
	mút_li„time
;

165 } 
	mih_πødv
;

166 } 
	micmp_hun
;

167 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

168 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

169 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

170 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

171 
	#icmp_void
 
icmp_hun
.
ih_void


	)

172 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

173 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

174 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

175 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

176 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

181 
u_öt32_t
 
	môs_Ÿime
;

182 
u_öt32_t
 
	môs_πime
;

183 
u_öt32_t
 
	môs_âime
;

184 } 
	mid_ts
;

187 
ù
 
	midi_ù
;

189 } 
	mid_ù
;

190 
icmp_ø_addr
 
	mid_ødv
;

191 
u_öt32_t
 
	mid_mask
;

192 
u_öt8_t
 
	mid_d©a
[1];

193 } 
	micmp_dun
;

194 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

195 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

196 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

197 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

198 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

199 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

200 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

211 
	#ICMP_MINLEN
 8

	)

212 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

213 
	#ICMP_MASKLEN
 12

	)

214 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

215 #i‚de‡
_IP_VHL


216 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

219 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

225 
	#ICMP_UNREACH
 3

	)

226 
	#ICMP_SOURCEQUENCH
 4

	)

227 
	#ICMP_ROUTERADVERT
 9

	)

228 
	#ICMP_ROUTERSOLICIT
 10

	)

229 
	#ICMP_TIMXCEED
 11

	)

230 
	#ICMP_PARAMPROB
 12

	)

231 
	#ICMP_TSTAMP
 13

	)

232 
	#ICMP_TSTAMPREPLY
 14

	)

233 
	#ICMP_IREQ
 15

	)

234 
	#ICMP_IREQREPLY
 16

	)

235 
	#ICMP_MASKREQ
 17

	)

236 
	#ICMP_MASKREPLY
 18

	)

238 
	#ICMP_MAXTYPE
 18

	)

241 
	#ICMP_UNREACH_NET
 0

	)

242 
	#ICMP_UNREACH_HOST
 1

	)

243 
	#ICMP_UNREACH_PROTOCOL
 2

	)

244 
	#ICMP_UNREACH_PORT
 3

	)

245 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

246 
	#ICMP_UNREACH_SRCFAIL
 5

	)

247 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

248 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

249 
	#ICMP_UNREACH_ISOLATED
 8

	)

250 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

251 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

252 
	#ICMP_UNREACH_TOSNET
 11

	)

253 
	#ICMP_UNREACH_TOSHOST
 12

	)

254 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

255 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

256 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

259 
	#ICMP_REDIRECT_NET
 0

	)

260 
	#ICMP_REDIRECT_HOST
 1

	)

261 
	#ICMP_REDIRECT_TOSNET
 2

	)

262 
	#ICMP_REDIRECT_TOSHOST
 3

	)

265 
	#ICMP_TIMXCEED_INTRANS
 0

	)

266 
	#ICMP_TIMXCEED_REASS
 1

	)

269 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

271 
	#ICMP_INFOTYPE
(
ty≥
) \

272 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

273 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

274 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

275 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

276 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

280 
	g__END_DECLS


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

398 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

402 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

404 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

406 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

408 
	sevp_cùhî_öfo_°


410 c⁄° 
EVP_CIPHER
 *
cùhî
;

411 
iv
[
EVP_MAX_IV_LENGTH
];

412 } 
	tEVP_CIPHER_INFO
;

414 
	sevp_cùhî_˘x_°


416 c⁄° 
EVP_CIPHER
 *
cùhî
;

417 
ENGINE
 *
ígöe
;

418 
í¸y±
;

419 
buf_Àn
;

421 
oiv
[
EVP_MAX_IV_LENGTH
];

422 
iv
[
EVP_MAX_IV_LENGTH
];

423 
buf
[
EVP_MAX_BLOCK_LENGTH
];

424 
num
;

426 *
≠p_d©a
;

427 
key_Àn
;

428 
Êags
;

429 *
cùhî_d©a
;

430 
föÆ_u£d
;

431 
block_mask
;

432 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

435 
	sevp_Encode_Ctx_°


437 
num
;

438 
Àngth
;

443 
íc_d©a
[80];

444 
löe_num
;

445 
ex≥˘_∆
;

446 } 
	tEVP_ENCODE_CTX
;

449 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

450 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

451 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

453 #i‚de‡
OPENSSL_NO_RSA


454 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

455 (*)(
rß
))

	)

458 #i‚de‡
OPENSSL_NO_DSA


459 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

460 (*)(
dß
))

	)

463 #i‚de‡
OPENSSL_NO_DH


464 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

465 (*)(
dh
))

	)

468 #i‚de‡
OPENSSL_NO_EC


469 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

470 (*)(
eckey
))

	)

474 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

475 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

476 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

477 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

479 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

480 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

481 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

482 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

483 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

484 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

485 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

487 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

488 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

489 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

490 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

492 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

494 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

497 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

498 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

500 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

504 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

506 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

507 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

508 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

509 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

510 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

512 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

513 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

515 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

516 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

517 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

518 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

519 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

520 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

521 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

522 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

523 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

524 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

526 #ifde‡
CONST_STRICT


527 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

529 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

531 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

532 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

533 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

534 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

535 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

537 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

538 *
out
,

539 c⁄° *
ö
,

540 
öl
);

542 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

543 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

544 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

545 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

546 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

547 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

548 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

549 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

551 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

552 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

554 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

555 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

556 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

557 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

558 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

559 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

560 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

561 
size_t
 
˙t
);

562 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

563 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

564 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

566 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

567 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

568 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

570 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

571 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

572 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

573 * 
EVP_gë_pw_¥om±
();

575 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

576 c⁄° *
ß…
, c⁄° *
d©a
,

577 
d©Æ
, 
cou¡
, *
key
,*
iv
);

579 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

580 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

581 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

583 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

584 c⁄° *
key
, c⁄° *
iv
);

585 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

586 c⁄° *
key
, c⁄° *
iv
);

587 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

588 *
oué
, c⁄° *
ö
, 
öl
);

589 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

590 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

592 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

593 c⁄° *
key
, c⁄° *
iv
);

594 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

595 c⁄° *
key
, c⁄° *
iv
);

596 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

597 *
oué
, c⁄° *
ö
, 
öl
);

598 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

599 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

601 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

602 c⁄° *
key
,c⁄° *
iv
,

603 
íc
);

604 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

605 c⁄° *
key
,c⁄° *
iv
,

606 
íc
);

607 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

608 *
oué
, c⁄° *
ö
, 
öl
);

609 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

610 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

612 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

613 
EVP_PKEY
 *
pkey
);

615 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

616 
sigÀn
,
EVP_PKEY
 *
pkey
);

618 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

619 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

620 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

621 *
sigªt
, 
size_t
 *
sigÀn
);

623 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

624 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

625 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

626 *
sig
, 
size_t
 
sigÀn
);

628 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

629 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

630 
EVP_PKEY
 *
¥iv
);

631 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

633 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

634 **
ek
, *
ekl
, *
iv
,

635 
EVP_PKEY
 **
pubk
, 
≈ubk
);

636 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

638 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

639 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

640 c⁄° *
ö
,
öl
);

641 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

642 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

644 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

645 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

646 c⁄° *
ö
, 
öl
);

647 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

648 *
out
, *
oué
);

649 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

651 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

652 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

654 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

655 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

656 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

657 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

658 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

660 #i‚de‡
OPENSSL_NO_BIO


661 
BIO_METHOD
 *
BIO_f_md
();

662 
BIO_METHOD
 *
BIO_f_ba£64
();

663 
BIO_METHOD
 *
BIO_f_cùhî
();

664 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

665 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

666 c⁄° *
i
, 
íc
);

669 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

670 #i‚de‡
OPENSSL_NO_MD2


671 c⁄° 
EVP_MD
 *
EVP_md2
();

673 #i‚de‡
OPENSSL_NO_MD4


674 c⁄° 
EVP_MD
 *
EVP_md4
();

676 #i‚de‡
OPENSSL_NO_MD5


677 c⁄° 
EVP_MD
 *
EVP_md5
();

679 #i‚de‡
OPENSSL_NO_SHA


680 c⁄° 
EVP_MD
 *
EVP_sha
();

681 c⁄° 
EVP_MD
 *
EVP_sha1
();

682 c⁄° 
EVP_MD
 *
EVP_dss
();

683 c⁄° 
EVP_MD
 *
EVP_dss1
();

684 c⁄° 
EVP_MD
 *
EVP_ecdß
();

686 #i‚de‡
OPENSSL_NO_SHA256


687 c⁄° 
EVP_MD
 *
EVP_sha224
();

688 c⁄° 
EVP_MD
 *
EVP_sha256
();

690 #i‚de‡
OPENSSL_NO_SHA512


691 c⁄° 
EVP_MD
 *
EVP_sha384
();

692 c⁄° 
EVP_MD
 *
EVP_sha512
();

694 #i‚de‡
OPENSSL_NO_MDC2


695 c⁄° 
EVP_MD
 *
EVP_mdc2
();

697 #i‚de‡
OPENSSL_NO_RIPEMD


698 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

700 #i‚de‡
OPENSSL_NO_WHIRLPOOL


701 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

703 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

704 #i‚de‡
OPENSSL_NO_DES


705 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

709 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

711 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

712 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

713 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

714 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

715 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

717 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

721 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

729 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

730 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

734 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


735 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

736 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

737 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

741 #i‚de‡
OPENSSL_NO_RC4


742 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

743 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

744 #i‚de‡
OPENSSL_NO_MD5


745 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

748 #i‚de‡
OPENSSL_NO_IDEA


749 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

751 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

752 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

753 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

755 #i‚de‡
OPENSSL_NO_RC2


756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

759 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

761 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

762 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

764 #i‚de‡
OPENSSL_NO_BF


765 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

766 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

768 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

769 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

771 #i‚de‡
OPENSSL_NO_CAST


772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

773 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

775 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

776 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

778 #i‚de‡
OPENSSL_NO_RC5


779 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

780 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

781 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

782 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

783 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

785 #i‚de‡
OPENSSL_NO_AES


786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

789 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

791 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

800 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

802 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

812 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

816 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

818 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

819 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

820 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

823 #i‚de‡
OPENSSL_NO_CAMELLIA


824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

827 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

829 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

834 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

836 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

840 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

841 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

842 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

843 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

844 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

847 #i‚de‡
OPENSSL_NO_SEED


848 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

849 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

850 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

851 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

852 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

855 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

856 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

858 #ifde‡
OPENSSL_LOAD_CONF


859 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

860 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

862 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

863 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

866 
O≥nSSL_add_Æl_cùhîs
();

867 
O≥nSSL_add_Æl_dige°s
();

868 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

869 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

870 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

872 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

873 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

875 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

876 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

877 
EVP_˛ónup
();

879 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

880 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

881 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

882 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

884 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

885 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

886 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

887 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

889 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

890 c⁄° *
íc_key
,
íc_key_Àn
,

891 
EVP_PKEY
 *
¥iv©e_key
);

892 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

893 c⁄° *
key
,
key_Àn
,

894 
EVP_PKEY
 *
pub_key
);

895 
EVP_PKEY_ty≥
(
ty≥
);

896 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

899 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

900 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

901 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

902 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

903 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

905 #i‚de‡
OPENSSL_NO_RSA


906 
rß_°
;

907 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

908 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

910 #i‚de‡
OPENSSL_NO_DSA


911 
dß_°
;

912 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

913 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

915 #i‚de‡
OPENSSL_NO_DH


916 
dh_°
;

917 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

918 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

920 #i‚de‡
OPENSSL_NO_EC


921 
ec_key_°
;

922 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

923 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

926 
EVP_PKEY
 * 
EVP_PKEY_√w
();

927 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

929 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

930 
Àngth
);

931 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

933 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

934 
Àngth
);

935 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

936 
Àngth
);

937 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

939 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

940 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

941 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

942 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

944 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

946 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

947 
ödít
, 
ASN1_PCTX
 *
p˘x
);

948 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

949 
ödít
, 
ASN1_PCTX
 *
p˘x
);

950 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

951 
ödít
, 
ASN1_PCTX
 *
p˘x
);

953 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

955 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

958 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

959 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

962 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

963 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

966 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

967 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

968 
í_de
);

969 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

970 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

971 
keyÀn
, *
out
);

972 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

973 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

974 c⁄° 
EVP_MD
 *
dige°
,

975 
keyÀn
, *
out
);

976 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

977 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

978 
í_de
);

980 
PKCS5_PBE_add
();

982 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

983 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

988 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

990 
	#EVP_PBE_TYPE_PRF
 0x1

	)

992 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

993 
EVP_PBE_KEYGEN
 *
keygí
);

994 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

995 
EVP_PBE_KEYGEN
 *
keygí
);

996 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

997 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

998 
EVP_PBE_˛ónup
();

1000 
	#ASN1_PKEY_ALIAS
 0x1

	)

1001 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1002 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1004 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1005 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1006 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1007 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1008 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1010 
EVP_PKEY_a¢1_gë_cou¡
();

1011 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1012 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1013 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1014 c⁄° *
°r
, 
Àn
);

1015 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1016 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1017 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1018 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1021 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1022 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1023 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1024 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1025 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1026 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1027 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1028 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1029 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1030 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1031 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1032 
ASN1_PCTX
 *
p˘x
),

1033 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1034 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1035 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1036 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1037 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1038 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1039 
ASN1_PCTX
 *
p˘x
));

1040 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1041 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1042 c⁄° **
pdî
, 
dîÀn
),

1043 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1044 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1045 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1046 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1047 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1048 
ASN1_PCTX
 *
p˘x
));

1050 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1051 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1052 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1053 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1054 
¨g1
, *
¨g2
));

1057 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1058 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1059 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1060 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1061 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1062 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1063 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1064 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1065 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1066 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1067 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1069 
	#EVP_PKEY_OP_TYPE_SIG
 \

1070 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1071 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1073 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1074 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1076 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1077 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1079 
	#EVP_PKEY_OP_TYPE_GEN
 \

1080 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1082 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1083 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1084 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1086 
	#EVP_PKEY_CTRL_MD
 1

	)

1087 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1089 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1090 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1092 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1094 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1096 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1099 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1101 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1102 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1103 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1105 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1107 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1110 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1114 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1116 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1117 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1118 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1119 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1120 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1121 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1122 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1124 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1125 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1126 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1127 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1129 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1130 
cmd
, 
p1
, *
p2
);

1131 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1132 c⁄° *
vÆue
);

1134 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1135 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1137 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1138 c⁄° *
key
, 
keyÀn
);

1140 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1141 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1142 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1146 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1147 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1149 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1150 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1151 *
sig
, 
size_t
 *
sigÀn
,

1152 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1153 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1154 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1155 c⁄° *
sig
, 
size_t
 
sigÀn
,

1156 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1157 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1158 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1159 *
rout
, 
size_t
 *
rouéí
,

1160 c⁄° *
sig
, 
size_t
 
sigÀn
);

1161 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1162 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1163 *
out
, 
size_t
 *
ouéí
,

1164 c⁄° *
ö
, 
size_t
 
öÀn
);

1165 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1166 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1167 *
out
, 
size_t
 *
ouéí
,

1168 c⁄° *
ö
, 
size_t
 
öÀn
);

1170 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1171 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1172 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1174 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1176 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1177 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1178 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1179 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1181 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1182 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1184 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1186 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1187 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1189 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1190 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1192 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1193 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1195 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1196 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1197 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1199 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1200 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1201 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1203 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1204 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1205 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1206 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1208 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1209 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1210 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1211 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1213 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1214 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1215 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1216 *
sig
, 
size_t
 *
sigÀn
,

1217 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1219 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1220 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1221 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1222 
EVP_MD_CTX
 *
m˘x
));

1224 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1225 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1226 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1227 
EVP_MD_CTX
 *
m˘x
));

1229 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1230 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1231 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1232 c⁄° *
ö
, 
size_t
 
öÀn
));

1234 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1235 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1236 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1237 c⁄° *
ö
, 
size_t
 
öÀn
));

1239 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1240 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1241 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1243 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1244 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1245 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1246 c⁄° *
ty≥
, c⁄° *
vÆue
));

1248 
EVP_add_Æg_moduÀ
();

1254 
ERR_lﬂd_EVP_°rögs
();

1259 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1260 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1261 
	#EVP_F_AES_INIT_KEY
 133

	)

1262 
	#EVP_F_AES_XTS
 172

	)

1263 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1264 
	#EVP_F_ALG_MODULE_INIT
 177

	)

1265 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1266 
	#EVP_F_CMAC_INIT
 173

	)

1267 
	#EVP_F_D2I_PKEY
 100

	)

1268 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1269 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1270 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1271 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1272 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1273 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1274 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1275 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1276 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1277 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1278 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1279 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1280 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1281 
	#EVP_F_EVP_MD_SIZE
 162

	)

1282 
	#EVP_F_EVP_OPENINIT
 102

	)

1283 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1284 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1285 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1286 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1287 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1288 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1289 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1290 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1291 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1292 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1293 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1294 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1295 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1296 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1297 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1298 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1299 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1300 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1301 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1302 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1303 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1304 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1305 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1306 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1307 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1308 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1309 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1310 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1311 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1312 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1313 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1314 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1315 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1316 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1317 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1318 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1319 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1320 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1321 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1322 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1323 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1324 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1325 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1326 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1327 
	#EVP_F_HMAC_INIT_EX
 174

	)

1328 
	#EVP_F_INT_CTX_NEW
 157

	)

1329 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1330 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1331 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1332 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1333 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1334 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1335 
	#EVP_F_RC5_CTRL
 125

	)

1338 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1339 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1340 
	#EVP_R_ASN1_LIB
 140

	)

1341 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1342 
	#EVP_R_BAD_DECRYPT
 100

	)

1343 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1344 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1345 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1346 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1347 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1348 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1349 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1350 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1351 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1352 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1353 
	#EVP_R_DECODE_ERROR
 114

	)

1354 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1355 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1356 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1357 
	#EVP_R_ENCODE_ERROR
 115

	)

1358 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

1359 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

1360 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1361 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1362 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1363 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1364 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1365 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1366 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

1367 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1368 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1369 
	#EVP_R_INVALID_DIGEST
 152

	)

1370 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

1371 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1372 
	#EVP_R_INVALID_OPERATION
 148

	)

1373 
	#EVP_R_IV_TOO_LARGE
 102

	)

1374 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1375 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1376 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1377 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1378 
	#EVP_R_NO_CIPHER_SET
 131

	)

1379 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1380 
	#EVP_R_NO_DIGEST_SET
 139

	)

1381 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1382 
	#EVP_R_NO_KEY_SET
 154

	)

1383 
	#EVP_R_NO_OPERATION_SET
 149

	)

1384 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1385 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1386 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1387 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1388 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1389 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1390 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1391 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1392 
	#EVP_R_TOO_LARGE
 164

	)

1393 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1394 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1395 
	#EVP_R_UNKNOWN_OPTION
 169

	)

1396 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1397 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1398 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1399 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1400 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1401 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1402 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1403 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1404 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1405 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1406 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1407 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1409 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*
±r
);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*
±r
);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

582 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

588 
ERR_lﬂd_CRYPTO_°rögs
();

593 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

594 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

595 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

596 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

597 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

598 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

599 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

600 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

601 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

602 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

605 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

606 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

608 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


320 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

321 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

322 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


323 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

324 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

325 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


326 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

327 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

328 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


329 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

330 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

331 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


332 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

333 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

334 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


335 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

336 
ec_GFp_smp_±_£t_af_co‹ds


	)

337 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


338 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

339 
ec_GFp_smp_±_gë_af_co‹ds


	)

340 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


341 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

342 
ec_GFp_smp_£t_com¥_co‹ds


	)

343 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


344 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

347 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


348 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

349 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


350 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

351 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


352 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

353 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


354 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

355 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


356 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

357 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


358 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

359 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


360 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

365 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


366 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

367 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


372 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

373 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


374 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

375 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


376 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

377 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


378 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

379 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


380 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

381 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


382 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

383 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


384 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

389 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


390 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

391 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

397 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


398 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

399 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


400 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

401 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

405 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


406 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


408 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

409 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


410 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

411 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


412 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

413 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


414 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

415 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


416 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

419 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


420 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

423 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


424 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

425 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


426 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

429 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


430 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

431 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

438 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

439 #unde‡
ERR_lﬂd_CRYPTO_°rögs


440 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

441 #unde‡
OCSP_¸lID_√w


442 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

444 #unde‡
d2i_ECPARAMETERS


445 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

446 #unde‡
i2d_ECPARAMETERS


447 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

448 #unde‡
d2i_ECPKPARAMETERS


449 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

450 #unde‡
i2d_ECPKPARAMETERS


451 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

459 #unde‡
X509v3_˛ónup_exãnsi⁄s


460 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

461 #unde‡
X509v3_add_exãnsi⁄


462 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

463 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


464 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

465 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


466 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

469 #unde‡
cms_D©a_¸óã


470 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

771 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

773 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

774 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

776 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

777 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

778 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

779 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

780 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

781 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

783 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

784 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

785 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

786 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

787 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

788 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

790 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

791 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

793 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

794 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

795 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

797 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

799 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

800 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

801 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

802 
STACK_OF
(
X509
Ë*
chaö
);

803 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

804 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

805 
Àngth
);

806 #i‚de‡
OPENSSL_NO_RSA


807 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

808 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

809 
Àngth
);

811 #i‚de‡
OPENSSL_NO_DSA


812 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

813 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

814 
Àngth
);

816 #i‚de‡
OPENSSL_NO_EC


817 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

818 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

819 
Àngth
);

822 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

827 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

829 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

830 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

832 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

834 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

836 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

838 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509
)

841 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

843 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

845 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

846 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

847 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

848 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

849 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

850 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

852 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

853 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

854 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

855 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

856 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

857 
X509_TRUST_£t
(*
t
, 
åu°
);

858 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

860 
X509_åu°_˛ór
(
X509
 *
x
);

861 
X509_ªje˘_˛ór
(
X509
 *
x
);

863 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

865 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

867 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

868 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

869 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

870 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

872 
X509_PKEY
 * 
X509_PKEY_√w
();

873 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

874 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

875 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

879 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

881 #i‚de‡
OPENSSL_NO_EVP


882 
X509_INFO
 * 
X509_INFO_√w
();

883 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

884 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

886 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

887 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

889 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

890 *
md
,*
Àn
);

892 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

893 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

894 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

897 *
md
,*
Àn
);

899 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

900 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

902 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

903 
ASN1_BIT_STRING
 *
sig«tuª
,

904 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

905 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

906 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

907 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

910 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

911 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

912 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

913 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

914 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

915 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

916 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

917 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

919 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

920 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

921 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

922 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

924 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

925 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

926 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

928 
X509_REQ_exãnsi⁄_nid
(
nid
);

929 * 
X509_REQ_gë_exãnsi⁄_nids
();

930 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

931 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

932 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

933 
nid
);

934 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

935 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

936 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

937 
œ°pos
);

938 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

939 
œ°pos
);

940 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

941 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

942 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

943 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

944 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

945 c⁄° *
byãs
, 
Àn
);

946 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

947 
nid
, 
ty≥
,

948 c⁄° *
byãs
, 
Àn
);

949 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

950 c⁄° *
©å«me
, 
ty≥
,

951 c⁄° *
byãs
, 
Àn
);

953 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

954 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

955 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

957 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

959 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

960 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

962 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

964 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

966 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

967 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

969 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

970 
X509_issuî_«me_hash
(
X509
 *
a
);

972 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

973 
X509_subje˘_«me_hash
(
X509
 *
x
);

975 #i‚de‡
OPENSSL_NO_MD5


976 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

977 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

980 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

981 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

982 
X509_NAME_hash
(
X509_NAME
 *
x
);

983 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

985 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

987 #i‚de‡
OPENSSL_NO_FP_API


988 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

989 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

990 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

991 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

992 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

998 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

999 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1001 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1002 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1003 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1004 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1007 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1008 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1009 *
buf
,
Àn
);

1010 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1011 *
buf
,
Àn
);

1015 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1016 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1017 
œ°pos
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1020 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1021 
loc
, 
£t
);

1022 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1023 *
byãs
, 
Àn
, 
loc
, 
£t
);

1024 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1025 *
byãs
, 
Àn
, 
loc
, 
£t
);

1026 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1027 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1028 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1029 
ty≥
,*
byãs
, 
Àn
);

1030 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1031 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1033 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1034 
Àn
);

1035 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1036 
ASN1_OBJECT
 *
obj
);

1037 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1038 c⁄° *
byãs
, 
Àn
);

1039 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1040 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1042 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1043 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1044 
nid
, 
œ°pos
);

1045 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1046 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1047 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1048 
¸ô
, 
œ°pos
);

1049 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1051 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1052 
X509_EXTENSION
 *
ex
, 
loc
);

1054 
X509_gë_ext_cou¡
(
X509
 *
x
);

1055 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1056 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1057 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1058 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1059 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1060 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1061 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1062 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1063 
Êags
);

1065 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1066 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1067 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1068 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1069 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1071 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1072 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1073 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1074 
Êags
);

1076 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1077 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1079 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1080 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1082 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1083 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1084 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1085 
Êags
);

1087 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1088 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1089 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1090 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1091 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1092 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1093 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1094 
ASN1_OCTET_STRING
 *
d©a
);

1095 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1096 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1097 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1099 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1100 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1101 
œ°pos
);

1102 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1103 
œ°pos
);

1104 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1106 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1107 
X509_ATTRIBUTE
 *
©å
);

1108 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1109 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1110 c⁄° *
byãs
, 
Àn
);

1111 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1112 
nid
, 
ty≥
,

1113 c⁄° *
byãs
, 
Àn
);

1114 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1115 c⁄° *
©å«me
, 
ty≥
,

1116 c⁄° *
byãs
, 
Àn
);

1117 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1118 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1119 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1120 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1121 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1122 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1123 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1124 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1125 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1126 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1127 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1128 
©πy≥
, *
d©a
);

1129 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1131 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1133 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1134 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1135 
œ°pos
);

1136 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1137 
œ°pos
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1139 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1140 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1141 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1142 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1143 c⁄° *
byãs
, 
Àn
);

1144 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1145 
nid
, 
ty≥
,

1146 c⁄° *
byãs
, 
Àn
);

1147 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1148 c⁄° *
©å«me
, 
ty≥
,

1149 c⁄° *
byãs
, 
Àn
);

1151 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1154 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1155 
ASN1_INTEGER
 *
£rül
);

1156 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1158 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1160 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1162 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1163 c⁄° *
ß…
, 
ß…Àn
);

1165 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1166 c⁄° *
ß…
, 
ß…Àn
);

1167 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1168 *
ß…
, 
ß…Àn
);

1169 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1170 *
ß…
, 
ß…Àn
,

1171 *
aiv
, 
¥f_nid
);

1173 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1174 
¥f_nid
, 
keyÀn
);

1178 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1180 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1182 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1183 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1185 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1186 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1187 *
≥nc
, 
≥n˛í
);

1188 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1189 c⁄° **
pk
, *
µkÀn
,

1190 
X509_ALGOR
 **
∑
,

1191 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1193 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1194 
±y≥
, *
pvÆ
,

1195 *
≥nc
, 
≥n˛í
);

1196 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1197 c⁄° **
pk
, *
µkÀn
,

1198 
X509_ALGOR
 **
∑
,

1199 
X509_PUBKEY
 *
pub
);

1201 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1202 
X509_TRUST_gë_cou¡
();

1203 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1204 
X509_TRUST_gë_by_id
(
id
);

1205 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1206 *
«me
, 
¨g1
, *
¨g2
);

1207 
X509_TRUST_˛ónup
();

1208 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1209 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1210 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1216 
ERR_lﬂd_X509_°rögs
();

1221 
	#X509_F_ADD_CERT_DIR
 100

	)

1222 
	#X509_F_BY_FILE_CTRL
 101

	)

1223 
	#X509_F_CHECK_POLICY
 145

	)

1224 
	#X509_F_DIR_CTRL
 102

	)

1225 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1227 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1228 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1229 
	#X509_F_X509V3_ADD_EXT
 104

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1232 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1233 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1234 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1235 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1236 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1238 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1239 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1240 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1241 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1242 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1243 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1245 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1246 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1247 
	#X509_F_X509_NAME_ONELINE
 116

	)

1248 
	#X509_F_X509_NAME_PRINT
 117

	)

1249 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1250 
	#X509_F_X509_PUBKEY_GET
 119

	)

1251 
	#X509_F_X509_PUBKEY_SET
 120

	)

1252 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1253 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1254 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1255 
	#X509_F_X509_REQ_TO_X509
 123

	)

1256 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1257 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1258 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1259 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1260 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1261 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1262 
	#X509_F_X509_TO_X509_REQ
 126

	)

1263 
	#X509_F_X509_TRUST_ADD
 133

	)

1264 
	#X509_F_X509_TRUST_SET
 141

	)

1265 
	#X509_F_X509_VERIFY_CERT
 127

	)

1268 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1269 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1270 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1271 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1272 
	#X509_R_ERR_ASN1_LIB
 102

	)

1273 
	#X509_R_INVALID_DIRECTORY
 113

	)

1274 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1275 
	#X509_R_INVALID_TRUST
 123

	)

1276 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1277 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1278 
	#X509_R_LOADING_CERT_DIR
 103

	)

1279 
	#X509_R_LOADING_DEFAULTS
 104

	)

1280 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1281 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1282 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1283 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1284 
	#X509_R_SHOULD_RETRY
 106

	)

1285 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1286 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1287 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1288 
	#X509_R_UNKNOWN_NID
 109

	)

1289 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1290 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1291 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1292 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1293 
	#X509_R_WRONG_TYPE
 122

	)

1295 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_UNDEF
 -1

	)

101 
	#V_ASN1_EOC
 0

	)

102 
	#V_ASN1_BOOLEAN
 1

	)

103 
	#V_ASN1_INTEGER
 2

	)

104 
	#V_ASN1_BIT_STRING
 3

	)

105 
	#V_ASN1_OCTET_STRING
 4

	)

106 
	#V_ASN1_NULL
 5

	)

107 
	#V_ASN1_OBJECT
 6

	)

108 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

109 
	#V_ASN1_EXTERNAL
 8

	)

110 
	#V_ASN1_REAL
 9

	)

111 
	#V_ASN1_ENUMERATED
 10

	)

112 
	#V_ASN1_UTF8STRING
 12

	)

113 
	#V_ASN1_SEQUENCE
 16

	)

114 
	#V_ASN1_SET
 17

	)

115 
	#V_ASN1_NUMERICSTRING
 18

	)

116 
	#V_ASN1_PRINTABLESTRING
 19

	)

117 
	#V_ASN1_T61STRING
 20

	)

118 
	#V_ASN1_TELETEXSTRING
 20

	)

119 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

120 
	#V_ASN1_IA5STRING
 22

	)

121 
	#V_ASN1_UTCTIME
 23

	)

122 
	#V_ASN1_GENERALIZEDTIME
 24

	)

123 
	#V_ASN1_GRAPHICSTRING
 25

	)

124 
	#V_ASN1_ISO64STRING
 26

	)

125 
	#V_ASN1_VISIBLESTRING
 26

	)

126 
	#V_ASN1_GENERALSTRING
 27

	)

127 
	#V_ASN1_UNIVERSALSTRING
 28

	)

128 
	#V_ASN1_BMPSTRING
 30

	)

136 
	#V_ASN1_NEG
 0x100

	)

137 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

138 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

141 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

142 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

143 
	#B_ASN1_T61STRING
 0x0004

	)

144 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

145 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

146 
	#B_ASN1_IA5STRING
 0x0010

	)

147 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

148 
	#B_ASN1_ISO64STRING
 0x0040

	)

149 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

150 
	#B_ASN1_GENERALSTRING
 0x0080

	)

151 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

152 
	#B_ASN1_OCTET_STRING
 0x0200

	)

153 
	#B_ASN1_BIT_STRING
 0x0400

	)

154 
	#B_ASN1_BMPSTRING
 0x0800

	)

155 
	#B_ASN1_UNKNOWN
 0x1000

	)

156 
	#B_ASN1_UTF8STRING
 0x2000

	)

157 
	#B_ASN1_UTCTIME
 0x4000

	)

158 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

159 
	#B_ASN1_SEQUENCE
 0x10000

	)

162 
	#MBSTRING_FLAG
 0x1000

	)

163 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

164 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

165 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

166 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

168 
	#SMIME_OLDMIME
 0x400

	)

169 
	#SMIME_CRLFEOL
 0x800

	)

170 
	#SMIME_STREAM
 0x1000

	)

172 
X509_Æg‹_°
;

173 
DECLARE_STACK_OF
(
X509_ALGOR
)

175 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

176 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

182 
	sa¢1_˘x_°


184 *
p
;

185 
eos
;

186 
îr‹
;

187 
öf
;

188 
èg
;

189 
x˛ass
;

190 
¶í
;

191 *
max
;

192 *
q
;

193 **
µ
;

194 
löe
;

195 } 
	tASN1_CTX
;

197 
	sa¢1_c⁄°_˘x_°


199 c⁄° *
p
;

200 
eos
;

201 
îr‹
;

202 
öf
;

203 
èg
;

204 
x˛ass
;

205 
¶í
;

206 c⁄° *
max
;

207 c⁄° *
q
;

208 c⁄° **
µ
;

209 
löe
;

210 } 
	tASN1_c⁄°_CTX
;

214 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

215 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

216 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

217 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

218 
	sa¢1_obje˘_°


220 c⁄° *
¢
,*
 
;

221 
nid
;

222 
Àngth
;

223 c⁄° *
d©a
;

224 
Êags
;

225 } 
	tASN1_OBJECT
;

227 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

232 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

239 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

243 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

245 
	sa¢1_°rög_°


247 
Àngth
;

248 
ty≥
;

249 *
d©a
;

254 
Êags
;

262 
	sASN1_ENCODING_°


264 *
íc
;

265 
Àn
;

266 
modifõd
;

267 } 
	tASN1_ENCODING
;

270 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

272 
	#STABLE_FLAGS_MALLOC
 0x01

	)

273 
	#STABLE_NO_MASK
 0x02

	)

274 
	#DIRSTRING_TYPE
 \

275 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

276 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

278 
	sa¢1_°rög_èbÀ_°
 {

279 
nid
;

280 
mösize
;

281 
maxsize
;

282 
mask
;

283 
Êags
;

284 } 
	tASN1_STRING_TABLE
;

286 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

290 
	#ub_«me
 32768

	)

291 
	#ub_comm⁄_«me
 64

	)

292 
	#ub_loˇlôy_«me
 128

	)

293 
	#ub_°©e_«me
 128

	)

294 
	#ub_‹g™iz©i⁄_«me
 64

	)

295 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

296 
	#ub_tôÀ
 64

	)

297 
	#ub_emaû_addªss
 128

	)

302 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

303 
ASN1_TLC_°
 
	tASN1_TLC
;

305 
ASN1_VALUE_°
 
	tASN1_VALUE
;

309 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

311 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

314 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

315 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

316 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

318 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

319 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

320 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

322 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

323 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

324 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

325 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

327 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

328 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

329 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

330 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

332 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

333 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

335 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

336 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

337 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

339 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

340 
ty≥
 *
«me
##
	`_√w
(); \

341 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

343 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

344 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

346 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

347 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

348 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

350 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

351 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

352 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

354 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

355 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

356 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

357 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

358 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

359 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

360 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

361 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

362 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

363 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

365 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

366 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

367 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

369 
TYPEDEF_D2I2D_OF
();

406 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


409 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

412 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

415 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

417 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

419 
	#DECLARE_ASN1_ITEM
(
«me
) \

420 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

429 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

432 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

435 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

437 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

439 
	#DECLARE_ASN1_ITEM
(
«me
) \

440 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

451 
	#ASN1_STRFLGS_ESC_2253
 1

	)

452 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

453 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

461 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

467 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

469 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

471 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

481 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

488 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

491 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

501 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

502 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

509 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

516 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

517 
ASN1_STRFLGS_ESC_CTRL
 | \

518 
ASN1_STRFLGS_ESC_MSB
 | \

519 
ASN1_STRFLGS_UTF8_CONVERT
 | \

520 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

521 
ASN1_STRFLGS_DUMP_DER
)

	)

523 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

524 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

526 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

528 
	sa¢1_ty≥_°


530 
ty≥
;

532 *
±r
;

533 
ASN1_BOOLEAN
 
boﬁón
;

534 
ASN1_STRING
 * 
a¢1_°rög
;

535 
ASN1_OBJECT
 * 
obje˘
;

536 
ASN1_INTEGER
 * 
öãgî
;

537 
ASN1_ENUMERATED
 * 
íumî©ed
;

538 
ASN1_BIT_STRING
 * 
bô_°rög
;

539 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

540 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

541 
ASN1_T61STRING
 * 
t61°rög
;

542 
ASN1_IA5STRING
 * 
ü5°rög
;

543 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

544 
ASN1_BMPSTRING
 * 
bmp°rög
;

545 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

546 
ASN1_UTCTIME
 * 
ut˘ime
;

547 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

548 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

549 
ASN1_UTF8STRING
 * 
utf8°rög
;

552 
ASN1_STRING
 * 
£t
;

553 
ASN1_STRING
 * 
£quí˚
;

554 
ASN1_VALUE
 * 
a¢1_vÆue
;

555 } 
vÆue
;

556 } 
	tASN1_TYPE
;

558 
DECLARE_STACK_OF
(
ASN1_TYPE
)

559 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

561 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

563 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

564 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

566 
	sNETSCAPE_X509_°


568 
ASN1_OCTET_STRING
 *
hódî
;

569 
X509
 *
˚π
;

570 } 
	tNETSCAPE_X509
;

573 
	sBIT_STRING_BITNAME_°
 {

574 
bônum
;

575 c⁄° *
 ame
;

576 c⁄° *
¢ame
;

577 } 
	tBIT_STRING_BITNAME
;

580 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

581 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

582 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

583 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

586 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

587 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

588 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

589 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

590 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

591 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

592 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

593 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

595 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

596 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

597 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

598 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

599 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

600 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

601 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

603 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

604 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

605 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

606 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

607 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

608 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

609 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

612 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

613 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

614 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

615 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

616 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

617 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

618 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

619 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

620 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

621 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

622 
V_ASN1_UNIVERSAL
)

	)

624 
	#B_ASN1_TIME
 \

625 
B_ASN1_UTCTIME
 | \

626 
B_ASN1_GENERALIZEDTIME


	)

628 
	#B_ASN1_PRINTABLE
 \

629 
B_ASN1_NUMERICSTRING
| \

630 
B_ASN1_PRINTABLESTRING
| \

631 
B_ASN1_T61STRING
| \

632 
B_ASN1_IA5STRING
| \

633 
B_ASN1_BIT_STRING
| \

634 
B_ASN1_UNIVERSALSTRING
|\

635 
B_ASN1_BMPSTRING
|\

636 
B_ASN1_UTF8STRING
|\

637 
B_ASN1_SEQUENCE
|\

638 
B_ASN1_UNKNOWN


	)

640 
	#B_ASN1_DIRECTORYSTRING
 \

641 
B_ASN1_PRINTABLESTRING
| \

642 
B_ASN1_TELETEXSTRING
|\

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UNIVERSALSTRING
|\

645 
B_ASN1_UTF8STRING


	)

647 
	#B_ASN1_DISPLAYTEXT
 \

648 
B_ASN1_IA5STRING
| \

649 
B_ASN1_VISIBLESTRING
| \

650 
B_ASN1_BMPSTRING
|\

651 
B_ASN1_UTF8STRING


	)

653 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

654 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

655 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

656 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

657 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

658 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

659 
B_ASN1_PRINTABLE
)

	)

661 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

662 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

663 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

664 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

665 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

666 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

667 
B_ASN1_DIRECTORYSTRING
)

	)

669 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

670 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

671 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

672 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

673 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

674 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

675 
B_ASN1_DISPLAYTEXT
)

	)

677 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

678 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

679 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

680 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

681 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

682 
V_ASN1_UNIVERSAL
)

	)

683 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

684 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

685 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

687 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

688 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

689 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

690 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

691 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

692 
V_ASN1_UNIVERSAL
)

	)

693 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

694 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

695 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

697 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

698 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

699 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

700 
	#M_ASN1_IA5STRING_dup
(
a
) \

701 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

702 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

703 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

704 
V_ASN1_UNIVERSAL
)

	)

705 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

706 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

707 
B_ASN1_IA5STRING
)

	)

709 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

710 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

711 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

712 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

713 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

715 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

716 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

717 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

718 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

719 (c⁄° 
ASN1_STRING
 *)
a
)

	)

721 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

722 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

723 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

724 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

725 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

727 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

728 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

729 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

730 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

731 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

732 
V_ASN1_UNIVERSAL
)

	)

733 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

734 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

735 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

737 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

738 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

739 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

740 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

741 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

742 
V_ASN1_UNIVERSAL
)

	)

743 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

744 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

745 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

747 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

748 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

749 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

750 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

751 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

752 
V_ASN1_UNIVERSAL
)

	)

753 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

754 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

755 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

757 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

758 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

759 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

760 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

761 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

762 
V_ASN1_UNIVERSAL
)

	)

763 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

764 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

765 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

767 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

768 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

769 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

770 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

771 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

772 
V_ASN1_UNIVERSAL
)

	)

773 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

774 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

775 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

778 
	#IS_SEQUENCE
 0

	)

779 
	#IS_SET
 1

	)

781 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

783 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

784 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

785 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

786 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

788 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

789 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

790 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

791 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

792 
Àngth
);

793 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

794 
Àngth
);

796 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

798 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

799 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

801 
ASN1_STRING
 * 
ASN1_STRING_√w
();

802 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

803 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

804 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

805 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

806 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

809 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

810 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

811 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

812 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

813 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

814 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

816 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

817 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

818 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

819 
Àngth
);

820 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

821 
Àngth
 );

822 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

823 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

824 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

825 *
Êags
, 
Êags_Àn
);

827 #i‚de‡
OPENSSL_NO_BIO


828 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

829 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

831 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

832 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

833 
BIT_STRING_BITNAME
 *
tbl
);

835 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

836 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

838 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

839 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

840 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

841 
Àngth
);

842 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

843 
Àngth
);

844 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

845 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

847 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

849 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

850 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

851 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

852 
off£t_day
, 
off£t_£c
);

853 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

854 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

856 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

859 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

860 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

861 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

862 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

863 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

866 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

867 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

868 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

870 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

871 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

872 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

873 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

874 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

876 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

877 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

879 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

881 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

882 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

883 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

884 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

885 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

886 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

887 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

888 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

889 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

891 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

893 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

894 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

895 
off£t_day
, 
off£t_£c
);

896 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

897 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

898 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

900 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

901 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

902 
is_£t
);

903 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

904 c⁄° **
µ
,

905 
Àngth
, 
d2i_of_void
 *
d2i
,

906 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

907 
ex_˛ass
);

909 #i‚de‡
OPENSSL_NO_BIO


910 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

911 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

912 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

913 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

914 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

915 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

916 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

918 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

920 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

921 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

922 c⁄° *
¢
, c⁄° *
 
);

924 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

925 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

926 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

927 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

929 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

930 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

931 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

932 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

936 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

938 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

939 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

940 
Àngth
, 
Pèg
, 
P˛ass
);

941 
ASN1_èg2bô
(
èg
);

943 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

944 
Àngth
,
ty≥
);

947 
a¢1_Föish
(
ASN1_CTX
 *
c
);

948 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

951 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

952 *
p˛ass
, 
omax
);

953 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

954 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

955 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

956 
èg
, 
x˛ass
);

957 
ASN1_put_eoc
(**
µ
);

958 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

961 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

963 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

964 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

965 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

966 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

968 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

969 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

970 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

971 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

973 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

977 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

978 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

979 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

981 #i‚de‡
OPENSSL_NO_FP_API


982 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

984 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

985 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

986 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

987 
ö
, \

988 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

990 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

991 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

993 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

994 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

995 
out
, \

996 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

998 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

999 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1000 
out
, \

1001 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1003 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

1004 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1007 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1009 #i‚de‡
OPENSSL_NO_BIO


1010 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1012 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1013 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1014 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1015 
ö
, \

1016 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1018 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1019 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1021 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1022 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1023 
out
, \

1024 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1026 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1027 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1028 
out
, \

1029 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1031 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1032 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1033 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1034 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1035 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1036 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1037 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1038 *
buf
, 
off
);

1039 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1040 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1042 c⁄° *
ASN1_èg2°r
(
èg
);

1046 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1048 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1050 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1051 *
d©a
, 
Àn
);

1052 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1053 *
d©a
, 
max_Àn
);

1054 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1055 *
d©a
, 
Àn
);

1056 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1057 *
d©a
, 
max_Àn
);

1059 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1060 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1061 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1062 **
buf
, *
Àn
 );

1063 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1064 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1065 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1066 
ASN1_OCTET_STRING
 **
o˘
);

1068 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1069 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1070 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1071 
o˘
))

	)

1073 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1075 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1076 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1077 
ASN1_STRING_gë_deÁu…_mask
();

1078 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1079 
öf‹m
, 
mask
);

1080 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1081 
öf‹m
, 
mask
,

1082 
mösize
, 
maxsize
);

1084 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1085 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1086 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1087 
ASN1_STRING_TABLE_add
(, , , , );

1088 
ASN1_STRING_TABLE_˛ónup
();

1093 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1094 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1095 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1096 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1097 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1099 
ASN1_add_oid_moduÀ
();

1101 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1102 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1107 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1109 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1111 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1113 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1115 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1117 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1119 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1121 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1123 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1125 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1126 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1127 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1128 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1130 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1131 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1132 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1134 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1135 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1136 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1137 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1138 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1140 
BIO_METHOD
 *
BIO_f_a¢1
();

1142 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1144 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1147 c⁄° *
hdr
,

1148 c⁄° 
ASN1_ITEM
 *
ô
);

1149 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1150 
˘y≥_nid
, 
ec⁄t_nid
,

1151 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1152 c⁄° 
ASN1_ITEM
 *
ô
);

1153 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1154 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1155 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1161 
ERR_lﬂd_ASN1_°rögs
();

1166 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1167 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1168 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1169 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1170 
	#ASN1_F_APPEND_EXP
 176

	)

1171 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1172 
	#ASN1_F_ASN1_CB
 177

	)

1173 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1174 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1175 
	#ASN1_F_ASN1_COLLECT
 106

	)

1176 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1177 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1178 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1179 
	#ASN1_F_ASN1_DIGEST
 184

	)

1180 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1181 
	#ASN1_F_ASN1_DUP
 111

	)

1182 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1183 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1184 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1185 
	#ASN1_F_ASN1_FIND_END
 190

	)

1186 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1187 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1188 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1189 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1190 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1191 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1192 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1193 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1194 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1195 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1196 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1197 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1198 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1199 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1200 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1201 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1202 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1203 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1204 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1205 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1206 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1207 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1208 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1209 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1210 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1211 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1212 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1213 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1214 
	#ASN1_F_ASN1_SIGN
 128

	)

1215 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1216 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1217 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1218 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1219 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1220 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1221 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1222 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1223 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1224 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1225 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1226 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1227 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1228 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1229 
	#ASN1_F_ASN1_VERIFY
 137

	)

1230 
	#ASN1_F_B64_READ_ASN1
 209

	)

1231 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1232 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1233 
	#ASN1_F_BITSTR_CB
 180

	)

1234 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1235 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1236 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1237 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1238 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1239 
	#ASN1_F_COLLECT_DATA
 140

	)

1240 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1241 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1242 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1243 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1244 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1245 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1246 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1247 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1248 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1249 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1250 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1251 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1252 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1253 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1254 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1255 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1256 
	#ASN1_F_D2I_RSA_NET
 200

	)

1257 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1258 
	#ASN1_F_D2I_X509
 156

	)

1259 
	#ASN1_F_D2I_X509_CINF
 157

	)

1260 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1261 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1262 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1263 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1264 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1265 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1266 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1267 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1268 
	#ASN1_F_I2D_RSA_NET
 162

	)

1269 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1270 
	#ASN1_F_LONG_C2I
 166

	)

1271 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1272 
	#ASN1_F_PARSE_TAGGING
 182

	)

1273 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1274 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1275 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1276 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1277 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1278 
	#ASN1_F_SMIME_TEXT
 213

	)

1279 
	#ASN1_F_X509_CINF_NEW
 168

	)

1280 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1281 
	#ASN1_F_X509_INFO_NEW
 170

	)

1282 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1283 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1284 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1285 
	#ASN1_F_X509_NEW
 172

	)

1286 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1289 
	#ASN1_R_ADDING_OBJECT
 171

	)

1290 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1291 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1292 
	#ASN1_R_AUX_ERROR
 100

	)

1293 
	#ASN1_R_BAD_CLASS
 101

	)

1294 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1295 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1296 
	#ASN1_R_BAD_TAG
 104

	)

1297 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1298 
	#ASN1_R_BN_LIB
 105

	)

1299 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1300 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1301 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1302 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1303 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1304 
	#ASN1_R_DECODE_ERROR
 110

	)

1305 
	#ASN1_R_DECODING_ERROR
 111

	)

1306 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1307 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1308 
	#ASN1_R_ENCODE_ERROR
 112

	)

1309 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1310 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1311 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1312 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1313 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1314 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1315 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1316 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1317 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1318 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1319 
	#ASN1_R_FIELD_MISSING
 121

	)

1320 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1321 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1322 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1323 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1324 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1325 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1326 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1327 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1328 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1329 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1330 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1331 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1332 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1333 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1334 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1335 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1336 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1337 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1338 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1339 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1340 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1341 
	#ASN1_R_INVALID_DIGIT
 130

	)

1342 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1343 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1344 
	#ASN1_R_INVALID_NUMBER
 187

	)

1345 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1346 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1347 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1348 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1349 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1350 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1351 
	#ASN1_R_LENGTH_ERROR
 136

	)

1352 
	#ASN1_R_LIST_ERROR
 188

	)

1353 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1354 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1355 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1356 
	#ASN1_R_MISSING_EOC
 137

	)

1357 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1358 
	#ASN1_R_MISSING_VALUE
 189

	)

1359 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1360 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1361 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1362 
	#ASN1_R_NESTED_TOO_DEEP
 219

	)

1363 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1364 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1365 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1366 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1367 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1368 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1369 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1370 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1371 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1372 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1373 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1374 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1375 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1376 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1377 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1378 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1379 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1380 
	#ASN1_R_SHORT_LINE
 150

	)

1381 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1382 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1383 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1384 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1385 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1386 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1387 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1388 
	#ASN1_R_TOO_LONG
 155

	)

1389 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1390 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1391 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1392 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1393 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1394 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1395 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1396 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1397 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1398 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1399 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1400 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1401 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1402 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1403 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1404 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1405 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1406 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1407 
	#ASN1_R_WRONG_TAG
 168

	)

1408 
	#ASN1_R_WRONG_TYPE
 169

	)

1410 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

250 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

258 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

272 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

278 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

280 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

281 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

283 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

284 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

286 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

287 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

288 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

298 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

308 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

310 #i‚de‡
OPENSSL_NO_EC2M


319 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

335 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

342 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

349 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

357 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

370 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

371 #i‚de‡
OPENSSL_NO_EC2M


380 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

387 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

395 
nid
;

396 c⁄° *
commít
;

397 } 
	tEC_buûtö_curve
;

403 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

414 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

419 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

424 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

431 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

439 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

445 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

452 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

463 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

464 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

475 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

476 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

486 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

487 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

497 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

498 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

508 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

509 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

510 #i‚de‡
OPENSSL_NO_EC2M


519 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

520 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

530 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

531 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

541 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

542 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

554 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

555 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

556 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

566 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

567 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

570 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

571 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

572 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

573 
EC_POINT
 *, 
BN_CTX
 *);

574 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

575 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

576 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

577 
EC_POINT
 *, 
BN_CTX
 *);

592 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

601 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

609 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

616 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

624 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

633 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

635 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

636 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
, 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

648 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

659 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

672 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

681 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

682 #i‚de‡
OPENSSL_NO_EC2M


683 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

684 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

685 *
k2
, *
k3
);

688 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

690 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

692 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

693 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

695 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

696 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

697 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

698 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

699 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

700 (*)(
x
))

	)

702 #i‚de‡
OPENSSL_NO_BIO


703 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

714 
ec_key_°
 
	tEC_KEY
;

717 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

718 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

721 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

722 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

727 
EC_KEY
 *
EC_KEY_√w
();

729 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

731 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

733 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

740 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

745 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

752 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

758 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

764 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

770 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

778 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

784 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

792 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

798 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

806 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

808 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

809 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

810 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

811 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

813 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *
key
,

814 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

823 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

824 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

826 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

834 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

840 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

846 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

855 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

868 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

876 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

890 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

898 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

913 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

921 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

923 #i‚de‡
OPENSSL_NO_BIO


929 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

937 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

940 #i‚de‡
OPENSSL_NO_FP_API


946 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

954 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

958 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

960 #i‚de‡
__˝lu•lus


961 #i‡
deföed
(
__SUNPRO_C
)

962 #i‡
__SUNPRO_C
 >= 0x520

963 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

968 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

969 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

970 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

973 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

979 
ERR_lﬂd_EC_°rögs
();

984 
	#EC_F_BN_TO_FELEM
 224

	)

985 
	#EC_F_COMPUTE_WNAF
 143

	)

986 
	#EC_F_D2I_ECPARAMETERS
 144

	)

987 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

988 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

989 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

990 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

991 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

992 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

993 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

994 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

995 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

996 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

997 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

998 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

999 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

1000 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

1001 
	#EC_F_ECP_NIST_MOD_192
 203

	)

1002 
	#EC_F_ECP_NIST_MOD_224
 204

	)

1003 
	#EC_F_ECP_NIST_MOD_256
 205

	)

1004 
	#EC_F_ECP_NIST_MOD_521
 206

	)

1005 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

1006 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

1007 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

1008 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

1009 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

1010 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

1011 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

1012 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

1013 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1014 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1015 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1016 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1017 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1018 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1019 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1020 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1021 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1022 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1023 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1024 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1025 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1026 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1027 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1028 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1029 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1030 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1031 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1032 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1033 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1034 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1035 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1036 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1037 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1038 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1039 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1040 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1041 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1042 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1043 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1044 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1045 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1046 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1047 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1048 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1049 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1050 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1051 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1052 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1053 
	#EC_F_EC_GROUP_CHECK
 170

	)

1054 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1055 
	#EC_F_EC_GROUP_COPY
 106

	)

1056 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1057 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1058 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1059 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1060 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1061 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1062 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1063 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1064 
	#EC_F_EC_GROUP_NEW
 108

	)

1065 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1066 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1067 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1068 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1069 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1070 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1071 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1072 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1073 
	#EC_F_EC_KEY_COPY
 178

	)

1074 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1075 
	#EC_F_EC_KEY_NEW
 182

	)

1076 
	#EC_F_EC_KEY_PRINT
 180

	)

1077 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1078 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1079 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1080 
	#EC_F_EC_POINT_ADD
 112

	)

1081 
	#EC_F_EC_POINT_CMP
 113

	)

1082 
	#EC_F_EC_POINT_COPY
 114

	)

1083 
	#EC_F_EC_POINT_DBL
 115

	)

1084 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1085 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1086 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1087 
	#EC_F_EC_POINT_INVERT
 210

	)

1088 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1089 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1090 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1091 
	#EC_F_EC_POINT_MUL
 184

	)

1092 
	#EC_F_EC_POINT_NEW
 121

	)

1093 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1094 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1095 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1096 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1097 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1098 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1099 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1100 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1101 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1102 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1103 
	#EC_F_EC_WNAF_MUL
 187

	)

1104 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1105 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1106 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1107 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1108 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1109 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1110 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1111 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1112 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1113 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1114 
	#EC_F_PKEY_EC_CTRL
 197

	)

1115 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1116 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1117 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1118 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1119 
	#EC_F_PKEY_EC_SIGN
 218

	)

1122 
	#EC_R_ASN1_ERROR
 115

	)

1123 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1124 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1125 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1126 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1127 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1128 
	#EC_R_DECODE_ERROR
 142

	)

1129 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1130 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1131 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1132 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1133 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1134 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1135 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1136 
	#EC_R_INVALID_ARGUMENT
 112

	)

1137 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1138 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1139 
	#EC_R_INVALID_CURVE
 141

	)

1140 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1141 
	#EC_R_INVALID_ENCODING
 102

	)

1142 
	#EC_R_INVALID_FIELD
 103

	)

1143 
	#EC_R_INVALID_FORM
 104

	)

1144 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1145 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1146 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1147 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1148 
	#EC_R_KEYS_NOT_SET
 140

	)

1149 
	#EC_R_MISSING_PARAMETERS
 124

	)

1150 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1151 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1152 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1153 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1154 
	#EC_R_NOT_INITIALIZED
 111

	)

1155 
	#EC_R_NO_FIELD_MOD
 133

	)

1156 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1157 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1158 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1159 
	#EC_R_POINT_AT_INFINITY
 106

	)

1160 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1161 
	#EC_R_SLOT_FULL
 108

	)

1162 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1163 
	#EC_R_UNDEFINED_ORDER
 128

	)

1164 
	#EC_R_UNKNOWN_GROUP
 129

	)

1165 
	#EC_R_UNKNOWN_ORDER
 114

	)

1166 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1167 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1168 
	#EC_R_WRONG_ORDER
 130

	)

1170 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000106fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1f-fù†6 J™ 2014"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1‡6 J™ 2014"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *
rß
);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_P_NOT_PRIME
 128

	)

563 
	#RSA_R_Q_NOT_PRIME
 129

	)

564 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

565 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

566 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

567 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

568 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

569 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

570 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

571 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

572 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

573 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

574 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

575 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

576 
	#RSA_R_VALUE_MISSING
 147

	)

577 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

579 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

397 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

399 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

400 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

401 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

402 
	#X509_VP_FLAG_LOCKED
 0x8

	)

403 
	#X509_VP_FLAG_ONCE
 0x10

	)

406 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

407 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

408 | 
X509_V_FLAG_INHIBIT_ANY
 \

409 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

411 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

412 
X509_NAME
 *
«me
);

413 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

414 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

415 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

416 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

417 
X509_STORE
 *
X509_STORE_√w
();

418 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

420 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

421 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

422 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

423 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

424 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

425 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

427 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

428 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

430 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

432 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

434 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

435 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

436 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

437 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

438 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

440 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

442 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

443 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

445 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

446 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

448 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

449 
X509_OBJECT
 *
ªt
);

451 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

452 
¨gl
, **
ªt
);

454 #i‚de‡
OPENSSL_NO_STDIO


455 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

457 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

461 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

462 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

463 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

464 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

465 
X509_OBJECT
 *
ªt
);

466 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

467 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

468 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

469 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

470 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

471 
Àn
, 
X509_OBJECT
 *
ªt
);

472 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

474 #i‚de‡
OPENSSL_NO_STDIO


475 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

476 c⁄° *
fûe
, c⁄° *
dú
);

477 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

480 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

481 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

482 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

483 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

484 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

486 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

487 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

488 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

489 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

490 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

491 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

492 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

493 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

494 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

495 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

496 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

497 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

498 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

499 
puΩo£
, 
åu°
);

500 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

501 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

502 
time_t
 
t
);

503 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

504 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

506 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

507 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

509 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

510 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

511 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

515 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

516 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

517 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

518 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

519 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

520 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

521 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

522 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

523 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

524 
Êags
);

525 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

526 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

527 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

528 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

529 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

530 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

531 
ASN1_OBJECT
 *
pﬁicy
);

532 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

533 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

534 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

536 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

537 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

538 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

540 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

541 
STACK_OF
(
X509
Ë*
˚πs
,

542 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

543 
Êags
);

545 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

547 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

548 
X509_POLICY_LEVEL
 *

549 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

551 
STACK_OF
(
X509_POLICY_NODE
) *

552 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

554 
STACK_OF
(
X509_POLICY_NODE
) *

555 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

557 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

559 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

561 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 
STACK_OF
(
POLICYQUALINFO
) *

564 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

565 c⁄° 
X509_POLICY_NODE
 *

566 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

568 #ifde‡ 
__˝lu•lus


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

134 
	~<limôs.h
>

136 #ifde‡ 
__˝lu•lus


152 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


153 
	#BN_MUL_COMBA


	)

154 
	#BN_SQR_COMBA


	)

155 
	#BN_RECURSION


	)

169 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

170 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

171 #i‚de‡
BN_DIV2W


172 
	#BN_DIV2W


	)

179 #ifde‡
SIXTY_FOUR_BIT_LONG


180 
	#BN_ULLONG
 

	)

181 
	#BN_ULONG
 

	)

182 
	#BN_LONG
 

	)

183 
	#BN_BITS
 128

	)

184 
	#BN_BYTES
 8

	)

185 
	#BN_BITS2
 64

	)

186 
	#BN_BITS4
 32

	)

187 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

188 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

189 
	#BN_MASK2l
 (0xffffffffL)

	)

190 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

191 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

192 
	#BN_TBIT
 (0x8000000000000000L)

	)

193 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

194 
	#BN_DEC_FMT1
 "%lu"

	)

195 
	#BN_DEC_FMT2
 "%019lu"

	)

196 
	#BN_DEC_NUM
 19

	)

197 
	#BN_HEX_FMT1
 "%lX"

	)

198 
	#BN_HEX_FMT2
 "%016lX"

	)

206 #ifde‡
SIXTY_FOUR_BIT


207 #unde‡
BN_LLONG


208 #unde‡
BN_ULLONG


209 
	#BN_ULONG
 

	)

210 
	#BN_LONG
 

	)

211 
	#BN_BITS
 128

	)

212 
	#BN_BYTES
 8

	)

213 
	#BN_BITS2
 64

	)

214 
	#BN_BITS4
 32

	)

215 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

216 
	#BN_MASK2l
 (0xffffffffL)

	)

217 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

218 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

219 
	#BN_TBIT
 (0x8000000000000000LL)

	)

220 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

221 
	#BN_DEC_FMT1
 "%Œu"

	)

222 
	#BN_DEC_FMT2
 "%019Œu"

	)

223 
	#BN_DEC_NUM
 19

	)

224 
	#BN_HEX_FMT1
 "%ŒX"

	)

225 
	#BN_HEX_FMT2
 "%016ŒX"

	)

228 #ifde‡
THIRTY_TWO_BIT


229 #ifde‡
BN_LLONG


230 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

231 
	#BN_ULLONG
 
__öt64


	)

232 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

234 
	#BN_ULLONG
 

	)

235 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

238 
	#BN_ULONG
 

	)

239 
	#BN_LONG
 

	)

240 
	#BN_BITS
 64

	)

241 
	#BN_BYTES
 4

	)

242 
	#BN_BITS2
 32

	)

243 
	#BN_BITS4
 16

	)

244 
	#BN_MASK2
 (0xffffffffL)

	)

245 
	#BN_MASK2l
 (0xffff)

	)

246 
	#BN_MASK2h1
 (0xffff8000L)

	)

247 
	#BN_MASK2h
 (0xffff0000L)

	)

248 
	#BN_TBIT
 (0x80000000L)

	)

249 
	#BN_DEC_CONV
 (1000000000L)

	)

250 
	#BN_DEC_FMT1
 "%u"

	)

251 
	#BN_DEC_FMT2
 "%09u"

	)

252 
	#BN_DEC_NUM
 9

	)

253 
	#BN_HEX_FMT1
 "%X"

	)

254 
	#BN_HEX_FMT2
 "%08X"

	)

265 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

266 #i‡
__INITIAL_POINTER_SIZE
 == 64

267 
	#PTR_SIZE_INT
 

	)

269 
	#PTR_SIZE_INT
 

	)

272 
	#PTR_SIZE_INT
 
size_t


	)

275 
	#BN_DEFAULT_BITS
 1280

	)

277 
	#BN_FLG_MALLOCED
 0x01

	)

278 
	#BN_FLG_STATIC_DATA
 0x02

	)

279 
	#BN_FLG_CONSTTIME
 0x04

	)

285 #i‚de‡
OPENSSL_NO_DEPRECATED


286 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

291 #i‚de‡
OPENSSL_NO_DEPRECATED


292 
	#BN_FLG_FREE
 0x8000

	)

294 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

295 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

299 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

300 (
de°
)->
t›
=(
b
)->top, \

301 (
de°
)->
dmax
=(
b
)->dmax, \

302 (
de°
)->
√g
=(
b
)->neg, \

303 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

304 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

305 | 
BN_FLG_STATIC_DATA
 \

306 | (
n
)))

	)

310 
bignum_°
 
	tBIGNUM
;

312 
bignum_˘x
 
	tBN_CTX
;

313 
bn_blödög_°
 
	tBN_BLINDING
;

314 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

315 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

316 
bn_gícb_°
 
	tBN_GENCB
;

319 
	sbignum_°


321 
BN_ULONG
 *
d
;

322 
t›
;

324 
dmax
;

325 
√g
;

326 
Êags
;

330 
	sbn_m⁄t_˘x_°


332 
ri
;

333 
BIGNUM
 
RR
;

334 
BIGNUM
 
N
;

335 
BIGNUM
 
Ni
;

337 
BN_ULONG
 
n0
[2];

339 
Êags
;

345 
	sbn_ª˝_˘x_°


347 
BIGNUM
 
N
;

348 
BIGNUM
 
Nr
;

349 
num_bôs
;

350 
shi·
;

351 
Êags
;

355 
	sbn_gícb_°


357 
vî
;

358 *
¨g
;

362 (*
cb_1
)(, , *);

364 (*
cb_2
)(, , 
BN_GENCB
 *);

365 } 
cb
;

368 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

370 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

371 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

372 
tmp_gícb
->
vî
 = 1; \

373 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

374 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

376 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

377 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

378 
tmp_gícb
->
vî
 = 2; \

379 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

380 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

382 
	#BN_¥ime_checks
 0

	)

390 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

391 (
b
) >= 850 ? 3 : \

392 (
b
) >= 650 ? 4 : \

393 (
b
) >= 550 ? 5 : \

394 (
b
) >= 450 ? 6 : \

395 (
b
) >= 400 ? 7 : \

396 (
b
) >= 350 ? 8 : \

397 (
b
) >= 300 ? 9 : \

398 (
b
) >= 250 ? 12 : \

399 (
b
) >= 200 ? 15 : \

400 (
b
) >= 150 ? 18 : \

401  27)

	)

403 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

406 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

407 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

408 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

409 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

410 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

411 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

413 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

414 
	#BN_zîo_ex
(
a
) \

416 
BIGNUM
 *
_tmp_bn
 = (
a
); \

417 
_tmp_bn
->
t›
 = 0; \

418 
_tmp_bn
->
√g
 = 0; \

419 } 0)

	)

420 #ifde‡
OPENSSL_NO_DEPRECATED


421 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

423 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

426 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

427 * 
	`BN_›ti⁄s
();

428 
BN_CTX
 *
	`BN_CTX_√w
();

429 #i‚de‡
OPENSSL_NO_DEPRECATED


430 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

432 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

433 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

434 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

435 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

436 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

438 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

440 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

441 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

442 
BIGNUM
 *
	`BN_√w
();

443 
	`BN_öô
(
BIGNUM
 *);

444 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

445 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

446 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

447 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

448 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

449 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

450 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

451 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

455 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

456 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

461 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

466 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

468 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

469 
BN_CTX
 *
˘x
);

470 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

471 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

473 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

474 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

475 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

476 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

477 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

480 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

481 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

482 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

484 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

486 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

490 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

492 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

493 
	`BN_‰ì
(
BIGNUM
 *
a
);

494 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

495 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

496 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

497 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

499 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

500 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

501 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

502 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

503 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

504 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

505 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

506 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

507 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

508 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

509 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

510 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

511 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

513 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

514 #i‚de‡
OPENSSL_NO_FP_API


515 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

517 #ifde‡
HEADER_BIO_H


518 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

520 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

522 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

523 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

524 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

525 
	`BN_˛ór
(
BIGNUM
 *
a
);

526 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

527 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

528 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

529 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

530 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

531 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

532 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

535 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

537 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

538 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

539 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

540 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

542 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

545 #i‚de‡
OPENSSL_NO_DEPRECATED


546 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

547 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

548 (*
ˇŒback
)(,,*),*
cb_¨g
);

549 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

550 (*
ˇŒback
)(,,*),

551 
BN_CTX
 *
˘x
,*
cb_¨g
);

552 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

553 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

554 
do_åül_divisi⁄
);

558 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

559 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

560 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

561 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

562 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

564 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

566 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

567 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

568 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

569 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

570 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

571 c⁄° 
BIGNUM
 *
Xp
,

572 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

573 
BN_GENCB
 *
cb
);

575 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

576 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

577 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

578 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

579 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

580 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

581 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

582 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

583 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

584 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

585 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

586 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

587 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

590 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

591 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

593 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

594 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

595 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

596 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

597 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

598 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

599 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

600 #i‚de‡
OPENSSL_NO_DEPRECATED


601 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

602 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

604 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

605 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

606 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

607 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

608 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

609 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

610 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

611 
BN_MONT_CTX
 *
m_˘x
);

613 #i‚de‡
OPENSSL_NO_DEPRECATED


614 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

615 
	`BN_gë_∑øms
(
which
);

618 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

619 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

620 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

621 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

622 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

623 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

624 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

625 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

626 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

627 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

629 #i‚de‡
OPENSSL_NO_EC2M


640 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

641 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

642 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

643 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

644 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

645 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

646 
BN_CTX
 *
˘x
);

647 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

648 
BN_CTX
 *
˘x
);

649 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

650 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

651 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

652 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

653 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

654 
BN_CTX
 *
˘x
);

655 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

656 
BN_CTX
 *
˘x
);

657 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

663 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

665 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

666 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

667 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

668 
BN_CTX
 *
˘x
);

669 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

670 
BN_CTX
 *
˘x
);

671 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

672 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

673 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

674 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

675 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

676 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

677 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

678 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

679 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

680 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

686 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

688 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

690 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

694 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

695 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

696 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

700 
	#bn_ex∑nd
(
a
,
bôs
) \

702 
bôs
 > (
INT_MAX
 - 
BN_BITS2
 + 1) ? \

703 
NULL
 \

705 (((
bôs
+
BN_BITS2
-1)/BN_BITS2Ë<(
a
)->
dmax
) ? \

706 (
a
) \

708 
	`bn_ex∑nd2
((
a
),(
bôs
+
BN_BITS2
-1)/BN_BITS2) \

709 )

	)

711 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

712 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

713 #i‚de‡
OPENSSL_NO_DEPRECATED


714 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

745 #ifde‡
BN_DEBUG


748 
	~<as£π.h
>

750 #ifde‡
BN_DEBUG_RAND


752 #i‚de‡
RAND_p£udo_byãs


753 
	`RAND_p£udo_byãs
(*
buf
,
num
);

754 
	#BN_DEBUG_TRIX


	)

756 
	#bn_pﬁluã
(
a
) \

758 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

759 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

760 
_tmp_ch¨
; \

764 
BN_ULONG
 *
_nŸ_c⁄°
; \

765 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

766 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

767 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

768 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

770 } 0)

	)

771 #ifde‡
BN_DEBUG_TRIX


772 #unde‡
RAND_p£udo_byãs


775 
	#bn_pﬁluã
(
a
)

	)

777 
	#bn_check_t›
(
a
) \

779 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

780 i‡(
_bnum2
 !
NULL
) { \

781 
	`as£π
((
_bnum2
->
t›
 == 0) || \

782 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

783 
	`bn_pﬁluã
(
_bnum2
); \

785 } 0)

	)

787 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

789 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

790 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

792 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

793 
	`as£π
(
w‹ds
 <(
_bnum2
)->
dmax
 && w‹d†>(_bnum2)->
t›
); \

794 } 0)

	)

798 
	#bn_pﬁluã
(
a
)

	)

799 
	#bn_check_t›
(
a
)

	)

800 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

801 
	#bn_check_size
(
bn
, 
bôs
)

	)

802 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

806 
	#bn_c‹ª˘_t›
(
a
) \

808 
BN_ULONG
 *
·l
; \

809 
tmp_t›
 = (
a
)->
t›
; \

810 i‡(
tmp_t›
 > 0) \

812 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

813 i‡(*(
·l
--)) ; \

814 (
a
)->
t›
 = 
tmp_t›
; \

816 
	`bn_pﬁluã
(
a
); \

817 }

	)

819 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

820 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

821 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

822 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

823 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

824 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

827 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

828 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

831 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

832 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

833 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

834 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

835 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

836 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

838 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

844 
	`ERR_lﬂd_BN_°rögs
();

849 
	#BN_F_BNRAND
 127

	)

850 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

851 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

852 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

853 
	#BN_F_BN_BLINDING_NEW
 102

	)

854 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

855 
	#BN_F_BN_BN2DEC
 104

	)

856 
	#BN_F_BN_BN2HEX
 105

	)

857 
	#BN_F_BN_CTX_GET
 116

	)

858 
	#BN_F_BN_CTX_NEW
 106

	)

859 
	#BN_F_BN_CTX_START
 129

	)

860 
	#BN_F_BN_DIV
 107

	)

861 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

862 
	#BN_F_BN_DIV_RECP
 130

	)

863 
	#BN_F_BN_EXP
 123

	)

864 
	#BN_F_BN_EXPAND2
 108

	)

865 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

866 
	#BN_F_BN_GF2M_MOD
 131

	)

867 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

868 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

869 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

870 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

871 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

872 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

873 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

874 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

875 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

876 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

877 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

878 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

879 
	#BN_F_BN_MOD_INVERSE
 110

	)

880 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

881 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

882 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

883 
	#BN_F_BN_MOD_SQRT
 121

	)

884 
	#BN_F_BN_MPI2BN
 112

	)

885 
	#BN_F_BN_NEW
 113

	)

886 
	#BN_F_BN_RAND
 114

	)

887 
	#BN_F_BN_RAND_RANGE
 122

	)

888 
	#BN_F_BN_USUB
 115

	)

891 
	#BN_R_ARG2_LT_ARG3
 100

	)

892 
	#BN_R_BAD_RECIPROCAL
 101

	)

893 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

894 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

895 
	#BN_R_DIV_BY_ZERO
 103

	)

896 
	#BN_R_ENCODING_ERROR
 104

	)

897 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

898 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

899 
	#BN_R_INVALID_LENGTH
 106

	)

900 
	#BN_R_INVALID_RANGE
 115

	)

901 
	#BN_R_NOT_A_SQUARE
 111

	)

902 
	#BN_R_NOT_INITIALIZED
 107

	)

903 
	#BN_R_NO_INVERSE
 108

	)

904 
	#BN_R_NO_SOLUTION
 116

	)

905 
	#BN_R_P_IS_NOT_PRIME
 112

	)

906 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

907 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

909 #ifde‡ 
__˝lu•lus


910 
	}
}

	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
128
2684
attachdevice.c
attachdevice.h
base64.c
base64.h
bird_conf.c
bird_conf.h
cJSON.c
cJSON.h
cgi/cJSON.c
cgi/cJSON.h
cgi/main.c
cgi/net_tool.c
cgi/net_tool.h
client_tool/cJSON.c
client_tool/cJSON.h
client_tool/file_tool.c
client_tool/file_tool.h
client_tool/main.c
client_tool/net_tool.c
client_tool/net_tool.h
common-ctrl.c
common-ctrl.h
compress_tool.c
compress_tool.h
ctrl-interface.c
ctrl-interface.h
ctrl_server.c
ctrl_server.h
ctrl_server_json.c
ctrl_server_json.h
file_tool.c
file_tool.h
iptables_tool.c
iptables_tool.h
main.c
my_debug.c
my_debug.h
net_tool.c
net_tool.h
process_tool.c
process_tool.h
timer_tool.c
timer_tool.h
tinc_tool.h
vpn_cloud.c
vpn_cloud.h
vpn_config.c
vpn_config.h
vppnconfig/bird_conf.c
vppnconfig/bird_conf.h
vppnconfig/cJSON.c
vppnconfig/cJSON.h
vppnconfig/file_tool.c
vppnconfig/file_tool.h
vppnconfig/main.c
vppnconfig/net_tool.c
vppnconfig/net_tool.h
vppnconfig/nvram-common.h
vppnconfig/nvram-op.c
vppnconfig/nvram-op.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/linux/ioctl.h
/usr/include/linux/socket.h
/usr/include/linux/stat.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip_icmp.h
/usr/include/openssl/bio.h
/usr/include/openssl/evp.h
/usr/include/openssl/pem.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/openssl/crypto.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/objects.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem2.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/openssl/asn1.h
/usr/include/openssl/buffer.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/sha.h
/usr/include/openssl/x509_vfy.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/openssl/bn.h
/usr/include/openssl/lhash.h
/usr/include/wchar.h
/usr/include/assert.h
/usr/include/wctype.h
