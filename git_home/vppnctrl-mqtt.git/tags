!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_DNS_REPORT_LOOP	vpn_config.h	/^	ACTION_DNS_REPORT_LOOP$/;"	e	enum:vpn_action
ACTION_KILL	vpn_config.h	/^	ACTION_KILL,$/;"	e	enum:vpn_action
ACTION_RELOAD	vpn_config.h	/^	ACTION_RELOAD,$/;"	e	enum:vpn_action
ACTION_RUN	vpn_config.h	/^	ACTION_RUN,$/;"	e	enum:vpn_action
ACTION_START	vpn_config.h	/^	ACTION_START,$/;"	e	enum:vpn_action
ACTION_STOP	vpn_config.h	/^	ACTION_STOP,$/;"	e	enum:vpn_action
ACT_AddManager	ctrl_server_json.h	17;"	d
ACT_AddPeer	ctrl_server_json.h	15;"	d
ACT_AddPublicVpathList	ctrl_server_json.h	18;"	d
ACT_AddVpath	ctrl_server_json.h	12;"	d
ACT_AddVpathList	ctrl_server_json.h	10;"	d
ACT_AskNeighbor	ctrl_server_json.h	7;"	d
ACT_DelManager	ctrl_server_json.h	27;"	d
ACT_DelPeer	ctrl_server_json.h	16;"	d
ACT_DelPublicVpathList	ctrl_server_json.h	19;"	d
ACT_DelVpath	ctrl_server_json.h	13;"	d
ACT_DelVpathList	ctrl_server_json.h	11;"	d
ACT_DumpNodes	ctrl_server_json.h	32;"	d
ACT_GetAttachDevice	ctrl_server_json.h	23;"	d
ACT_GetDeviceInfo	ctrl_server_json.h	22;"	d
ACT_GetPackage	ctrl_server_json.h	24;"	d
ACT_GetRoute	ctrl_server_json.h	14;"	d
ACT_GetServerList	ctrl_server_json.h	21;"	d
ACT_GetTraffic	ctrl_server_json.h	26;"	d
ACT_GetVpathList	ctrl_server_json.h	30;"	d
ACT_GetVpnStatus	ctrl_server_json.h	20;"	d
ACT_GetVportOn	ctrl_server_json.h	25;"	d
ACT_ReloadMember	ctrl_server_json.h	31;"	d
ACT_StartVpn	ctrl_server_json.h	8;"	d
ACT_StopVpn	ctrl_server_json.h	9;"	d
ACT_TurnOffVpnLog	ctrl_server_json.h	29;"	d
ACT_TurnOnVpnLog	ctrl_server_json.h	28;"	d
AR_FLAGS	Makefile	/^AR_FLAGS = rs$/;"	m
AR_FLAGS	cgi/Makefile	/^AR_FLAGS = rs$/;"	m
AR_FLAGS	client_tool/Makefile	/^AR_FLAGS = rs$/;"	m
AR_FLAGS	vppnconfig/Makefile	/^AR_FLAGS = rs$/;"	m
BIRD_INFO_FILE	vppnconfig/nvram-common.h	6;"	d
CLOUD_HOST	vppnconfig/nvram-common.h	17;"	d
CLOUD_PORT	vppnconfig/nvram-common.h	18;"	d
COMMON_CTRL_H_	common-ctrl.h	9;"	d
CONFIG_TYPE_E	ctrl-interface.h	/^enum CONFIG_TYPE_E$/;"	g
CTRL_INTERFACE_H_	ctrl-interface.h	9;"	d
CTRL_SERVER_H_	ctrl_server.h	9;"	d
CTRL_SERVER_PORT_BASE	main.c	1808;"	d	file:
C_FLAGS	Makefile	/^C_FLAGS = -Wall -fPIC -DHAVE_DNS_REPORT=$(HAVE_DNS_REPORT) -DHAVE_PUBLICWHITELIST=$(HAVE_PUBLICWHITELIST) -DHAVE_LOCAL_VPN_CONFIG=$(HAVE_LOCAL_VPN_CONFIG)$/;"	m
C_FLAGS	cgi/Makefile	/^C_FLAGS = -Wall -fPIC$/;"	m
C_FLAGS	client_tool/Makefile	/^C_FLAGS = -Wall -fPIC$/;"	m
C_FLAGS	vppnconfig/Makefile	/^C_FLAGS = -Wall -fPIC -DHAVE_DNS_REPORT=$(HAVE_DNS_REPORT) -DHAVE_PUBLICWHITELIST=$(HAVE_PUBLICWHITELIST) -DHAVE_LOCAL_VPN_CONFIG=$(HAVE_LOCAL_VPN_CONFIG)$/;"	m
DEBUG_LEVEL_ALL	my_debug.h	/^	DEBUG_LEVEL_ALL,$/;"	e	enum:debug_level_e
DEBUG_LEVEL_ERR	my_debug.h	/^	DEBUG_LEVEL_ERR,$/;"	e	enum:debug_level_e
DEBUG_LEVEL_INFO	my_debug.h	/^	DEBUG_LEVEL_INFO,$/;"	e	enum:debug_level_e
DEBUG_LEVEL_NO	my_debug.h	/^	DEBUG_LEVEL_NO,$/;"	e	enum:debug_level_e
DEBUG_LEVEL_WARN	my_debug.h	/^	DEBUG_LEVEL_WARN,$/;"	e	enum:debug_level_e
DEFAULT_CLOUD_PORT	vpn_config.c	20;"	d	file:
DEFAULT_CLOUD_SERVER	vpn_config.c	19;"	d	file:
DEFAULT_CONFIG_FILE	vpn_config.c	12;"	d	file:
DEPS	Makefile	/^DEPS = $(OBJS:%.o=%.d)$/;"	m
DEPS	cgi/Makefile	/^DEPS = $(OBJS:%.o=%.d)$/;"	m
DEPS	client_tool/Makefile	/^DEPS = $(OBJS:%.o=%.d)$/;"	m
DEPS	vppnconfig/Makefile	/^DEPS = $(OBJS:%.o=%.d)$/;"	m
DNSMASQ_CONF_FMT	main.c	35;"	d	file:
DNS_CNAME	cgi/net_tool.c	1142;"	d	file:
DNS_CNAME	client_tool/net_tool.c	1142;"	d	file:
DNS_CNAME	net_tool.c	1328;"	d	file:
DNS_DUMP_FILE	main.c	1908;"	d	file:
DNS_HOST	cgi/net_tool.c	1141;"	d	file:
DNS_HOST	client_tool/net_tool.c	1141;"	d	file:
DNS_HOST	net_tool.c	1327;"	d	file:
ERROR_CLOUD_UNREACHABLE	vpn_config.h	/^	ERROR_CLOUD_UNREACHABLE = -1,$/;"	e	enum:vpn_error_no
ERROR_OK	vpn_config.h	/^	ERROR_OK,$/;"	e	enum:vpn_error_no
ERROR_PACKAGE_FLOW	vpn_config.h	/^	ERROR_PACKAGE_FLOW = -3,$/;"	e	enum:vpn_error_no
ERROR_SELECT_NO_RESOURCE	vpn_config.h	/^	ERROR_SELECT_NO_RESOURCE = -2,$/;"	e	enum:vpn_error_no
FILE_SITE_MANAGER	vppnconfig/nvram-common.h	25;"	d
FREE_PTR	cgi/net_tool.c	26;"	d	file:
FREE_PTR	client_tool/net_tool.c	26;"	d	file:
FREE_PTR	ctrl-interface.c	21;"	d	file:
FREE_PTR	ctrl_server.c	29;"	d	file:
FREE_PTR	ctrl_server_json.c	23;"	d	file:
FREE_PTR	net_tool.c	26;"	d	file:
FREE_PTR	vppnconfig/main.c	15;"	d	file:
FREE_PTR	vppnconfig/net_tool.c	26;"	d	file:
GetConfig	main.c	/^void GetConfig(const char *name, char *value)$/;"	f	signature:(const char *name, char *value)
GetConfig	vppnconfig/nvram-op.c	/^char* GetConfig(const char *name)$/;"	f	signature:(const char *name)
GetConfig	vppnconfig/nvram-op.h	/^char* GetConfig(const char *name);$/;"	p	signature:(const char *name)
HAVE_DNS_REPORT	Makefile	/^HAVE_DNS_REPORT = 0$/;"	m
HAVE_DNS_REPORT	vppnconfig/Makefile	/^HAVE_DNS_REPORT = 0$/;"	m
HAVE_LOCAL_VPN_CONFIG	Makefile	/^HAVE_LOCAL_VPN_CONFIG = 1$/;"	m
HAVE_LOCAL_VPN_CONFIG	vppnconfig/Makefile	/^HAVE_LOCAL_VPN_CONFIG = 1$/;"	m
HAVE_PUBLICWHITELIST	Makefile	/^HAVE_PUBLICWHITELIST = 0$/;"	m
HAVE_PUBLICWHITELIST	vppnconfig/Makefile	/^HAVE_PUBLICWHITELIST = 0$/;"	m
INCS	Makefile	/^INCS = $(wildcard *.h)$/;"	m
INCS	cgi/Makefile	/^INCS = $(wildcard *.h)$/;"	m
INCS	client_tool/Makefile	/^INCS = $(wildcard *.h)$/;"	m
INCS	vppnconfig/Makefile	/^INCS = $(wildcard *.h)$/;"	m
INC_PATH	Makefile	/^INC_PATH = -I.$/;"	m
INC_PATH	cgi/Makefile	/^INC_PATH = -I.$/;"	m
INC_PATH	client_tool/Makefile	/^INC_PATH = -I.$/;"	m
INC_PATH	vppnconfig/Makefile	/^INC_PATH = -I.$/;"	m
LD_FLAGS	Makefile	/^LD_FLAGS = -g $/;"	m
LD_FLAGS	cgi/Makefile	/^LD_FLAGS = -g$/;"	m
LD_FLAGS	client_tool/Makefile	/^LD_FLAGS = -g$/;"	m
LD_FLAGS	vppnconfig/Makefile	/^LD_FLAGS = -g $/;"	m
LD_LIBS	Makefile	/^LD_LIBS = -lm -lz -lpthread -lcrypto$/;"	m
LD_LIBS	cgi/Makefile	/^LD_LIBS = -lm -lpthread -lz$/;"	m
LD_LIBS	client_tool/Makefile	/^LD_LIBS = -lm -lpthread -lz$/;"	m
LD_LIBS	vppnconfig/Makefile	/^LD_LIBS = -lm -lz -lpthread$/;"	m
LD_PATH	Makefile	/^LD_PATH = $/;"	m
LD_PATH	cgi/Makefile	/^LD_PATH = $/;"	m
LD_PATH	client_tool/Makefile	/^LD_PATH = $/;"	m
LD_PATH	vppnconfig/Makefile	/^LD_PATH = $/;"	m
LOCAL_VPN_CONFIG_FMT	main.c	628;"	d	file:
LOCAL_VPPN_CONFIG_FMT	main.c	629;"	d	file:
MAX_ALLOC_LEN	cgi/net_tool.c	23;"	d	file:
MAX_ALLOC_LEN	client_tool/net_tool.c	23;"	d	file:
MAX_ALLOC_LEN	net_tool.c	23;"	d	file:
MAX_ALLOC_LEN	vppnconfig/net_tool.c	23;"	d	file:
MAX_ALLOC_ONCE_LEN	ctrl_server.c	26;"	d	file:
MAX_ARGS_NUM	process_tool.c	80;"	d	file:
MAX_BUF_LEN	iptables_tool.h	4;"	d
MAX_IP_BUF_LEN	ctrl-interface.h	17;"	d
MAX_LINE_LEN	process_tool.c	81;"	d	file:
MY_DEBUG_ERR	my_debug.h	19;"	d
MY_DEBUG_INFO	my_debug.h	21;"	d
MY_DEBUG_WARN	my_debug.h	20;"	d
MY_SIG_BIRD	main.c	1686;"	d	file:
MY_SIG_KILL	main.c	1685;"	d	file:
MY_SIG_RELOAD	main.c	1683;"	d	file:
MY_SIG_START	main.c	1684;"	d	file:
MY_SIG_STOP	main.c	1682;"	d	file:
NVRAM_BIN	vppnconfig/nvram-common.h	4;"	d
NVRAM_INTERFACE	vppnconfig/nvram-common.h	9;"	d
NVRAM_LOCALVIP	vppnconfig/nvram-common.h	11;"	d
NVRAM_LOCALVSUBNET	vppnconfig/nvram-common.h	12;"	d
NVRAM_REMOTEPEER	vppnconfig/nvram-common.h	10;"	d
NVRAM_SITE_MANAGER_HOST	vppnconfig/nvram-common.h	20;"	d
NVRAM_SITE_MANAGER_PORT	vppnconfig/nvram-common.h	21;"	d
NVRAM_SITE_ON	vppnconfig/nvram-common.h	14;"	d
NVRAM_SITE_SERVER	vppnconfig/nvram-common.h	15;"	d
NVRAM_VPPN_WHITELIST_FMT	vppnconfig/nvram-common.h	23;"	d
OBJS	Makefile	/^OBJS = $(SRC:%.c=%.o)$/;"	m
OBJS	cgi/Makefile	/^OBJS = $(SRC:%.c=%.o)$/;"	m
OBJS	client_tool/Makefile	/^OBJS = $(SRC:%.c=%.o)$/;"	m
OBJS	vppnconfig/Makefile	/^OBJS = $(SRC:%.c=%.o)$/;"	m
PACKET_SIZE	cgi/net_tool.c	22;"	d	file:
PACKET_SIZE	client_tool/net_tool.c	22;"	d	file:
PACKET_SIZE	net_tool.c	22;"	d	file:
PACKET_SIZE	vppnconfig/net_tool.c	22;"	d	file:
PUBLIC_WHITE_LIST_FILE	main.c	33;"	d	file:
RM	Makefile	/^RM = rm -f$/;"	m
RM	cgi/Makefile	/^RM = rm -f$/;"	m
RM	client_tool/Makefile	/^RM = rm -f$/;"	m
RM	vppnconfig/Makefile	/^RM = rm -f$/;"	m
ROUTE_FILE	cgi/net_tool.c	664;"	d	file:
ROUTE_FILE	client_tool/net_tool.c	664;"	d	file:
ROUTE_FILE	net_tool.c	720;"	d	file:
ROUTE_FILE	vppnconfig/net_tool.c	255;"	d	file:
SITE_FILE	vppnconfig/nvram-common.h	7;"	d
SRC	Makefile	/^SRC = $(wildcard *.c)$/;"	m
SRC	cgi/Makefile	/^SRC = $(wildcard *.c)$/;"	m
SRC	client_tool/Makefile	/^SRC = $(wildcard *.c)$/;"	m
SRC	vppnconfig/Makefile	/^SRC = $(wildcard *.c)$/;"	m
STATIC_LIB	Makefile	/^STATIC_LIB = $/;"	m
STATIC_LIB	vppnconfig/Makefile	/^STATIC_LIB = $/;"	m
SetConfig	vppnconfig/nvram-op.c	/^void SetConfig(const char *name, char *value)$/;"	f	signature:(const char *name, char *value)
SetConfig	vppnconfig/nvram-op.h	/^void SetConfig(const char *name, char *value);$/;"	p	signature:(const char *name, char *value)
TARGETS	Makefile	/^TARGETS = vppnctrl$/;"	m
TARGETS	cgi/Makefile	/^TARGETS = vpnctrl.cgi$/;"	m
TARGETS	client_tool/Makefile	/^TARGETS = ctrl_client$/;"	m
TARGETS	vppnconfig/Makefile	/^TARGETS = vppnconfig$/;"	m
TUNNEL_CONNECT	vpn_config.h	/^	TUNNEL_CONNECT,$/;"	e	enum:vpn_tunnel_status
TUNNEL_DISABLE	vpn_config.h	/^	TUNNEL_DISABLE,$/;"	e	enum:vpn_tunnel_status
TUNNEL_DONE	vpn_config.h	/^	TUNNEL_DONE$/;"	e	enum:vpn_tunnel_status
TUNNEL_GET_RESOURCE	vpn_config.h	/^	TUNNEL_GET_RESOURCE,$/;"	e	enum:vpn_tunnel_status
TUNNEL_READY	vpn_config.h	/^	TUNNEL_READY,$/;"	e	enum:vpn_tunnel_status
TUNNEL_SELECT_SERVER	vpn_config.h	/^	TUNNEL_SELECT_SERVER,	\/* in fact, we skip the step *\/$/;"	e	enum:vpn_tunnel_status
TUNNEL_VPN_PID_FILE_FMT	main.c	77;"	d	file:
TUNNEL_VPPN_PID_FILE_FMT	main.c	78;"	d	file:
TYPE_VPN	ctrl-interface.h	/^	TYPE_VPN = 0,$/;"	e	enum:CONFIG_TYPE_E
TYPE_VPN	vppnconfig/main.c	/^	TYPE_VPN,$/;"	e	enum:VPN_Type	file:
TYPE_VPPN	ctrl-interface.h	/^	TYPE_VPPN$/;"	e	enum:CONFIG_TYPE_E
TYPE_VPPN	vppnconfig/main.c	/^	TYPE_VPPN$/;"	e	enum:VPN_Type	file:
Timer	timer_tool.h	/^typedef struct Timer$/;"	s
Timer	timer_tool.h	/^} Timer;$/;"	t	typeref:struct:Timer
Timer::end_time	timer_tool.h	/^    struct timeval end_time;$/;"	m	struct:Timer	typeref:struct:Timer::timeval	access:public
UnsetConfig	vppnconfig/nvram-op.c	/^void UnsetConfig(const char *name)$/;"	f	signature:(const char *name)
UnsetConfig	vppnconfig/nvram-op.h	/^void UnsetConfig(const char *name);$/;"	p	signature:(const char *name)
VPNCTRL_MAX_TUNNELS	cgi/main.c	152;"	d	file:
VPNCTRL_MAX_TUNNELS	client_tool/main.c	153;"	d	file:
VPNCTRL_SERVER_BASE	cgi/main.c	151;"	d	file:
VPNCTRL_SERVER_BASE	client_tool/main.c	152;"	d	file:
VPN_CLOUD_CONF_FILE_FMT	vpn_config.c	15;"	d	file:
VPN_PORT_LOCAL_BASE	vpn_config.h	4;"	d
VPN_PORT_SERVER_BASE	vpn_config.h	5;"	d
VPN_SWITCH_STR	vpn_config.c	37;"	d	file:
VPN_TINC_MYSELF_ADDR	vpn_config.c	35;"	d	file:
VPN_TINC_SERVER	vpn_config.c	33;"	d	file:
VPN_TINC_SERVER_PORT	vpn_config.c	34;"	d	file:
VPN_TINC_TEAMID	vpn_config.c	36;"	d	file:
VPN_TUNNEL_CONF_FILE_FMT	vpn_config.c	16;"	d	file:
VPN_Type	vppnconfig/main.c	/^enum VPN_Type$/;"	g	file:
VPPN_CLOUD_CONF_FILE_FMT	vpn_config.c	13;"	d	file:
VPPN_TUNNEL_CONF_FILE_FMT	vpn_config.c	14;"	d	file:
WHITELIST_CONF_FMT	main.c	34;"	d	file:
_BASE64_H_	base64.h	2;"	d
_COMPRESS_TOOL_H_	compress_tool.h	2;"	d
_FILE_TOOL_H_	client_tool/file_tool.h	2;"	d
_FILE_TOOL_H_	file_tool.h	2;"	d
_FILE_TOOL_H_	vppnconfig/file_tool.h	2;"	d
_MY_DEBUG_H_	my_debug.h	2;"	d
_NET_TOOL_H_	cgi/net_tool.h	2;"	d
_NET_TOOL_H_	client_tool/net_tool.h	2;"	d
_NET_TOOL_H_	net_tool.h	2;"	d
_NET_TOOL_H_	vppnconfig/net_tool.h	2;"	d
_PROCESS_TOOL_H_	process_tool.h	2;"	d
_SRC_ATTACHDEVICE_H_	attachdevice.h	2;"	d
_SRC_CTRL_SERVER_JSON_H_	ctrl_server_json.h	2;"	d
_SRC_TINC_TOOL_H_	tinc_tool.h	2;"	d
_TIMER_TOOL_H_	timer_tool.h	9;"	d
__BIRD_CONF_H__	bird_conf.h	2;"	d
__BIRD_CONF_H__	vppnconfig/bird_conf.h	2;"	d
__IPTABLES_TOOL_H__	iptables_tool.h	2;"	d
__NVRAM_COMMON_H__	vppnconfig/nvram-common.h	2;"	d
__NVRAM_OP_H__	vppnconfig/nvram-op.h	2;"	d
__VPN_CLOUD_H__	vpn_cloud.h	2;"	d
__VPN_CONFIG_H__	vpn_config.h	2;"	d
__anon1::buffer	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
__anon1::length	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
__anon1::offset	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
__anon2::buffer	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
__anon2::length	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
__anon2::offset	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
__anon3::buffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
__anon3::length	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
__anon3::offset	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
__anon4::buffer	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
__anon4::length	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
__anon4::offset	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
a	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cgi/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cgi/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cgi/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	cgi/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	client_tool/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	client_tool/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	client_tool/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	client_tool/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
a	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
act_item	ctrl_server_json.c	/^	cJSON *act_item = cJSON_GetObjectItem(jsonreq, "action");$/;"	l
action	client_tool/main.c	/^	char *action = NULL;$/;"	l
action	ctrl_server_json.c	/^	int action = act_item->valueint;$/;"	l
action	main.c	/^	int action = -1;$/;"	l
add_old_into_new	vppnconfig/main.c	/^void add_old_into_new(cJSON *new, cJSON *old_item)$/;"	f	signature:(cJSON *new, cJSON *old_item)
add_one_route	cgi/net_tool.c	/^void add_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
add_one_route	client_tool/net_tool.c	/^void add_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
add_one_route	net_tool.c	/^void add_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
add_one_route	vppnconfig/net_tool.c	/^void add_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
add_route_by_cmd	main.c	/^void add_route_by_cmd(char *ip, char *netmask, char *dev)$/;"	f	signature:(char *ip, char *netmask, char *dev)
add_vpn_new_path	vppnconfig/main.c	/^void add_vpn_new_path(cJSON *new_array, cJSON *old_item)$/;"	f	signature:(cJSON *new_array, cJSON *old_item)
add_vppn_new_path	vppnconfig/main.c	/^void add_vppn_new_path(cJSON *new_array, cJSON *old_item)$/;"	f	signature:(cJSON *new_array, cJSON *old_item)
addr	cgi/net_tool.c	/^				struct sockaddr_in addr;$/;"	l
addr	cgi/net_tool.c	/^	struct sockaddr addr;$/;"	l
addr	cgi/net_tool.c	/^	struct sockaddr_in addr;$/;"	l
addr	client_tool/net_tool.c	/^				struct sockaddr_in addr;$/;"	l
addr	client_tool/net_tool.c	/^	struct sockaddr addr;$/;"	l
addr	client_tool/net_tool.c	/^	struct sockaddr_in addr;$/;"	l
addr	ctrl_server.c	/^	struct  sockaddr_in     addr;$/;"	l
addr	ctrl_server.c	/^	struct ctrl_addr_s *addr = malloc(sizeof(struct ctrl_addr_s));$/;"	l
addr	ctrl_server.c	/^	struct sockaddr_in	addr;$/;"	l
addr	net_tool.c	/^				struct sockaddr_in addr;$/;"	l
addr	net_tool.c	/^	struct sockaddr addr;$/;"	l
addr	net_tool.c	/^	struct sockaddr_in addr;$/;"	l
addr	vppnconfig/net_tool.c	/^	struct sockaddr addr;$/;"	l
addr	vppnconfig/net_tool.c	/^	struct sockaddr_in addr;$/;"	l
addr_len	cgi/net_tool.c	/^	socklen_t addr_len = sizeof(struct sockaddr_in);$/;"	l
addr_len	client_tool/net_tool.c	/^	socklen_t addr_len = sizeof(struct sockaddr_in);$/;"	l
addr_len	ctrl_server.c	/^	socklen_t addr_len = sizeof(addr);$/;"	l
addr_len	net_tool.c	/^	socklen_t addr_len = sizeof(struct sockaddr_in);$/;"	l
alias_array	cgi/net_tool.c	/^	cJSON *alias_array = cJSON_CreateArray();$/;"	l
alias_array	client_tool/net_tool.c	/^	cJSON *alias_array = cJSON_CreateArray();$/;"	l
alias_array	net_tool.c	/^	cJSON *alias_array = cJSON_CreateArray();$/;"	l
alive_timer	main.c	/^	Timer alive_timer;$/;"	l
aname	cgi/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
aname	client_tool/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
aname	net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
answer	cgi/net_tool.c	/^    unsigned short answer=0;$/;"	l
answer	client_tool/net_tool.c	/^    unsigned short answer=0;$/;"	l
answer	net_tool.c	/^    unsigned short answer=0;$/;"	l
answer	vppnconfig/net_tool.c	/^    unsigned short answer=0;$/;"	l
answers	cgi/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
answers	client_tool/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
answers	net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
ap	my_debug.c	/^	va_list ap;$/;"	l
append_line	client_tool/file_tool.c	/^void append_line(char *file_name, char *line)$/;"	f	signature:(char *file_name, char *line)
append_line	client_tool/file_tool.h	/^void append_line(char *file_name, char *line);$/;"	p	signature:(char *file_name, char *line)
append_line	file_tool.c	/^void append_line(char *file_name, char *line)$/;"	f	signature:(char *file_name, char *line)
append_line	file_tool.h	/^void append_line(char *file_name, char *line);$/;"	p	signature:(char *file_name, char *line)
append_line	vppnconfig/file_tool.c	/^void append_line(char *file_name, char *line)$/;"	f	signature:(char *file_name, char *line)
append_line	vppnconfig/file_tool.h	/^void append_line(char *file_name, char *line);$/;"	p	signature:(char *file_name, char *line)
arg	main.c	/^	char *arg = strdup(cmd);$/;"	l
args	process_tool.c	/^    char *args[MAX_ARGS_NUM] = {0};$/;"	l
args_cnt	process_tool.c	/^    int args_cnt = 0;$/;"	l
array	main.c	/^				cJSON *array = cJSON_Parse(text);$/;"	l
array	vppnconfig/bird_conf.c	/^	cJSON *array = cJSON_GetObjectItem(root, "interface");$/;"	l
array	vppnconfig/main.c	/^	cJSON *array = cJSON_CreateArray();$/;"	l
array_count	cgi/net_tool.c	/^					int array_count = cJSON_GetArraySize(hosts);$/;"	l
array_count	cgi/net_tool.c	/^	int array_count = cJSON_GetArraySize(hosts);$/;"	l
array_count	client_tool/net_tool.c	/^					int array_count = cJSON_GetArraySize(hosts);$/;"	l
array_count	client_tool/net_tool.c	/^	int array_count = cJSON_GetArraySize(hosts);$/;"	l
array_count	ctrl-interface.c	/^		int array_count = cJSON_GetArraySize(cloud_ret);$/;"	l
array_count	main.c	/^					int array_count = cJSON_GetArraySize(whitelist_item);$/;"	l
array_count	main.c	/^			int array_count = cJSON_GetArraySize(response);$/;"	l
array_count	main.c	/^		int array_count = cJSON_GetArraySize(whitelist);$/;"	l
array_count	net_tool.c	/^					int array_count = cJSON_GetArraySize(hosts);$/;"	l
array_count	net_tool.c	/^	int array_count = cJSON_GetArraySize(hosts);$/;"	l
atoi	vpn_config.c	/^				my_debug_set_level(atoi(optarg));$/;"	p	file:
attach_info	attachdevice.c	/^char *attach_info = NULL;$/;"	v
attach_lock	attachdevice.c	/^pthread_mutex_t attach_lock;$/;"	v
auto_mode	vpn_config.h	/^	int		auto_mode;			\/* 0:non-auto_mode, 1:auto_mode *\/$/;"	m	struct:vpn_tunnel_s	access:public
b64	base64.c	/^    BIO *b64, *bio;$/;"	l
bakup_lock	main.c	/^pthread_mutex_t bakup_lock;$/;"	v
base64_decode	base64.c	/^int base64_decode(char *in_str, int in_len, char *out_str)$/;"	f	signature:(char *in_str, int in_len, char *out_str)
base64_decode	base64.h	/^int base64_decode(char *in_str, int in_len, char *out_str);$/;"	p	signature:(char *in_str, int in_len, char *out_str)
base64_encode	base64.c	/^int base64_encode(char *in_str, int in_len, char *out_str)$/;"	f	signature:(char *in_str, int in_len, char *out_str)
base64_encode	base64.h	/^int base64_encode(char *in_str, int in_len, char *out_str);$/;"	p	signature:(char *in_str, int in_len, char *out_str)
bind_ret	ctrl_server.c	/^		int bind_ret = bind(listen_fd, (struct sockaddr *)&addr,sizeof(addr));$/;"	l
bindir	Makefile	/^bindir ?= bin\/$/;"	m
bindir	cgi/Makefile	/^bindir ?= bin\/$/;"	m
bindir	client_tool/Makefile	/^bindir ?= bin\/$/;"	m
bindir	vppnconfig/Makefile	/^bindir ?= bin\/$/;"	m
bio	base64.c	/^    BIO *b64, *bio;$/;"	l
bird_config_common	bird_conf.c	/^void bird_config_common(char *buf)$/;"	f	signature:(char *buf)
bird_config_common	vppnconfig/bird_conf.c	/^void bird_config_common(char *buf, cJSON *root)$/;"	f	signature:(char *buf, cJSON *root)
bird_config_ebgp	bird_conf.c	/^void bird_config_ebgp(char *buf, cJSON *peers)$/;"	f	signature:(char *buf, cJSON *peers)
bird_config_ebgp	vppnconfig/bird_conf.c	/^void bird_config_ebgp(char *buf, cJSON *root)$/;"	f	signature:(char *buf, cJSON *root)
bird_config_ospf	bird_conf.c	/^void bird_config_ospf(char *buf)$/;"	f	signature:(char *buf)
bird_config_ospf	vppnconfig/bird_conf.c	/^void bird_config_ospf(char *buf, cJSON *root)$/;"	f	signature:(char *buf, cJSON *root)
bird_peers	bird_conf.c	/^		cJSON *bird_peers = merge_temp_peers_conf();$/;"	l
bit	cgi/net_tool.c	/^		unsigned long bit = 1 << i;$/;"	l
bit	client_tool/net_tool.c	/^		unsigned long bit = 1 << i;$/;"	l
bit	net_tool.c	/^		unsigned long bit = 1 << i;$/;"	l
bitfield_to_int	ctrl_server_json.c	/^unsigned int bitfield_to_int(const void *bitfield, size_t size) {$/;"	f	signature:(const void *bitfield, size_t size)
bptr	base64.c	/^    BUF_MEM *bptr = NULL;$/;"	l
buf	bird_conf.c	/^	char *buf = malloc(256 * 1024);$/;"	l
buf	cgi/net_tool.c	/^	unsigned char buf[1024];$/;"	l
buf	cgi/net_tool.c	/^    char buf[20];$/;"	l
buf	client_tool/main.c	/^			char buf[100] = "";$/;"	l
buf	client_tool/net_tool.c	/^	unsigned char buf[1024];$/;"	l
buf	client_tool/net_tool.c	/^    char buf[20];$/;"	l
buf	ctrl-interface.c	/^	char buf[4096];$/;"	l
buf	ctrl_server.c	/^	unsigned char buf[4];$/;"	l
buf	ctrl_server_json.c	/^	char *buf = NULL;$/;"	l
buf	ctrl_server_json.c	/^	char buf[1000] = "";$/;"	l
buf	iptables_tool.c	/^	char buf[200];$/;"	l
buf	main.c	/^		char buf[1000];$/;"	l
buf	main.c	/^	char buf[1000];$/;"	l
buf	net_tool.c	/^	unsigned char buf[1024];$/;"	l
buf	net_tool.c	/^    char buf[20];$/;"	l
buf	process_tool.c	/^		char buf[1000];$/;"	l
buf	vppnconfig/bird_conf.c	/^	char *buf = NULL;$/;"	l
buf	vppnconfig/main.c	/^			char buf[100];$/;"	l
buf	vppnconfig/net_tool.c	/^    char buf[20];$/;"	l
buffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
buffer	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
buffer	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
buffer	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
c	cJSON.c	/^	cJSON *c=cJSON_New_Item();$/;"	l
c	cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	l
c	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
c	cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	l
c	cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	l
c	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
c	cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	l
c	cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	l
c	cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	l
c	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
c	cgi/cJSON.c	/^	cJSON *c=cJSON_New_Item();$/;"	l
c	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	l
c	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
c	cgi/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	l
c	cgi/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	l
c	cgi/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
c	cgi/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	l
c	cgi/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	l
c	cgi/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	l
c	cgi/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
c	client_tool/cJSON.c	/^	cJSON *c=cJSON_New_Item();$/;"	l
c	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	l
c	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
c	client_tool/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	l
c	client_tool/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	l
c	client_tool/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
c	client_tool/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	l
c	client_tool/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	l
c	client_tool/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	l
c	client_tool/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
c	vpn_config.c	/^	int		c;$/;"	l
c	vppnconfig/cJSON.c	/^	cJSON *c=cJSON_New_Item();$/;"	l
c	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	l
c	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
c	vppnconfig/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	l
c	vppnconfig/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	l
c	vppnconfig/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
c	vppnconfig/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	l
c	vppnconfig/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	l
c	vppnconfig/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	l
c	vppnconfig/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
cJSON	cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON	cgi/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cgi/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON	client_tool/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	client_tool/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON	vppnconfig/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	vppnconfig/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON::child	cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::child	cgi/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::child	client_tool/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::child	vppnconfig/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::next	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::next	cgi/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::next	client_tool/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::next	vppnconfig/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
cJSON::prev	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
cJSON::prev	cgi/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
cJSON::prev	client_tool/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
cJSON::prev	vppnconfig/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
cJSON::string	cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
cJSON::string	cgi/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
cJSON::string	client_tool/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
cJSON::string	vppnconfig/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
cJSON::type	cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
cJSON::type	cgi/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
cJSON::type	client_tool/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
cJSON::type	vppnconfig/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
cJSON::valuedouble	cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valuedouble	cgi/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valuedouble	client_tool/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valuedouble	vppnconfig/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valueint	cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valueint	cgi/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valueint	client_tool/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valueint	vppnconfig/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
cJSON::valuestring	cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
cJSON::valuestring	cgi/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
cJSON::valuestring	client_tool/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
cJSON::valuestring	vppnconfig/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
cJSON_AddBoolToObject	cJSON.h	138;"	d
cJSON_AddBoolToObject	cgi/cJSON.h	138;"	d
cJSON_AddBoolToObject	client_tool/cJSON.h	138;"	d
cJSON_AddBoolToObject	vppnconfig/cJSON.h	138;"	d
cJSON_AddFalseToObject	cJSON.h	137;"	d
cJSON_AddFalseToObject	cgi/cJSON.h	137;"	d
cJSON_AddFalseToObject	client_tool/cJSON.h	137;"	d
cJSON_AddFalseToObject	vppnconfig/cJSON.h	137;"	d
cJSON_AddItemReferenceToArray	cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	cJSON.h	/^extern void cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	cgi/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	cgi/cJSON.h	/^extern void cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	client_tool/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	client_tool/cJSON.h	/^extern void cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	vppnconfig/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToArray	vppnconfig/cJSON.h	/^extern void cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemReferenceToObject	cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	cJSON.h	/^extern void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	cgi/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	cgi/cJSON.h	/^extern void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	client_tool/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	client_tool/cJSON.h	/^extern void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	vppnconfig/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemReferenceToObject	vppnconfig/cJSON.h	/^extern void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToArray	cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	cJSON.h	/^extern void cJSON_AddItemToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	cgi/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	cgi/cJSON.h	/^extern void cJSON_AddItemToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	client_tool/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	client_tool/cJSON.h	/^extern void cJSON_AddItemToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	vppnconfig/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToArray	vppnconfig/cJSON.h	/^extern void cJSON_AddItemToArray(cJSON *array, cJSON *item);$/;"	p	signature:(cJSON *array, cJSON *item)
cJSON_AddItemToObject	cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	cJSON.h	/^extern void	cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	cgi/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	cgi/cJSON.h	/^extern void	cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	client_tool/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	client_tool/cJSON.h	/^extern void	cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	vppnconfig/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObject	vppnconfig/cJSON.h	/^extern void	cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item);$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	cJSON.h	/^extern void	cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item);	\/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object *\/$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	cgi/cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	cgi/cJSON.h	/^extern void	cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item);	\/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object *\/$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	client_tool/cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	client_tool/cJSON.h	/^extern void	cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item);	\/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object *\/$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	vppnconfig/cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddItemToObjectCS	vppnconfig/cJSON.h	/^extern void	cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item);	\/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the cJSON object *\/$/;"	p	signature:(cJSON *object,const char *string,cJSON *item)
cJSON_AddNullToObject	cJSON.h	135;"	d
cJSON_AddNullToObject	cgi/cJSON.h	135;"	d
cJSON_AddNullToObject	client_tool/cJSON.h	135;"	d
cJSON_AddNullToObject	vppnconfig/cJSON.h	135;"	d
cJSON_AddNumberToObject	cJSON.h	139;"	d
cJSON_AddNumberToObject	cgi/cJSON.h	139;"	d
cJSON_AddNumberToObject	client_tool/cJSON.h	139;"	d
cJSON_AddNumberToObject	vppnconfig/cJSON.h	139;"	d
cJSON_AddStringToObject	cJSON.h	140;"	d
cJSON_AddStringToObject	cgi/cJSON.h	140;"	d
cJSON_AddStringToObject	client_tool/cJSON.h	140;"	d
cJSON_AddStringToObject	vppnconfig/cJSON.h	140;"	d
cJSON_AddTrueToObject	cJSON.h	136;"	d
cJSON_AddTrueToObject	cgi/cJSON.h	136;"	d
cJSON_AddTrueToObject	client_tool/cJSON.h	136;"	d
cJSON_AddTrueToObject	vppnconfig/cJSON.h	136;"	d
cJSON_Array	cJSON.h	37;"	d
cJSON_Array	cgi/cJSON.h	37;"	d
cJSON_Array	client_tool/cJSON.h	37;"	d
cJSON_Array	vppnconfig/cJSON.h	37;"	d
cJSON_CreateArray	cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f	signature:(void)
cJSON_CreateArray	cJSON.h	/^extern cJSON *cJSON_CreateArray(void);$/;"	p	signature:(void)
cJSON_CreateArray	cgi/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f	signature:(void)
cJSON_CreateArray	cgi/cJSON.h	/^extern cJSON *cJSON_CreateArray(void);$/;"	p	signature:(void)
cJSON_CreateArray	client_tool/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f	signature:(void)
cJSON_CreateArray	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateArray(void);$/;"	p	signature:(void)
cJSON_CreateArray	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f	signature:(void)
cJSON_CreateArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateArray(void);$/;"	p	signature:(void)
cJSON_CreateBool	cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f	signature:(int b)
cJSON_CreateBool	cJSON.h	/^extern cJSON *cJSON_CreateBool(int b);$/;"	p	signature:(int b)
cJSON_CreateBool	cgi/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f	signature:(int b)
cJSON_CreateBool	cgi/cJSON.h	/^extern cJSON *cJSON_CreateBool(int b);$/;"	p	signature:(int b)
cJSON_CreateBool	client_tool/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f	signature:(int b)
cJSON_CreateBool	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateBool(int b);$/;"	p	signature:(int b)
cJSON_CreateBool	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f	signature:(int b)
cJSON_CreateBool	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateBool(int b);$/;"	p	signature:(int b)
cJSON_CreateDoubleArray	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	cJSON.h	/^extern cJSON *cJSON_CreateDoubleArray(const double *numbers,int count);$/;"	p	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	cgi/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	cgi/cJSON.h	/^extern cJSON *cJSON_CreateDoubleArray(const double *numbers,int count);$/;"	p	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	client_tool/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateDoubleArray(const double *numbers,int count);$/;"	p	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const double *numbers,int count)
cJSON_CreateDoubleArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateDoubleArray(const double *numbers,int count);$/;"	p	signature:(const double *numbers,int count)
cJSON_CreateFalse	cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f	signature:(void)
cJSON_CreateFalse	cJSON.h	/^extern cJSON *cJSON_CreateFalse(void);$/;"	p	signature:(void)
cJSON_CreateFalse	cgi/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f	signature:(void)
cJSON_CreateFalse	cgi/cJSON.h	/^extern cJSON *cJSON_CreateFalse(void);$/;"	p	signature:(void)
cJSON_CreateFalse	client_tool/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f	signature:(void)
cJSON_CreateFalse	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateFalse(void);$/;"	p	signature:(void)
cJSON_CreateFalse	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f	signature:(void)
cJSON_CreateFalse	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateFalse(void);$/;"	p	signature:(void)
cJSON_CreateFloatArray	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	cJSON.h	/^extern cJSON *cJSON_CreateFloatArray(const float *numbers,int count);$/;"	p	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	cgi/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	cgi/cJSON.h	/^extern cJSON *cJSON_CreateFloatArray(const float *numbers,int count);$/;"	p	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	client_tool/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateFloatArray(const float *numbers,int count);$/;"	p	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const float *numbers,int count)
cJSON_CreateFloatArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateFloatArray(const float *numbers,int count);$/;"	p	signature:(const float *numbers,int count)
cJSON_CreateIntArray	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const int *numbers,int count)
cJSON_CreateIntArray	cJSON.h	/^extern cJSON *cJSON_CreateIntArray(const int *numbers,int count);$/;"	p	signature:(const int *numbers,int count)
cJSON_CreateIntArray	cgi/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const int *numbers,int count)
cJSON_CreateIntArray	cgi/cJSON.h	/^extern cJSON *cJSON_CreateIntArray(const int *numbers,int count);$/;"	p	signature:(const int *numbers,int count)
cJSON_CreateIntArray	client_tool/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const int *numbers,int count)
cJSON_CreateIntArray	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateIntArray(const int *numbers,int count);$/;"	p	signature:(const int *numbers,int count)
cJSON_CreateIntArray	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const int *numbers,int count)
cJSON_CreateIntArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateIntArray(const int *numbers,int count);$/;"	p	signature:(const int *numbers,int count)
cJSON_CreateNull	cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f	signature:(void)
cJSON_CreateNull	cJSON.h	/^extern cJSON *cJSON_CreateNull(void);$/;"	p	signature:(void)
cJSON_CreateNull	cgi/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f	signature:(void)
cJSON_CreateNull	cgi/cJSON.h	/^extern cJSON *cJSON_CreateNull(void);$/;"	p	signature:(void)
cJSON_CreateNull	client_tool/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f	signature:(void)
cJSON_CreateNull	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateNull(void);$/;"	p	signature:(void)
cJSON_CreateNull	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f	signature:(void)
cJSON_CreateNull	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateNull(void);$/;"	p	signature:(void)
cJSON_CreateNumber	cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f	signature:(double num)
cJSON_CreateNumber	cJSON.h	/^extern cJSON *cJSON_CreateNumber(double num);$/;"	p	signature:(double num)
cJSON_CreateNumber	cgi/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f	signature:(double num)
cJSON_CreateNumber	cgi/cJSON.h	/^extern cJSON *cJSON_CreateNumber(double num);$/;"	p	signature:(double num)
cJSON_CreateNumber	client_tool/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f	signature:(double num)
cJSON_CreateNumber	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateNumber(double num);$/;"	p	signature:(double num)
cJSON_CreateNumber	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f	signature:(double num)
cJSON_CreateNumber	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateNumber(double num);$/;"	p	signature:(double num)
cJSON_CreateObject	cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f	signature:(void)
cJSON_CreateObject	cJSON.h	/^extern cJSON *cJSON_CreateObject(void);$/;"	p	signature:(void)
cJSON_CreateObject	cgi/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f	signature:(void)
cJSON_CreateObject	cgi/cJSON.h	/^extern cJSON *cJSON_CreateObject(void);$/;"	p	signature:(void)
cJSON_CreateObject	client_tool/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f	signature:(void)
cJSON_CreateObject	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateObject(void);$/;"	p	signature:(void)
cJSON_CreateObject	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f	signature:(void)
cJSON_CreateObject	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateObject(void);$/;"	p	signature:(void)
cJSON_CreateString	cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f	signature:(const char *string)
cJSON_CreateString	cJSON.h	/^extern cJSON *cJSON_CreateString(const char *string);$/;"	p	signature:(const char *string)
cJSON_CreateString	cgi/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f	signature:(const char *string)
cJSON_CreateString	cgi/cJSON.h	/^extern cJSON *cJSON_CreateString(const char *string);$/;"	p	signature:(const char *string)
cJSON_CreateString	client_tool/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f	signature:(const char *string)
cJSON_CreateString	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateString(const char *string);$/;"	p	signature:(const char *string)
cJSON_CreateString	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f	signature:(const char *string)
cJSON_CreateString	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateString(const char *string);$/;"	p	signature:(const char *string)
cJSON_CreateStringArray	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const char **strings,int count)
cJSON_CreateStringArray	cJSON.h	/^extern cJSON *cJSON_CreateStringArray(const char **strings,int count);$/;"	p	signature:(const char **strings,int count)
cJSON_CreateStringArray	cgi/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const char **strings,int count)
cJSON_CreateStringArray	cgi/cJSON.h	/^extern cJSON *cJSON_CreateStringArray(const char **strings,int count);$/;"	p	signature:(const char **strings,int count)
cJSON_CreateStringArray	client_tool/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const char **strings,int count)
cJSON_CreateStringArray	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateStringArray(const char **strings,int count);$/;"	p	signature:(const char **strings,int count)
cJSON_CreateStringArray	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f	signature:(const char **strings,int count)
cJSON_CreateStringArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateStringArray(const char **strings,int count);$/;"	p	signature:(const char **strings,int count)
cJSON_CreateTrue	cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f	signature:(void)
cJSON_CreateTrue	cJSON.h	/^extern cJSON *cJSON_CreateTrue(void);$/;"	p	signature:(void)
cJSON_CreateTrue	cgi/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f	signature:(void)
cJSON_CreateTrue	cgi/cJSON.h	/^extern cJSON *cJSON_CreateTrue(void);$/;"	p	signature:(void)
cJSON_CreateTrue	client_tool/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f	signature:(void)
cJSON_CreateTrue	client_tool/cJSON.h	/^extern cJSON *cJSON_CreateTrue(void);$/;"	p	signature:(void)
cJSON_CreateTrue	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f	signature:(void)
cJSON_CreateTrue	vppnconfig/cJSON.h	/^extern cJSON *cJSON_CreateTrue(void);$/;"	p	signature:(void)
cJSON_Delete	cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f	signature:(cJSON *c)
cJSON_Delete	cJSON.h	/^extern void   cJSON_Delete(cJSON *c);$/;"	p	signature:(cJSON *c)
cJSON_Delete	cgi/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f	signature:(cJSON *c)
cJSON_Delete	cgi/cJSON.h	/^extern void   cJSON_Delete(cJSON *c);$/;"	p	signature:(cJSON *c)
cJSON_Delete	client_tool/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f	signature:(cJSON *c)
cJSON_Delete	client_tool/cJSON.h	/^extern void   cJSON_Delete(cJSON *c);$/;"	p	signature:(cJSON *c)
cJSON_Delete	vppnconfig/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f	signature:(cJSON *c)
cJSON_Delete	vppnconfig/cJSON.h	/^extern void   cJSON_Delete(cJSON *c);$/;"	p	signature:(cJSON *c)
cJSON_DeleteItemFromArray	cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	cJSON.h	/^extern void   cJSON_DeleteItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	cgi/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	cgi/cJSON.h	/^extern void   cJSON_DeleteItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	client_tool/cJSON.h	/^extern void   cJSON_DeleteItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray	vppnconfig/cJSON.h	/^extern void   cJSON_DeleteItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DeleteItemFromArray2	cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	cJSON.h	/^extern void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c);$/;"	p	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	cgi/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	cgi/cJSON.h	/^extern void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c);$/;"	p	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	client_tool/cJSON.h	/^extern void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c);$/;"	p	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromArray2	vppnconfig/cJSON.h	/^extern void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c);$/;"	p	signature:(cJSON *array, cJSON *c)
cJSON_DeleteItemFromObject	cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	cJSON.h	/^extern void   cJSON_DeleteItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	cgi/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	cgi/cJSON.h	/^extern void   cJSON_DeleteItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	client_tool/cJSON.h	/^extern void   cJSON_DeleteItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DeleteItemFromObject	vppnconfig/cJSON.h	/^extern void   cJSON_DeleteItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromArray	cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	p	file:
cJSON_DetachItemFromArray	cJSON.h	/^extern cJSON *cJSON_DetachItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	cgi/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	p	file:
cJSON_DetachItemFromArray	cgi/cJSON.h	/^extern cJSON *cJSON_DetachItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	p	file:
cJSON_DetachItemFromArray	client_tool/cJSON.h	/^extern cJSON *cJSON_DetachItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	p	file:
cJSON_DetachItemFromArray	vppnconfig/cJSON.h	/^extern cJSON *cJSON_DetachItemFromArray(cJSON *array,int which);$/;"	p	signature:(cJSON *array,int which)
cJSON_DetachItemFromArray2	cJSON.c	/^cJSON *cJSON_DetachItemFromArray2(cJSON *array, cJSON *c)			{$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DetachItemFromArray2	cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	p	file:
cJSON_DetachItemFromArray2	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromArray2(cJSON *array, cJSON *c)			{$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DetachItemFromArray2	cgi/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	p	file:
cJSON_DetachItemFromArray2	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromArray2(cJSON *array, cJSON *c)			{$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DetachItemFromArray2	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	p	file:
cJSON_DetachItemFromArray2	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromArray2(cJSON *array, cJSON *c)			{$/;"	f	signature:(cJSON *array, cJSON *c)
cJSON_DetachItemFromArray2	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromArray2(cJSON *array, cJSON *c)			{cJSON_Delete(cJSON_DetachItemFromArray2(array,c));}$/;"	p	file:
cJSON_DetachItemFromObject	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	p	file:
cJSON_DetachItemFromObject	cJSON.h	/^extern cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	cgi/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	p	file:
cJSON_DetachItemFromObject	cgi/cJSON.h	/^extern cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	client_tool/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	p	file:
cJSON_DetachItemFromObject	client_tool/cJSON.h	/^extern cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_DetachItemFromObject	vppnconfig/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	p	file:
cJSON_DetachItemFromObject	vppnconfig/cJSON.h	/^extern cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_Duplicate	cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f	signature:(cJSON *item,int recurse)
cJSON_Duplicate	cJSON.h	/^extern cJSON *cJSON_Duplicate(cJSON *item,int recurse);$/;"	p	signature:(cJSON *item,int recurse)
cJSON_Duplicate	cgi/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f	signature:(cJSON *item,int recurse)
cJSON_Duplicate	cgi/cJSON.h	/^extern cJSON *cJSON_Duplicate(cJSON *item,int recurse);$/;"	p	signature:(cJSON *item,int recurse)
cJSON_Duplicate	client_tool/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f	signature:(cJSON *item,int recurse)
cJSON_Duplicate	client_tool/cJSON.h	/^extern cJSON *cJSON_Duplicate(cJSON *item,int recurse);$/;"	p	signature:(cJSON *item,int recurse)
cJSON_Duplicate	vppnconfig/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f	signature:(cJSON *item,int recurse)
cJSON_Duplicate	vppnconfig/cJSON.h	/^extern cJSON *cJSON_Duplicate(cJSON *item,int recurse);$/;"	p	signature:(cJSON *item,int recurse)
cJSON_False	cJSON.h	32;"	d
cJSON_False	cgi/cJSON.h	32;"	d
cJSON_False	client_tool/cJSON.h	32;"	d
cJSON_False	vppnconfig/cJSON.h	32;"	d
cJSON_GetArrayItem	cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f	signature:(cJSON *array,int item)
cJSON_GetArrayItem	cJSON.h	/^extern cJSON *cJSON_GetArrayItem(cJSON *array,int item);$/;"	p	signature:(cJSON *array,int item)
cJSON_GetArrayItem	cgi/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f	signature:(cJSON *array,int item)
cJSON_GetArrayItem	cgi/cJSON.h	/^extern cJSON *cJSON_GetArrayItem(cJSON *array,int item);$/;"	p	signature:(cJSON *array,int item)
cJSON_GetArrayItem	client_tool/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f	signature:(cJSON *array,int item)
cJSON_GetArrayItem	client_tool/cJSON.h	/^extern cJSON *cJSON_GetArrayItem(cJSON *array,int item);$/;"	p	signature:(cJSON *array,int item)
cJSON_GetArrayItem	vppnconfig/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f	signature:(cJSON *array,int item)
cJSON_GetArrayItem	vppnconfig/cJSON.h	/^extern cJSON *cJSON_GetArrayItem(cJSON *array,int item);$/;"	p	signature:(cJSON *array,int item)
cJSON_GetArraySize	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f	signature:(cJSON *array)
cJSON_GetArraySize	cJSON.h	/^extern int	  cJSON_GetArraySize(cJSON *array);$/;"	p	signature:(cJSON *array)
cJSON_GetArraySize	cgi/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f	signature:(cJSON *array)
cJSON_GetArraySize	cgi/cJSON.h	/^extern int	  cJSON_GetArraySize(cJSON *array);$/;"	p	signature:(cJSON *array)
cJSON_GetArraySize	client_tool/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f	signature:(cJSON *array)
cJSON_GetArraySize	client_tool/cJSON.h	/^extern int	  cJSON_GetArraySize(cJSON *array);$/;"	p	signature:(cJSON *array)
cJSON_GetArraySize	vppnconfig/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f	signature:(cJSON *array)
cJSON_GetArraySize	vppnconfig/cJSON.h	/^extern int	  cJSON_GetArraySize(cJSON *array);$/;"	p	signature:(cJSON *array)
cJSON_GetErrorPtr	cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f	signature:(void)
cJSON_GetErrorPtr	cJSON.h	/^extern const char *cJSON_GetErrorPtr(void);$/;"	p	signature:(void)
cJSON_GetErrorPtr	cgi/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f	signature:(void)
cJSON_GetErrorPtr	cgi/cJSON.h	/^extern const char *cJSON_GetErrorPtr(void);$/;"	p	signature:(void)
cJSON_GetErrorPtr	client_tool/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f	signature:(void)
cJSON_GetErrorPtr	client_tool/cJSON.h	/^extern const char *cJSON_GetErrorPtr(void);$/;"	p	signature:(void)
cJSON_GetErrorPtr	vppnconfig/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f	signature:(void)
cJSON_GetErrorPtr	vppnconfig/cJSON.h	/^extern const char *cJSON_GetErrorPtr(void);$/;"	p	signature:(void)
cJSON_GetObjectItem	cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	cJSON.h	/^extern cJSON *cJSON_GetObjectItem(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	cgi/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	cgi/cJSON.h	/^extern cJSON *cJSON_GetObjectItem(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	client_tool/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	client_tool/cJSON.h	/^extern cJSON *cJSON_GetObjectItem(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	vppnconfig/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f	signature:(cJSON *object,const char *string)
cJSON_GetObjectItem	vppnconfig/cJSON.h	/^extern cJSON *cJSON_GetObjectItem(cJSON *object,const char *string);$/;"	p	signature:(cJSON *object,const char *string)
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Hooks	cgi/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cgi/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Hooks	client_tool/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	client_tool/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Hooks	vppnconfig/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	vppnconfig/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Hooks::free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::free_fn	cgi/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::free_fn	client_tool/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::free_fn	vppnconfig/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::malloc_fn	cgi/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::malloc_fn	client_tool/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_Hooks::malloc_fn	vppnconfig/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
cJSON_InitHooks	cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	cJSON.h	/^extern void cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	p	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	cgi/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	cgi/cJSON.h	/^extern void cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	p	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	client_tool/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	client_tool/cJSON.h	/^extern void cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	p	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	vppnconfig/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f	signature:(cJSON_Hooks* hooks)
cJSON_InitHooks	vppnconfig/cJSON.h	/^extern void cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	p	signature:(cJSON_Hooks* hooks)
cJSON_InsertItemInArray	cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	cJSON.h	/^extern void cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem);	\/* Shifts pre-existing items to the right. *\/$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	cgi/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	cgi/cJSON.h	/^extern void cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem);	\/* Shifts pre-existing items to the right. *\/$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	client_tool/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	client_tool/cJSON.h	/^extern void cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem);	\/* Shifts pre-existing items to the right. *\/$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	vppnconfig/cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_InsertItemInArray	vppnconfig/cJSON.h	/^extern void cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem);	\/* Shifts pre-existing items to the right. *\/$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_IsReference	cJSON.h	40;"	d
cJSON_IsReference	cgi/cJSON.h	40;"	d
cJSON_IsReference	client_tool/cJSON.h	40;"	d
cJSON_IsReference	vppnconfig/cJSON.h	40;"	d
cJSON_Minify	cJSON.c	/^void cJSON_Minify(char *json)$/;"	f	signature:(char *json)
cJSON_Minify	cJSON.h	/^extern void cJSON_Minify(char *json);$/;"	p	signature:(char *json)
cJSON_Minify	cgi/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f	signature:(char *json)
cJSON_Minify	cgi/cJSON.h	/^extern void cJSON_Minify(char *json);$/;"	p	signature:(char *json)
cJSON_Minify	client_tool/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f	signature:(char *json)
cJSON_Minify	client_tool/cJSON.h	/^extern void cJSON_Minify(char *json);$/;"	p	signature:(char *json)
cJSON_Minify	vppnconfig/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f	signature:(char *json)
cJSON_Minify	vppnconfig/cJSON.h	/^extern void cJSON_Minify(char *json);$/;"	p	signature:(char *json)
cJSON_NULL	cJSON.h	34;"	d
cJSON_NULL	cgi/cJSON.h	34;"	d
cJSON_NULL	client_tool/cJSON.h	34;"	d
cJSON_NULL	vppnconfig/cJSON.h	34;"	d
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:	signature:(void)
cJSON_New_Item	cgi/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:	signature:(void)
cJSON_New_Item	client_tool/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:	signature:(void)
cJSON_New_Item	vppnconfig/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:	signature:(void)
cJSON_Number	cJSON.h	35;"	d
cJSON_Number	cgi/cJSON.h	35;"	d
cJSON_Number	client_tool/cJSON.h	35;"	d
cJSON_Number	vppnconfig/cJSON.h	35;"	d
cJSON_Object	cJSON.h	38;"	d
cJSON_Object	cgi/cJSON.h	38;"	d
cJSON_Object	client_tool/cJSON.h	38;"	d
cJSON_Object	vppnconfig/cJSON.h	38;"	d
cJSON_Parse	cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f	signature:(const char *value)
cJSON_Parse	cJSON.h	/^extern cJSON *cJSON_Parse(const char *value);$/;"	p	signature:(const char *value)
cJSON_Parse	cgi/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f	signature:(const char *value)
cJSON_Parse	cgi/cJSON.h	/^extern cJSON *cJSON_Parse(const char *value);$/;"	p	signature:(const char *value)
cJSON_Parse	client_tool/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f	signature:(const char *value)
cJSON_Parse	client_tool/cJSON.h	/^extern cJSON *cJSON_Parse(const char *value);$/;"	p	signature:(const char *value)
cJSON_Parse	vppnconfig/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f	signature:(const char *value)
cJSON_Parse	vppnconfig/cJSON.h	/^extern cJSON *cJSON_Parse(const char *value);$/;"	p	signature:(const char *value)
cJSON_ParseWithOpts	cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	cJSON.h	/^extern cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated);$/;"	p	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	cgi/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	cgi/cJSON.h	/^extern cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated);$/;"	p	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	client_tool/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	client_tool/cJSON.h	/^extern cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated);$/;"	p	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	vppnconfig/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_ParseWithOpts	vppnconfig/cJSON.h	/^extern cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated);$/;"	p	signature:(const char *value,const char **return_parse_end,int require_null_terminated)
cJSON_Print	cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f	signature:(cJSON *item)
cJSON_Print	cJSON.h	/^extern char  *cJSON_Print(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_Print	cgi/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f	signature:(cJSON *item)
cJSON_Print	cgi/cJSON.h	/^extern char  *cJSON_Print(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_Print	client_tool/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f	signature:(cJSON *item)
cJSON_Print	client_tool/cJSON.h	/^extern char  *cJSON_Print(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_Print	vppnconfig/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f	signature:(cJSON *item)
cJSON_Print	vppnconfig/cJSON.h	/^extern char  *cJSON_Print(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_PrintBuffered	cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	cJSON.h	/^extern char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt);$/;"	p	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	cgi/cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	cgi/cJSON.h	/^extern char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt);$/;"	p	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	client_tool/cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	client_tool/cJSON.h	/^extern char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt);$/;"	p	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	vppnconfig/cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintBuffered	vppnconfig/cJSON.h	/^extern char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt);$/;"	p	signature:(cJSON *item,int prebuffer,int fmt)
cJSON_PrintUnformatted	cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f	signature:(cJSON *item)
cJSON_PrintUnformatted	cJSON.h	/^extern char  *cJSON_PrintUnformatted(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_PrintUnformatted	cgi/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f	signature:(cJSON *item)
cJSON_PrintUnformatted	cgi/cJSON.h	/^extern char  *cJSON_PrintUnformatted(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_PrintUnformatted	client_tool/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f	signature:(cJSON *item)
cJSON_PrintUnformatted	client_tool/cJSON.h	/^extern char  *cJSON_PrintUnformatted(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_PrintUnformatted	vppnconfig/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f	signature:(cJSON *item)
cJSON_PrintUnformatted	vppnconfig/cJSON.h	/^extern char  *cJSON_PrintUnformatted(cJSON *item);$/;"	p	signature:(cJSON *item)
cJSON_ReplaceItemInArray	cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	cJSON.h	/^extern void cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem);$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	cgi/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	cgi/cJSON.h	/^extern void cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem);$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	client_tool/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	client_tool/cJSON.h	/^extern void cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem);$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	vppnconfig/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInArray	vppnconfig/cJSON.h	/^extern void cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem);$/;"	p	signature:(cJSON *array,int which,cJSON *newitem)
cJSON_ReplaceItemInObject	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	cJSON.h	/^extern void cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);$/;"	p	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	cgi/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	cgi/cJSON.h	/^extern void cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);$/;"	p	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	client_tool/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	client_tool/cJSON.h	/^extern void cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);$/;"	p	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	vppnconfig/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_ReplaceItemInObject	vppnconfig/cJSON.h	/^extern void cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem);$/;"	p	signature:(cJSON *object,const char *string,cJSON *newitem)
cJSON_SetIntValue	cJSON.h	143;"	d
cJSON_SetIntValue	cgi/cJSON.h	143;"	d
cJSON_SetIntValue	client_tool/cJSON.h	143;"	d
cJSON_SetIntValue	vppnconfig/cJSON.h	143;"	d
cJSON_SetNumberValue	cJSON.h	144;"	d
cJSON_SetNumberValue	cgi/cJSON.h	144;"	d
cJSON_SetNumberValue	client_tool/cJSON.h	144;"	d
cJSON_SetNumberValue	vppnconfig/cJSON.h	144;"	d
cJSON_String	cJSON.h	36;"	d
cJSON_String	cgi/cJSON.h	36;"	d
cJSON_String	client_tool/cJSON.h	36;"	d
cJSON_String	vppnconfig/cJSON.h	36;"	d
cJSON_StringIsConst	cJSON.h	41;"	d
cJSON_StringIsConst	cgi/cJSON.h	41;"	d
cJSON_StringIsConst	client_tool/cJSON.h	41;"	d
cJSON_StringIsConst	vppnconfig/cJSON.h	41;"	d
cJSON_True	cJSON.h	33;"	d
cJSON_True	cgi/cJSON.h	33;"	d
cJSON_True	client_tool/cJSON.h	33;"	d
cJSON_True	vppnconfig/cJSON.h	33;"	d
cJSON__h	cJSON.h	24;"	d
cJSON__h	cgi/cJSON.h	24;"	d
cJSON__h	client_tool/cJSON.h	24;"	d
cJSON__h	vppnconfig/cJSON.h	24;"	d
cJSON_free	cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_free	cgi/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_free	client_tool/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_free	vppnconfig/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_malloc	cgi/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_malloc	client_tool/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_malloc	vppnconfig/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:	signature:(const char *s1,const char *s2)
cJSON_strcasecmp	cgi/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:	signature:(const char *s1,const char *s2)
cJSON_strcasecmp	client_tool/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:	signature:(const char *s1,const char *s2)
cJSON_strcasecmp	vppnconfig/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:	signature:(const char *s1,const char *s2)
cJSON_strdup	cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:	signature:(const char* str)
cJSON_strdup	cgi/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:	signature:(const char* str)
cJSON_strdup	client_tool/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:	signature:(const char* str)
cJSON_strdup	vppnconfig/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:	signature:(const char* str)
c_stream	compress_tool.c	/^    z_stream c_stream;$/;"	l
cal_chksum	cgi/net_tool.c	/^unsigned short cal_chksum(unsigned short *addr, int len)$/;"	f	signature:(unsigned short *addr, int len)
cal_chksum	client_tool/net_tool.c	/^unsigned short cal_chksum(unsigned short *addr, int len)$/;"	f	signature:(unsigned short *addr, int len)
cal_chksum	net_tool.c	/^unsigned short cal_chksum(unsigned short *addr, int len)$/;"	f	signature:(unsigned short *addr, int len)
cal_chksum	vppnconfig/net_tool.c	/^unsigned short cal_chksum(unsigned short *addr, int len)$/;"	f	signature:(unsigned short *addr, int len)
cal_time_interval	cgi/net_tool.c	/^double cal_time_interval(struct timeval *old_time, struct timeval *now_time)$/;"	f	signature:(struct timeval *old_time, struct timeval *now_time)
cal_time_interval	client_tool/net_tool.c	/^double cal_time_interval(struct timeval *old_time, struct timeval *now_time)$/;"	f	signature:(struct timeval *old_time, struct timeval *now_time)
cal_time_interval	net_tool.c	/^double cal_time_interval(struct timeval *old_time, struct timeval *now_time)$/;"	f	signature:(struct timeval *old_time, struct timeval *now_time)
cal_time_interval	vppnconfig/net_tool.c	/^double cal_time_interval(struct timeval *old_time, struct timeval *now_time)$/;"	f	signature:(struct timeval *old_time, struct timeval *now_time)
cgi_mode	cgi/main.c	/^int cgi_mode=1;$/;"	v
cgi_mode	client_tool/main.c	/^int cgi_mode=0;$/;"	v
channel	cgi/main.c	/^				int channel = channel_item->valueint;$/;"	l
channel	ctrl_server_json.c	/^	int channel = channel_item->valueint;$/;"	l
channel_item	cgi/main.c	/^			cJSON *channel_item = cJSON_GetObjectItem(req, "channel");$/;"	l
channel_item	ctrl_server_json.c	/^	cJSON *channel_item = cJSON_GetObjectItem(jsonreq, "channel");$/;"	l
check_heartbeat_retcode	main.c	/^static int check_heartbeat_retcode(int retcode)$/;"	f	file:	signature:(int retcode)
check_r7800	vppnconfig/main.c	/^int check_r7800()$/;"	f
check_route_if	cgi/net_tool.c	/^int check_route_if(struct route_info *one_route, char *if_name)$/;"	f	signature:(struct route_info *one_route, char *if_name)
check_route_if	client_tool/net_tool.c	/^int check_route_if(struct route_info *one_route, char *if_name)$/;"	f	signature:(struct route_info *one_route, char *if_name)
check_route_if	net_tool.c	/^int check_route_if(struct route_info *one_route, char *if_name)$/;"	f	signature:(struct route_info *one_route, char *if_name)
check_route_if	vppnconfig/net_tool.c	/^int check_route_if(struct route_info *one_route, char *if_name)$/;"	f	signature:(struct route_info *one_route, char *if_name)
child	cJSON.c	/^	cJSON *child;$/;"	l
child	cJSON.c	/^	cJSON *child=item->child;$/;"	l
child	cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
child	cgi/cJSON.c	/^	cJSON *child;$/;"	l
child	cgi/cJSON.c	/^	cJSON *child=item->child;$/;"	l
child	cgi/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
child	client_tool/cJSON.c	/^	cJSON *child;$/;"	l
child	client_tool/cJSON.c	/^	cJSON *child=item->child;$/;"	l
child	client_tool/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
child	vppnconfig/cJSON.c	/^	cJSON *child;$/;"	l
child	vppnconfig/cJSON.c	/^	cJSON *child=item->child;$/;"	l
child	vppnconfig/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
client_fd	ctrl_server.c	/^	int 				client_fd;$/;"	l
client_fd	ctrl_server.h	/^	int		client_fd;$/;"	m	struct:ctrl_response_s	access:public
client_fd	ctrl_server.h	/^	int 	client_fd;$/;"	m	struct:ctrl_request_s	access:public
client_info	ctrl-interface.c	/^	cJSON *client_info = cJSON_CreateObject();$/;"	l
close_all_fd	process_tool.c	/^static void close_all_fd()$/;"	f	file:
cloud_file	vpn_config.c	/^	char cloud_file[200];$/;"	l
cloud_host	vpn_cloud.h	/^	char	cloud_host[30];$/;"	m	struct:vpu_cloud_s	access:public
cloud_host	vpn_config.h	/^	char						cloud_host[64];$/;"	m	struct:vpn_config_s	access:public
cloud_port	vpn_cloud.h	/^	int		cloud_port;$/;"	m	struct:vpu_cloud_s	access:public
cloud_port	vpn_config.h	/^	int							cloud_port;$/;"	m	struct:vpn_config_s	access:public
cloud_ret	ctrl-interface.c	/^	cJSON *cloud_ret = get_public_whitelist_from_cloud(cloud_host, cloud_port, vpn_type, tunnel_id);$/;"	l
cloud_ret	main.c	/^	int cloud_ret;$/;"	l
cmd_buf	main.c	/^						char cmd_buf[100];$/;"	l
cmd_buf	main.c	/^	char cmd_buf[300];$/;"	l
cmd_buf	main.c	/^	char cmd_buf[4000];$/;"	l
cmd_buf	main.c	/^	char cmd_buf[400];$/;"	l
cmd_buf	process_tool.c	/^	char cmd_buf[200];$/;"	l
cmd_buf	vppnconfig/nvram-op.c	/^	char *cmd_buf;$/;"	l
cmd_buf	vppnconfig/nvram-op.c	/^	char cmd_buf[4000];$/;"	l
cmd_buf_len	vppnconfig/nvram-op.c	/^	int cmd_buf_len = strlen(name) + strlen(value) + 100;$/;"	l
cmd_out	ctrl_server_json.c	/^	char *cmd_out = process_tool_run_cmd("config get http_passwd");$/;"	l
cmdbuf	ctrl_server_json.c	/^	char cmdbuf[200];$/;"	l
cname	cgi/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
cname	client_tool/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
cname	net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
cnt	ctrl_server_json.c	/^	int cnt = cJSON_GetArraySize(peers);$/;"	l
cnt	ctrl_server_json.c	/^	int cnt = cJSON_GetArraySize(vpaths);$/;"	l
cnt	main.c	/^		int cnt = cJSON_GetArraySize(members);$/;"	l
cnt	vppnconfig/main.c	/^	int cnt = cJSON_GetArraySize(new_array);$/;"	l
cnt	vppnconfig/main.c	/^	int cnt = cJSON_GetArraySize(p2p_array);$/;"	l
code_item	ctrl_server_json.c	/^			cJSON* code_item = cJSON_GetObjectItem(response, "code");$/;"	l
code_item	main.c	/^			cJSON *code_item = cJSON_GetObjectItem(response, "Code");$/;"	l
code_item	main.c	/^			cJSON *code_item = cJSON_GetObjectItem(response, "code");$/;"	l
code_item	main.c	/^			cJSON* code_item = cJSON_GetObjectItem(response, "code");$/;"	l
code_item	main.c	/^		cJSON *code_item = cJSON_GetObjectItem(response, "Code");$/;"	l
common_buf	bird_conf.c	/^	char common_buf[400] = {0};$/;"	l
common_buf	vppnconfig/bird_conf.c	/^	char common_buf[400] = {0};$/;"	l
common_format	bird_conf.c	/^	char *common_format = "router id %s; \\n\\n"$/;"	l
common_format	vppnconfig/bird_conf.c	/^	char *common_format = "router id %s; \\n\\n"$/;"	l
conf	main.c	/^		cJSON *conf = cJSON_Parse(text);$/;"	l
conf	main.c	/^	cJSON *conf = cJSON_CreateObject();$/;"	l
conf	vpn_config.c	/^	char *conf = read_text(file_name);$/;"	l
conf_file	ctrl-interface.c	/^	char conf_file[100];$/;"	l
conf_file	main.c	/^	char conf_file[100];$/;"	l
conf_json	vppnconfig/main.c	/^	cJSON *conf_json = cJSON_CreateObject();$/;"	l
conf_json	vppnconfig/main.c	/^	cJSON *conf_json = read_json_from_file(public_vpath_switch_file);$/;"	l
conf_manager_file	vppnconfig/main.c	/^	char conf_manager_file[100];$/;"	l
conf_manager_host	vppnconfig/main.c	/^	char conf_manager_host[100];$/;"	l
conf_manager_port	vppnconfig/main.c	/^	char conf_manager_port[100];$/;"	l
conf_peer	vppnconfig/main.c	/^	char conf_peer[100];$/;"	l
conf_peer_buf	vppnconfig/main.c	/^	char conf_peer_buf[100];$/;"	l
conf_peer_file	bird_conf.c	/^	char conf_peer_file[100];$/;"	l
conf_peer_file	vppnconfig/main.c	/^	char conf_peer_file[100];$/;"	l
conf_ptr	vppnconfig/main.c	/^	char *conf_ptr = GetConfig(conf_peer);$/;"	l
conf_ptr	vppnconfig/main.c	/^	char *conf_ptr = NULL;$/;"	l
conf_public_vpath_switch_on	vppnconfig/main.c	/^	char conf_public_vpath_switch_on[100];$/;"	l
conf_public_vpath_switch_on_str	vppnconfig/main.c	/^	char *conf_public_vpath_switch_on_str = NULL;$/;"	l
conf_public_vpath_switch_server	vppnconfig/main.c	/^	char conf_public_vpath_switch_server[100];$/;"	l
conf_public_vpath_switch_server_str	vppnconfig/main.c	/^	char *conf_public_vpath_switch_server_str = NULL;$/;"	l
conf_public_vpath_switch_vproxy	vppnconfig/main.c	/^	char conf_public_vpath_switch_vproxy[100];$/;"	l
conf_public_vpath_switch_vproxy_str	vppnconfig/main.c	/^	char *conf_public_vpath_switch_vproxy_str = NULL;$/;"	l
conf_tunnel_file	vppnconfig/main.c	/^	char conf_tunnel_file[100];$/;"	l
conf_tunnel_on	vppnconfig/main.c	/^	char conf_tunnel_on[100];$/;"	l
conf_tunnel_teamid	vppnconfig/main.c	/^	char conf_tunnel_teamid[100];$/;"	l
conf_type	ctrl_server_json.c	/^	int conf_type = 0;$/;"	l
conf_type	ctrl_server_json.c	/^	int conf_type;$/;"	l
conf_type	vppnconfig/main.c	/^	int conf_type;$/;"	l
conf_vpath	vppnconfig/main.c	/^	char conf_vpath[100];$/;"	l
conf_vpath_file	vppnconfig/main.c	/^	char conf_vpath_file[100];$/;"	l
connect_fail_time	vpn_config.h	/^	int						connect_fail_time;$/;"	m	struct:vpn_tunnel_info_s	access:public
connect_time	vpn_config.h	/^	int						connect_time;$/;"	m	struct:vpn_tunnel_info_s	access:public
connectto_buf	main.c	/^	char connectto_buf[200];$/;"	l
content	bird_conf.c	/^		char content[1024] = {0};$/;"	l
content	bird_conf.c	/^		char content[400] = {0};$/;"	l
content	main.c	/^		char *content = read_text(whitelist_file);$/;"	l
content	main.c	/^	char content[400];$/;"	l
content	vppnconfig/bird_conf.c	/^		char content[100] = {0};$/;"	l
content	vppnconfig/bird_conf.c	/^		char content[1024] = {0};$/;"	l
convert_subnet_to_string	cgi/net_tool.c	/^void convert_subnet_to_string(struct sockaddr *ip, struct sockaddr *mask, char *ret_buf)$/;"	f	signature:(struct sockaddr *ip, struct sockaddr *mask, char *ret_buf)
convert_subnet_to_string	client_tool/net_tool.c	/^void convert_subnet_to_string(struct sockaddr *ip, struct sockaddr *mask, char *ret_buf)$/;"	f	signature:(struct sockaddr *ip, struct sockaddr *mask, char *ret_buf)
convert_subnet_to_string	net_tool.c	/^void convert_subnet_to_string(struct in_addr* ip, struct in_addr* mask, char *ret_buf)$/;"	f	signature:(struct in_addr* ip, struct in_addr* mask, char *ret_buf)
copy	cJSON.c	/^      char* copy;$/;"	l
copy	cgi/cJSON.c	/^      char* copy;$/;"	l
copy	client_tool/cJSON.c	/^      char* copy;$/;"	l
copy	vppnconfig/cJSON.c	/^      char* copy;$/;"	l
cptr	cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
cptr	cgi/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
cptr	client_tool/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
cptr	vppnconfig/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
create_attach_device_thread	attachdevice.c	/^int create_attach_device_thread()$/;"	f
create_attach_device_thread	attachdevice.h	/^int create_attach_device_thread();$/;"	p	signature:()
create_listen_socket	ctrl_server.c	/^static int create_listen_socket(char *host, u_short port)$/;"	f	file:	signature:(char *host, u_short port)
create_peers_update_thread	ctrl_server_json.c	/^void create_peers_update_thread()$/;"	f
create_peers_update_thread	main.c	/^extern void create_peers_update_thread();$/;"	p	file:
create_ping_socket	cgi/net_tool.c	/^int create_ping_socket()$/;"	f
create_ping_socket	client_tool/net_tool.c	/^int create_ping_socket()$/;"	f
create_ping_socket	net_tool.c	/^int create_ping_socket()$/;"	f
create_reference	cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:	signature:(cJSON *item)
create_reference	cgi/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:	signature:(cJSON *item)
create_reference	client_tool/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:	signature:(cJSON *item)
create_reference	vppnconfig/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:	signature:(cJSON *item)
create_tinc_dir	main.c	/^void create_tinc_dir(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
create_vpn_status_thread	main.c	/^extern int create_vpn_status_thread();$/;"	p	file:
ctrl_addr_s	ctrl_server.c	/^struct ctrl_addr_s$/;"	s	file:
ctrl_addr_s::host	ctrl_server.c	/^	char *host;$/;"	m	struct:ctrl_addr_s	file:	access:public
ctrl_addr_s::port	ctrl_server.c	/^	u_short port;$/;"	m	struct:ctrl_addr_s	file:	access:public
ctrl_disable_dnsmasq_conf	ctrl-interface.c	/^void ctrl_disable_dnsmasq_conf(int conf_type, int channel)$/;"	f	signature:(int conf_type, int channel)
ctrl_disable_dnsmasq_conf	ctrl-interface.h	/^void ctrl_disable_dnsmasq_conf(int conf_type, int channel);$/;"	p	signature:(int conf_type, int channel)
ctrl_disable_log	ctrl-interface.c	/^void ctrl_disable_log(int tunnel_id)$/;"	f	signature:(int tunnel_id)
ctrl_disable_log	ctrl-interface.h	/^void ctrl_disable_log(int tunnel_id);$/;"	p	signature:(int tunnel_id)
ctrl_disable_vpn	ctrl-interface.c	/^void ctrl_disable_vpn(int conf_type, int channel)$/;"	f	signature:(int conf_type, int channel)
ctrl_disable_vpn	ctrl-interface.h	/^void ctrl_disable_vpn(int conf_type, int channel);$/;"	p	signature:(int conf_type, int channel)
ctrl_enable_log	ctrl-interface.c	/^void ctrl_enable_log(int tunnel_id, int log_level)$/;"	f	signature:(int tunnel_id, int log_level)
ctrl_enable_log	ctrl-interface.h	/^void ctrl_enable_log(int tunnel_id, int log_level);$/;"	p	signature:(int tunnel_id, int log_level)
ctrl_enable_vpn	ctrl-interface.c	/^void ctrl_enable_vpn(int conf_type, int channel, char* team_id)$/;"	f	signature:(int conf_type, int channel, char* team_id)
ctrl_enable_vpn	ctrl-interface.h	/^void ctrl_enable_vpn(int conf_type, int channel, char* team_id);$/;"	p	signature:(int conf_type, int channel, char* team_id)
ctrl_find_neighbor	ctrl-interface.c	/^int ctrl_find_neighbor(int channel, char *neighbor_ip)$/;"	f	signature:(int channel, char *neighbor_ip)
ctrl_find_neighbor	ctrl-interface.h	/^int ctrl_find_neighbor(int channel, char *neighbor_ip);$/;"	p	signature:(int channel, char *neighbor_ip)
ctrl_get_localsubnet	ctrl-interface.c	/^int ctrl_get_localsubnet(char *lan_if, char *gw_buf, char *netmask_buf)$/;"	f	signature:(char *lan_if, char *gw_buf, char *netmask_buf)
ctrl_get_localsubnet	ctrl-interface.h	/^int ctrl_get_localsubnet(char *lan_if, char *gw_buf, char *netmask_buf);$/;"	p	signature:(char *lan_if, char *gw_buf, char *netmask_buf)
ctrl_get_manager	ctrl-interface.c	/^cJSON* ctrl_get_manager(int conf_type, int channel)$/;"	f	signature:(int conf_type, int channel)
ctrl_get_manager	ctrl-interface.h	/^cJSON* ctrl_get_manager(int conf_type, int channel);$/;"	p	signature:(int conf_type, int channel)
ctrl_get_public_whitelist_switch	ctrl-interface.c	/^cJSON *ctrl_get_public_whitelist_switch(int conf_type, int tunnel_id)$/;"	f	signature:(int conf_type, int tunnel_id)
ctrl_get_public_whitelist_switch	ctrl-interface.h	/^cJSON *ctrl_get_public_whitelist_switch(int conf_type, int tunnel_id);$/;"	p	signature:(int conf_type, int tunnel_id)
ctrl_get_request	ctrl_server.c	/^ctrl_request_t *ctrl_get_request(ctrl_server_t *server, struct timeval *timeout)$/;"	f	signature:(ctrl_server_t *server, struct timeval *timeout)
ctrl_get_tunnel_conf	ctrl-interface.c	/^cJSON *ctrl_get_tunnel_conf(int conf_type, int channel)$/;"	f	signature:(int conf_type, int channel)
ctrl_get_tunnel_config	ctrl-interface.c	/^struct vpn_config_s* ctrl_get_tunnel_config()$/;"	f
ctrl_get_tunnel_config	ctrl-interface.h	/^struct vpn_config_s* ctrl_get_tunnel_config();$/;"	p	signature:()
ctrl_get_tunnel_log_conf	ctrl-interface.c	/^cJSON *ctrl_get_tunnel_log_conf(int tunnel_id)$/;"	f	signature:(int tunnel_id)
ctrl_get_tunnel_log_conf	ctrl-interface.h	/^cJSON *ctrl_get_tunnel_log_conf(int tunnel_id);$/;"	p	signature:(int tunnel_id)
ctrl_get_tunnel_neighbors	ctrl-interface.c	/^cJSON *ctrl_get_tunnel_neighbors(int channel)$/;"	f	signature:(int channel)
ctrl_get_tunnel_neighbors	ctrl-interface.h	/^cJSON *ctrl_get_tunnel_neighbors(int channel);$/;"	p	signature:(int channel)
ctrl_load_public_vpath	ctrl-interface.c	/^void ctrl_load_public_vpath(char *cloud_host, int cloud_port, int conf_type, int tunnel_id)$/;"	f	signature:(char *cloud_host, int cloud_port, int conf_type, int tunnel_id)
ctrl_load_public_vpath	ctrl-interface.h	/^void ctrl_load_public_vpath(char *cloud_host, int cloud_port, int conf_type, int tunnel_id);$/;"	p	signature:(char *cloud_host, int cloud_port, int conf_type, int tunnel_id)
ctrl_local_status_s	ctrl-interface.h	/^struct ctrl_local_status_s$/;"	s
ctrl_local_status_s::local2gw_latency	ctrl-interface.h	/^	double  local2gw_latency;$/;"	m	struct:ctrl_local_status_s	access:public
ctrl_local_status_s::local_vip	ctrl-interface.h	/^	char local_vip[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_local_status_s	access:public
ctrl_manager_status_s	ctrl-interface.h	/^struct ctrl_manager_status_s$/;"	s
ctrl_manager_status_s::manager_host	ctrl-interface.h	/^	char manager_host[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_manager_status_s	access:public
ctrl_manager_status_s::manager_latency	ctrl-interface.h	/^	double manager_latency;$/;"	m	struct:ctrl_manager_status_s	access:public
ctrl_manager_status_s::manager_port	ctrl-interface.h	/^	int  manager_port;$/;"	m	struct:ctrl_manager_status_s	access:public
ctrl_port	main.c	/^	u_short ctrl_port;$/;"	l
ctrl_proxy_status_s	ctrl-interface.h	/^struct ctrl_proxy_status_s$/;"	s
ctrl_proxy_status_s::proxy_host	ctrl-interface.h	/^	char proxy_host[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_proxy_status_s	access:public
ctrl_proxy_status_s::proxy_latency	ctrl-interface.h	/^	double proxy_latency;$/;"	m	struct:ctrl_proxy_status_s	access:public
ctrl_proxy_status_s::proxy_port	ctrl-interface.h	/^	int  proxy_port;$/;"	m	struct:ctrl_proxy_status_s	access:public
ctrl_refresh_vpn	ctrl-interface.c	/^void ctrl_refresh_vpn()$/;"	f
ctrl_refresh_vpn	ctrl-interface.h	/^void ctrl_refresh_vpn();$/;"	p	signature:()
ctrl_reload_bird	ctrl-interface.c	/^void ctrl_reload_bird(int conf_type, int tunnel_id, char* team_id)$/;"	f	signature:(int conf_type, int tunnel_id, char* team_id)
ctrl_reload_bird	ctrl-interface.h	/^void ctrl_reload_bird(int conf_type, int channel, char* team_id);$/;"	p	signature:(int conf_type, int channel, char* team_id)
ctrl_reload_dnsmasq	ctrl-interface.c	/^void ctrl_reload_dnsmasq(int conf_type, int channel, char* team_id)$/;"	f	signature:(int conf_type, int channel, char* team_id)
ctrl_reload_dnsmasq	ctrl-interface.h	/^void ctrl_reload_dnsmasq(int conf_type, int channel, char* team_id);$/;"	p	signature:(int conf_type, int channel, char* team_id)
ctrl_reload_firewall	ctrl-interface.c	/^void ctrl_reload_firewall(int channel, char* virtual_subnet)$/;"	f	signature:(int channel, char* virtual_subnet)
ctrl_reload_firewall	ctrl-interface.h	/^void ctrl_reload_firewall(int channel, char* virtual_subnet);$/;"	p	signature:(int channel, char* virtual_subnet)
ctrl_reload_vpn	ctrl-interface.c	/^void ctrl_reload_vpn(int conf_type, int channel, char* team_id)$/;"	f	signature:(int conf_type, int channel, char* team_id)
ctrl_reload_vpn	ctrl-interface.h	/^void ctrl_reload_vpn(int conf_type, int channel, char* team_id);$/;"	p	signature:(int conf_type, int channel, char* team_id)
ctrl_request_s	ctrl_server.h	/^struct ctrl_request_s$/;"	s
ctrl_request_s::client_fd	ctrl_server.h	/^	int 	client_fd;$/;"	m	struct:ctrl_request_s	access:public
ctrl_request_s::data	ctrl_server.h	/^	void 	*data;$/;"	m	struct:ctrl_request_s	access:public
ctrl_request_s::data_size	ctrl_server.h	/^	int 	data_size;$/;"	m	struct:ctrl_request_s	access:public
ctrl_request_t	ctrl_server.h	/^typedef struct ctrl_request_s ctrl_request_t;$/;"	t	typeref:struct:ctrl_request_s
ctrl_reset_route_table	ctrl-interface.c	/^void ctrl_reset_route_table(int conf_type, int channel)$/;"	f	signature:(int conf_type, int channel)
ctrl_response	cgi/main.c	/^	cJSON *ctrl_response = NULL;$/;"	l
ctrl_response	client_tool/main.c	/^	cJSON *ctrl_response = cJSON_CreateArray();$/;"	l
ctrl_response_s	ctrl_server.h	/^struct ctrl_response_s$/;"	s
ctrl_response_s::client_fd	ctrl_server.h	/^	int		client_fd;$/;"	m	struct:ctrl_response_s	access:public
ctrl_response_s::data	ctrl_server.h	/^	void 	*data;$/;"	m	struct:ctrl_response_s	access:public
ctrl_response_s::data_size	ctrl_server.h	/^	int 	data_size;$/;"	m	struct:ctrl_response_s	access:public
ctrl_response_t	ctrl_server.h	/^typedef struct ctrl_response_s ctrl_response_t;$/;"	t	typeref:struct:ctrl_response_s
ctrl_restart_bird	ctrl-interface.c	/^void ctrl_restart_bird()$/;"	f
ctrl_restart_dnsmasq	ctrl-interface.c	/^void ctrl_restart_dnsmasq()$/;"	f
ctrl_running	ctrl_server.c	/^int ctrl_running = 1;$/;"	v
ctrl_server	ctrl_server.c	/^ctrl_server_t *ctrl_server;$/;"	v
ctrl_server_create	ctrl_server.c	/^ctrl_server_t * ctrl_server_create(char *host, u_short port)$/;"	f	signature:(char *host, u_short port)
ctrl_server_delete	ctrl_server.c	/^void ctrl_server_delete(ctrl_server_t *serv)$/;"	f	signature:(ctrl_server_t *serv)
ctrl_server_exit	ctrl_server.c	/^void ctrl_server_exit()$/;"	f
ctrl_server_exit	ctrl_server.h	/^void ctrl_server_exit();$/;"	p	signature:()
ctrl_server_init	ctrl_server.c	/^int ctrl_server_init(char *host, u_short port)$/;"	f	signature:(char *host, u_short port)
ctrl_server_init	ctrl_server.h	/^int ctrl_server_init(char *host, u_short port);$/;"	p	signature:(char *host, u_short port)
ctrl_server_mainloop	ctrl_server.c	/^void *ctrl_server_mainloop(void *arg)$/;"	f	signature:(void *arg)
ctrl_server_s	ctrl_server.h	/^struct ctrl_server_s$/;"	s
ctrl_server_s::listen_fd	ctrl_server.h	/^	int listen_fd;$/;"	m	struct:ctrl_server_s	access:public
ctrl_server_s::loop_tid	ctrl_server.h	/^	pthread_t loop_tid;$/;"	m	struct:ctrl_server_s	access:public
ctrl_server_s::req_cnt	ctrl_server.h	/^	int req_cnt;$/;"	m	struct:ctrl_server_s	access:public
ctrl_server_s::res_cnt	ctrl_server.h	/^	int res_cnt;$/;"	m	struct:ctrl_server_s	access:public
ctrl_server_t	ctrl_server.h	/^typedef struct ctrl_server_s ctrl_server_t;$/;"	t	typeref:struct:ctrl_server_s
ctrl_set_manager	ctrl-interface.c	/^void ctrl_set_manager(int conf_type, int channel, char *manager_host, int manager_port)$/;"	f	signature:(int conf_type, int channel, char *manager_host, int manager_port)
ctrl_set_manager	ctrl-interface.h	/^void ctrl_set_manager(int conf_type, int channel, char *manager_host, int manager_port);$/;"	p	signature:(int conf_type, int channel, char *manager_host, int manager_port)
ctrl_set_tunnel_conf	ctrl-interface.c	/^void ctrl_set_tunnel_conf(int conf_type, int channel, cJSON *tunnel_conf)$/;"	f	signature:(int conf_type, int channel, cJSON *tunnel_conf)
ctrl_set_tunnel_log_conf	ctrl-interface.c	/^void ctrl_set_tunnel_log_conf(int tunnel_id, cJSON *item)$/;"	f	signature:(int tunnel_id, cJSON *item)
ctrl_set_tunnel_log_conf	ctrl-interface.h	/^void ctrl_set_tunnel_log_conf(int tunnel_id, cJSON *item);$/;"	p	signature:(int tunnel_id, cJSON *item)
ctrl_start_firewall	ctrl-interface.c	/^void ctrl_start_firewall()$/;"	f
ctrl_stop_firewall	ctrl-interface.c	/^void ctrl_stop_firewall()$/;"	f
ctrl_write_firewall_script	ctrl-interface.c	/^void ctrl_write_firewall_script(char *virtual_subnet)$/;"	f	signature:(char *virtual_subnet)
cur	cgi/net_tool.c	/^	struct route_info *cur = first_route;$/;"	l
cur	cgi/net_tool.c	/^	struct route_info *cur = route;$/;"	l
cur	client_tool/net_tool.c	/^	struct route_info *cur = first_route;$/;"	l
cur	client_tool/net_tool.c	/^	struct route_info *cur = route;$/;"	l
cur	net_tool.c	/^	struct route_info *cur = first_route;$/;"	l
cur	net_tool.c	/^	struct route_info *cur = route;$/;"	l
cur	vppnconfig/net_tool.c	/^	struct route_info *cur = first_route;$/;"	l
cur	vppnconfig/net_tool.c	/^	struct route_info *cur = route;$/;"	l
cur_peers	ctrl_server_json.c	/^	cJSON *cur_peers = read_json_from_file(peers_conf_file);$/;"	l
custom	vpn_config.c	/^	cJSON *custom = read_json_from_file("\/etc\/vppn_custom.conf");$/;"	l
custom_lan_if	vpn_config.h	/^	char						custom_lan_if[32];$/;"	m	struct:vpn_config_s	access:public
custom_tunnel_dev	vpn_config.h	/^	char						custom_tunnel_dev[32];$/;"	m	struct:vpn_config_s	access:public
custom_wan_if	vpn_config.h	/^	char						custom_wan_if[32];$/;"	m	struct:vpn_config_s	access:public
d	cJSON.c	/^	double d=item->valuedouble;$/;"	l
d	cgi/cJSON.c	/^	double d=item->valuedouble;$/;"	l
d	client_tool/cJSON.c	/^	double d=item->valuedouble;$/;"	l
d	vppnconfig/cJSON.c	/^	double d=item->valuedouble;$/;"	l
d_stream	compress_tool.c	/^    z_stream d_stream = {0}; \/* decompression stream *\/$/;"	l
data	ctrl_server.c	/^			void*	data;$/;"	l
data	ctrl_server.h	/^	void 	*data;$/;"	m	struct:ctrl_request_s	access:public
data	ctrl_server.h	/^	void 	*data;$/;"	m	struct:ctrl_response_s	access:public
data	ctrl_server_json.c	/^	char *data = cJSON_Print(res);$/;"	l
data_len	ctrl_server.c	/^			int 	data_len;$/;"	l
data_size	ctrl_server.h	/^	int 	data_size;$/;"	m	struct:ctrl_request_s	access:public
data_size	ctrl_server.h	/^	int 	data_size;$/;"	m	struct:ctrl_response_s	access:public
datalen	cgi/net_tool.c	/^	int type , datalen , len;$/;"	l
datalen	client_tool/net_tool.c	/^	int type , datalen , len;$/;"	l
datalen	net_tool.c	/^	int type , datalen , len;$/;"	l
debug	vpn_config.h	/^	int							debug;$/;"	m	struct:vpn_config_s	access:public
debug_level_e	my_debug.h	/^enum debug_level_e$/;"	g
decode_utf8_char	cgi/main.c	/^unsigned char decode_utf8_char(unsigned char *utf8)$/;"	f	signature:(unsigned char *utf8)
decode_utf8_char	client_tool/main.c	/^unsigned char decode_utf8_char(unsigned char *utf8)$/;"	f	signature:(unsigned char *utf8)
decode_utf8_str	cgi/main.c	/^unsigned char *decode_utf8_str(unsigned char *str)$/;"	f	signature:(unsigned char *str)
decode_utf8_str	client_tool/main.c	/^unsigned char *decode_utf8_str(unsigned char *str)$/;"	f	signature:(unsigned char *str)
default_dbg_level	my_debug.c	/^int default_dbg_level = DEBUG_LEVEL_NO;$/;"	v
del_one_route	cgi/net_tool.c	/^void del_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
del_one_route	client_tool/net_tool.c	/^void del_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
del_one_route	net_tool.c	/^void del_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
del_one_route	vppnconfig/net_tool.c	/^void del_one_route(struct route_info *one_route)$/;"	f	signature:(struct route_info *one_route)
del_route_by_cmd	main.c	/^void del_route_by_cmd(char *ip, char *netmask, char *dev)$/;"	f	signature:(char *ip, char *netmask, char *dev)
del_routes_by_if	cgi/net_tool.c	/^void del_routes_by_if(struct route_info *first_route, char *dev)$/;"	f	signature:(struct route_info *first_route, char *dev)
del_routes_by_if	client_tool/net_tool.c	/^void del_routes_by_if(struct route_info *first_route, char *dev)$/;"	f	signature:(struct route_info *first_route, char *dev)
del_routes_by_if	net_tool.c	/^void del_routes_by_if(struct route_info *first_route, char *dev)$/;"	f	signature:(struct route_info *first_route, char *dev)
del_routes_by_if	vppnconfig/net_tool.c	/^void del_routes_by_if(struct route_info *first_route, char *dev)$/;"	f	signature:(struct route_info *first_route, char *dev)
delete_request	ctrl_server.c	/^void delete_request(ctrl_request_t *req)$/;"	f	signature:(ctrl_request_t *req)
delete_vpn_jsonreq	ctrl_server_json.c	/^void delete_vpn_jsonreq(cJSON *jsonreq)$/;"	f	signature:(cJSON *jsonreq)
delete_vpn_jsonreq	ctrl_server_json.h	/^void delete_vpn_jsonreq(cJSON *jsonreq);$/;"	p	signature:(cJSON *jsonreq)
dest	cgi/net_tool.c	/^	struct sockaddr_in dest;$/;"	l
dest	client_tool/net_tool.c	/^	struct sockaddr_in dest;$/;"	l
dest	ctrl_server_json.c	/^			char *dest = NULL;$/;"	l
dest	net_tool.c	/^	struct sockaddr_in dest;$/;"	l
dest_json	ctrl-interface.c	/^	cJSON *dest_json = NULL;$/;"	l
dev	ctrl-interface.c	/^	char dev[100];$/;"	l
dev_buf	main.c	/^							char dev_buf[40];$/;"	l
dev_buf	main.c	/^	char dev_buf[200];$/;"	l
dev_item	vpn_config.c	/^		cJSON *dev_item = cJSON_GetObjectItem(custom, "tun_dev");$/;"	l
dev_item	vppnconfig/bird_conf.c	/^		cJSON *dev_item = cJSON_GetObjectItem(obj, "tun_dev");$/;"	l
dir_buf	main.c	/^	char dir_buf[200];$/;"	l
dns_pid	main.c	/^		pid_t dns_pid = get_dnsmasq_pid();$/;"	l
dnsmasq_conf	main.c	/^	char	dnsmasq_conf[100];$/;"	l
dnsmasq_conf_file	ctrl-interface.c	/^	char dnsmasq_conf_file[100];$/;"	l
dnsmasq_conf_file	main.c	/^	char dnsmasq_conf_file[300];$/;"	l
dnsmasq_file	main.c	/^	char dnsmasq_file[200];$/;"	l
do_cmd	main.c	/^int do_cmd(char *cmd)$/;"	f	signature:(char *cmd)
do_cmd_thread	main.c	/^void *do_cmd_thread(void *arg)$/;"	f	signature:(void *arg)
domain_item	main.c	/^			cJSON *domain_item = cJSON_GetObjectItem(item, "uri");$/;"	l
dst	iptables_tool.h	/^	char dst[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
dst	vpn_cloud.c	/^		Bytef *dst = (Bytef *)malloc(dst_len);$/;"	l
dst_buf	cgi/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
dst_buf	client_tool/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
dst_buf	net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
dst_buf	vppnconfig/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
dst_len	vpn_cloud.c	/^		uLong dst_len = (uLong)src_len * 2;$/;"	l
dummy_head	compress_tool.c	/^    static char dummy_head[2] = {$/;"	l	file:
dump_JSON	cgi/main.c	/^void dump_JSON(cJSON *obj)$/;"	f	signature:(cJSON *obj)
dump_JSON	client_tool/main.c	/^void dump_JSON(cJSON *obj)$/;"	f	signature:(cJSON *obj)
dump_JSON	ctrl-interface.c	/^static void dump_JSON(cJSON *json)$/;"	f	file:	signature:(cJSON *json)
dump_JSON	ctrl_server_json.c	/^extern void dump_JSON(cJSON *);$/;"	p	file:	signature:(cJSON *)
dump_JSON	main.c	/^void dump_JSON(cJSON *json)$/;"	f	signature:(cJSON *json)
dump_JSON	vppnconfig/main.c	/^void dump_JSON(cJSON *root)$/;"	f	signature:(cJSON *root)
dump_config	bird_conf.c	/^	struct vpn_config_s *dump_config = ctrl_get_tunnel_config();$/;"	l
dump_config	ctrl_server_json.c	/^		struct vpn_config_s *dump_config = ctrl_get_tunnel_config();$/;"	l
dump_config	ctrl_server_json.c	/^	struct vpn_config_s *dump_config = ctrl_get_tunnel_config();$/;"	l
dump_config	main.c	/^	struct vpn_config_s* dump_config = ctrl_get_tunnel_config();$/;"	l
dump_global_config	ctrl-interface.c	/^extern struct vpn_config_s *dump_global_config();$/;"	p	file:
dump_global_config	main.c	/^struct vpn_config_s *dump_global_config()$/;"	f
dump_route	cgi/net_tool.c	/^void dump_route(struct route_info *route)$/;"	f	signature:(struct route_info *route)
dump_route	client_tool/net_tool.c	/^void dump_route(struct route_info *route)$/;"	f	signature:(struct route_info *route)
dump_route	net_tool.c	/^void dump_route(struct route_info *route)$/;"	f	signature:(struct route_info *route)
dump_route	vppnconfig/net_tool.c	/^void dump_route(struct route_info *route)$/;"	f	signature:(struct route_info *route)
dump_route_list	cgi/net_tool.c	/^void dump_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
dump_route_list	client_tool/net_tool.c	/^void dump_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
dump_route_list	net_tool.c	/^void dump_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
dump_route_list	vppnconfig/net_tool.c	/^void dump_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
dup_cmd	process_tool.c	/^    char dup_cmd[MAX_LINE_LEN] = {0};$/;"	l
dup_old1	vppnconfig/main.c	/^		cJSON *dup_old1 = cJSON_Duplicate(old_item, 1);$/;"	l
dup_old2	vppnconfig/main.c	/^		cJSON *dup_old2 = cJSON_Duplicate(old_item, 1);$/;"	l
each_tunnel	vpn_config.h	/^	struct	vpn_tunnel_s*	each_tunnel;$/;"	m	struct:vpn_tunnel_set_s	typeref:struct:vpn_tunnel_set_s::vpn_tunnel_s	access:public
ebgp_format	bird_conf.c	/^	char *ebgp_format = "table %s \\n"	\/\/ table name$/;"	l
ebgp_format	vppnconfig/bird_conf.c	/^	char *ebgp_format = "table %s \\n"	\/\/ table name$/;"	l
enable	vpn_config.h	/^	int						enable;$/;"	m	struct:vpn_tunnel_info_s	access:public
end	cJSON.c	/^	const char *end=0;$/;"	l
end	cgi/cJSON.c	/^	const char *end=0;$/;"	l
end	client_tool/cJSON.c	/^	const char *end=0;$/;"	l
end	vppnconfig/cJSON.c	/^	const char *end=0;$/;"	l
end_time	cgi/net_tool.c	/^	struct timeval end_time;$/;"	l
end_time	client_tool/net_tool.c	/^	struct timeval end_time;$/;"	l
end_time	net_tool.c	/^	struct timeval end_time;$/;"	l
end_time	timer_tool.h	/^    struct timeval end_time;$/;"	m	struct:Timer	typeref:struct:Timer::timeval	access:public
endptr	cgi/net_tool.c	/^	char *endptr;$/;"	l
endptr	client_tool/net_tool.c	/^	char *endptr;$/;"	l
endptr	net_tool.c	/^	char *endptr;$/;"	l
endptr	vppnconfig/net_tool.c	/^	char *endptr;$/;"	l
endtime	vpn_config.h	/^	char	endtime[32];$/;"	m	struct:vpn_package_s	access:public
endtime_item	main.c	/^						cJSON *endtime_item = cJSON_GetObjectItem(other_item, "endTime");$/;"	l
endtime_item	main.c	/^				cJSON *endtime_item = cJSON_GetObjectItem(other_item, "endTime");$/;"	l
ensure	cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:	signature:(printbuffer *p,int needed)
ensure	cgi/cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:	signature:(printbuffer *p,int needed)
ensure	client_tool/cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:	signature:(printbuffer *p,int needed)
ensure	vppnconfig/cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:	signature:(printbuffer *p,int needed)
entries	cJSON.c	/^	char **entries;$/;"	l
entries	cJSON.c	/^	char **entries=0,**names=0;$/;"	l
entries	cgi/cJSON.c	/^	char **entries;$/;"	l
entries	cgi/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
entries	client_tool/cJSON.c	/^	char **entries;$/;"	l
entries	client_tool/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
entries	vppnconfig/cJSON.c	/^	char **entries;$/;"	l
entries	vppnconfig/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
ep	cJSON.c	/^static const char *ep;$/;"	v	file:
ep	cgi/cJSON.c	/^static const char *ep;$/;"	v	file:
ep	client_tool/cJSON.c	/^static const char *ep;$/;"	v	file:
ep	vppnconfig/cJSON.c	/^static const char *ep;$/;"	v	file:
err	compress_tool.c	/^    int err = 0;$/;"	l
err	vpn_cloud.c	/^			int err = gzcompress(src, src_len, dst, &dst_len);$/;"	l
err_code	ctrl_server_json.c	/^	int err_code = 0;$/;"	l
err_code	ctrl_server_json.c	/^	int err_code = 1;$/;"	l
error	ctrl_server_json.c	/^			int error = 0;$/;"	l
error	vpn_config.h	/^	int		error;$/;"	m	struct:vpn_resource_s	access:public
error_code	vpn_config.h	/^	char	error_code[32];$/;"	m	struct:vpn_resource_s	access:public
exe_ret	process_tool.c	/^                int exe_ret = execvp(args[0], args);$/;"	l
fail	cJSON.c	/^	int numentries=0,fail=0;$/;"	l
fail	cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
fail	cgi/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
fail	cgi/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
fail	client_tool/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
fail	client_tool/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
fail	vppnconfig/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
fail	vppnconfig/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
fd	cgi/net_tool.c	/^	int fd = create_ping_socket();$/;"	l
fd	client_tool/file_tool.c	/^		int fd = open(file_name, O_RDONLY);$/;"	l
fd	client_tool/file_tool.c	/^	int fd = open(file_name, O_CREAT | O_APPEND | O_WRONLY);$/;"	l
fd	client_tool/file_tool.c	/^	int fd = open(file_name, O_CREAT | O_WRONLY | O_TRUNC, mode);$/;"	l
fd	client_tool/net_tool.c	/^	int fd = create_ping_socket();$/;"	l
fd	file_tool.c	/^		int fd = open(file_name, O_RDONLY);$/;"	l
fd	file_tool.c	/^	int fd = open(file_name, O_CREAT | O_APPEND | O_WRONLY);$/;"	l
fd	file_tool.c	/^	int fd = open(file_name, O_CREAT | O_WRONLY | O_TRUNC, mode);$/;"	l
fd	main.c	/^	int fd = open("\/dev\/null", O_RDWR);$/;"	l
fd	net_tool.c	/^	int fd = create_ping_socket();$/;"	l
fd	process_tool.c	/^    int fd;$/;"	l
fd	vppnconfig/file_tool.c	/^		int fd = open(file_name, O_RDONLY);$/;"	l
fd	vppnconfig/file_tool.c	/^	int fd = open(file_name, O_CREAT | O_APPEND | O_WRONLY);$/;"	l
fd	vppnconfig/file_tool.c	/^	int fd = open(file_name, O_CREAT | O_WRONLY | O_TRUNC, mode);$/;"	l
fd	vppnconfig/main.c	/^	int fd = open("\/dev\/null", O_RDWR);$/;"	l
fetch_attach_device	attachdevice.c	/^char* fetch_attach_device()$/;"	f
fetch_attach_device	attachdevice.h	/^char* fetch_attach_device();$/;"	p	signature:()
file	cgi/net_tool.c	/^	FILE *file = fopen(ROUTE_FILE, "r");$/;"	l
file	client_tool/main.c	/^		char file[200];$/;"	l
file	client_tool/net_tool.c	/^	FILE *file = fopen(ROUTE_FILE, "r");$/;"	l
file	main.c	/^	FILE *file = NULL;$/;"	l
file	net_tool.c	/^	FILE *file = fopen(ROUTE_FILE, "r");$/;"	l
file	vppnconfig/bird_conf.c	/^	char 	file[100] = {0};$/;"	l
file	vppnconfig/net_tool.c	/^	FILE *file = fopen(ROUTE_FILE, "r");$/;"	l
file	vppnconfig/nvram-op.c	/^	FILE *file = NULL;$/;"	l
file_buf	main.c	/^	char file_buf[200];$/;"	l
file_len	client_tool/file_tool.c	/^	int file_len = get_file_len(file_name);$/;"	l
file_len	file_tool.c	/^	int file_len = get_file_len(file_name);$/;"	l
file_len	vppnconfig/file_tool.c	/^	int file_len = get_file_len(file_name);$/;"	l
file_stat	client_tool/file_tool.c	/^	struct stat file_stat;$/;"	l
file_stat	file_tool.c	/^	struct stat file_stat;$/;"	l
file_stat	vppnconfig/file_tool.c	/^	struct stat file_stat;$/;"	l
file_tool_create_dir	client_tool/file_tool.c	/^void file_tool_create_dir(char *path, int mode)$/;"	f	signature:(char *path, int mode)
file_tool_create_dir	client_tool/file_tool.h	/^void file_tool_create_dir(char *path, int mode);$/;"	p	signature:(char *path, int mode)
file_tool_create_dir	file_tool.c	/^void file_tool_create_dir(char *path, int mode)$/;"	f	signature:(char *path, int mode)
file_tool_create_dir	file_tool.h	/^void file_tool_create_dir(char *path, int mode);$/;"	p	signature:(char *path, int mode)
file_tool_create_dir	vppnconfig/file_tool.c	/^void file_tool_create_dir(char *path, int mode)$/;"	f	signature:(char *path, int mode)
file_tool_create_dir	vppnconfig/file_tool.h	/^void file_tool_create_dir(char *path, int mode);$/;"	p	signature:(char *path, int mode)
file_tool_find_dir	client_tool/file_tool.c	/^int file_tool_find_dir(char *path)$/;"	f	signature:(char *path)
file_tool_find_dir	file_tool.c	/^int file_tool_find_dir(char *path)$/;"	f	signature:(char *path)
file_tool_find_dir	vppnconfig/file_tool.c	/^int file_tool_find_dir(char *path)$/;"	f	signature:(char *path)
file_tool_remove_dir	client_tool/file_tool.c	/^void file_tool_remove_dir(char *path)$/;"	f	signature:(char *path)
file_tool_remove_dir	client_tool/file_tool.h	/^void file_tool_remove_dir(char *path);$/;"	p	signature:(char *path)
file_tool_remove_dir	file_tool.c	/^void file_tool_remove_dir(char *path)$/;"	f	signature:(char *path)
file_tool_remove_dir	file_tool.h	/^void file_tool_remove_dir(char *path);$/;"	p	signature:(char *path)
file_tool_remove_dir	vppnconfig/file_tool.c	/^void file_tool_remove_dir(char *path)$/;"	f	signature:(char *path)
file_tool_remove_dir	vppnconfig/file_tool.h	/^void file_tool_remove_dir(char *path);$/;"	p	signature:(char *path)
find	client_tool/file_tool.c	/^	int find = file_tool_find_dir(path);$/;"	l
find	file_tool.c	/^	int find = file_tool_find_dir(path);$/;"	l
find	vppnconfig/file_tool.c	/^	int find = file_tool_find_dir(path);$/;"	l
find_one_rule	iptables_tool.c	/^int find_one_rule(char *buf, char *in, char *out, char *src, char* dst, char *target)$/;"	f	signature:(char *buf, char *in, char *out, char *src, char* dst, char *target)
find_peer	ctrl_server_json.c	/^static int find_peer(cJSON *peers, char *peer, char *server)$/;"	f	file:	signature:(cJSON *peers, char *peer, char *server)
find_ret	iptables_tool.c	/^			int find_ret = find_one_rule(read_buf, in, out, src, dst, target);$/;"	l
find_vpath	ctrl_server_json.c	/^static int find_vpath(cJSON *vpaths, char *gw, char *uri, char *teamid)$/;"	f	file:	signature:(cJSON *vpaths, char *gw, char *uri, char *teamid)
firmware_version_buf	ctrl_server_json.c	/^	char firmware_version_buf[32] = "";$/;"	l
firstByteMark	cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
firstByteMark	cgi/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
firstByteMark	client_tool/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
firstByteMark	vppnconfig/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
fix_vpnstatus_peers	ctrl_server_json.c	/^void fix_vpnstatus_peers(cJSON *status, int tunnel_id)$/;"	f	signature:(cJSON *status, int tunnel_id)
flag	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
flag	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
flag	cgi/net_tool.c	/^	int n , flag;$/;"	l
flag	cgi/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
flag	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
flag	client_tool/net_tool.c	/^	int n , flag;$/;"	l
flag	client_tool/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
flag	net_tool.c	/^	int n , flag;$/;"	l
flag	net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
flag	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
flags_buf	cgi/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
flags_buf	client_tool/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
flags_buf	net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
flags_buf	vppnconfig/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
flow	vpn_config.h	/^	char	flow[32];$/;"	m	struct:vpn_package_s	access:public
flow_item	main.c	/^						cJSON *flow_item = cJSON_GetObjectItem(other_item, "flow");$/;"	l
flow_item	main.c	/^				cJSON *flow_item = cJSON_GetObjectItem(other_item, "flow");$/;"	l
found	main.c	/^		int found;$/;"	l
found	vppnconfig/main.c	/^	int found = 0;$/;"	l
fp	iptables_tool.c	/^	FILE *fp = popen(buf, "r");$/;"	l
fp	main.c	/^	FILE *fp = fopen(pid_file, "r");$/;"	l
fp	main.c	/^	FILE *fp = popen("\/bin\/ps | \/bin\/grep dnsmasq", "r");$/;"	l
fp	process_tool.c	/^	FILE *fp = popen(cmd_buf, "r");$/;"	l
fp	vppnconfig/main.c	/^	FILE *fp = fopen("\/module_name", "r");$/;"	l
free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
free_fn	cgi/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
free_fn	client_tool/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
free_fn	vppnconfig/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	access:public
free_route_list	cgi/net_tool.c	/^void free_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
free_route_list	client_tool/net_tool.c	/^void free_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
free_route_list	net_tool.c	/^void free_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
free_route_list	vppnconfig/net_tool.c	/^void free_route_list(struct route_info *first_route)$/;"	f	signature:(struct route_info *first_route)
from	cgi/net_tool.c	/^	struct sockaddr_in from;$/;"	l
from	client_tool/net_tool.c	/^	struct sockaddr_in from;$/;"	l
from	net_tool.c	/^	struct sockaddr_in from;$/;"	l
from	vppnconfig/net_tool.c	/^	struct sockaddr_in from;$/;"	l
fromlen	cgi/net_tool.c	/^						int fromlen = sizeof(from);$/;"	l
fromlen	cgi/net_tool.c	/^			int fromlen = sizeof(from);$/;"	l
fromlen	client_tool/net_tool.c	/^						int fromlen = sizeof(from);$/;"	l
fromlen	client_tool/net_tool.c	/^			int fromlen = sizeof(from);$/;"	l
fromlen	net_tool.c	/^						int fromlen = sizeof(from);$/;"	l
fromlen	net_tool.c	/^			int fromlen = sizeof(from);$/;"	l
fromlen	vppnconfig/net_tool.c	/^						int fromlen = sizeof(from);$/;"	l
g_config	main.c	/^struct vpn_config_s g_config;$/;"	v	typeref:struct:vpn_config_s
g_config_bakup	main.c	/^struct vpn_config_s g_config_bakup;$/;"	v	typeref:struct:vpn_config_s
g_geoip	ctrl_server_json.c	/^struct geoip_struct g_geoip;$/;"	v	typeref:struct:geoip_struct
gen_ctrl_pid_file	main.c	/^void gen_ctrl_pid_file(int tunnel_id, int pid, int conf_type)$/;"	f	signature:(int tunnel_id, int pid, int conf_type)
generate_public_vpath_conf	ctrl-interface.c	/^void generate_public_vpath_conf(cJSON *whitelist, int conf_type, int tunnel_id, char *gw)$/;"	f	signature:(cJSON *whitelist, int conf_type, int tunnel_id, char *gw)
generate_public_vpath_conf	ctrl-interface.h	/^void generate_public_vpath_conf(cJSON *whitelist, int conf_type, int tunnel_id, char *gw);$/;"	p	signature:(cJSON *whitelist, int conf_type, int tunnel_id, char *gw)
generate_question	cgi/net_tool.c	/^generate_question(const char *dns_name , unsigned char *buf , int *len){$/;"	f	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
generate_question	cgi/net_tool.c	/^generate_question(const char *dns_name$/;"	p	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
generate_question	client_tool/net_tool.c	/^generate_question(const char *dns_name , unsigned char *buf , int *len){$/;"	f	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
generate_question	client_tool/net_tool.c	/^generate_question(const char *dns_name$/;"	p	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
generate_question	net_tool.c	/^generate_question(const char *dns_name , unsigned char *buf , int *len){$/;"	f	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
generate_question	net_tool.c	/^generate_question(const char *dns_name$/;"	p	file:	signature:(const char *dns_name , unsigned char *buf , int *len)
geo_len	ctrl_server_json.c	/^	int geo_len = 0;$/;"	l
geo_res	ctrl_server_json.c	/^		char *geo_res = net_tool_http_client2(0, "geoip.bigit.com", 80, "\/geoip.php", NULL, 0, NULL, &geo_len);$/;"	l
geoip_struct	ctrl_server_json.c	/^struct geoip_struct$/;"	s	file:
geoip_struct::latitude	ctrl_server_json.c	/^	char latitude[32];$/;"	m	struct:geoip_struct	file:	access:public
geoip_struct::longtitude	ctrl_server_json.c	/^	char longtitude[32];$/;"	m	struct:geoip_struct	file:	access:public
geoip_struct::public_ip	ctrl_server_json.c	/^	char public_ip[32];$/;"	m	struct:geoip_struct	file:	access:public
get_char_from_utf8	cgi/main.c	/^unsigned char get_char_from_utf8(unsigned char *utf8)$/;"	f	signature:(unsigned char *utf8)
get_char_from_utf8	client_tool/main.c	/^unsigned char get_char_from_utf8(unsigned char *utf8)$/;"	f	signature:(unsigned char *utf8)
get_ctrl_pid	main.c	/^int get_ctrl_pid(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
get_custom_lan_if	vppnconfig/bird_conf.c	/^char* get_custom_lan_if()$/;"	f
get_dnsmasq_pid	main.c	/^pid_t get_dnsmasq_pid()$/;"	f
get_file_by_id	vppnconfig/main.c	/^void get_file_by_id(char *fmt, int id, char *ret_buf)$/;"	f	signature:(char *fmt, int id, char *ret_buf)
get_file_len	client_tool/file_tool.c	/^int get_file_len(char *file_name)$/;"	f	signature:(char *file_name)
get_file_len	file_tool.c	/^int get_file_len(char *file_name)$/;"	f	signature:(char *file_name)
get_file_len	vppnconfig/file_tool.c	/^int get_file_len(char *file_name)$/;"	f	signature:(char *file_name)
get_firmware_version	ctrl_server_json.c	/^void get_firmware_version(char *out)$/;"	f	signature:(char *out)
get_geoip	ctrl_server_json.c	/^void get_geoip(char *publicip_buf, char *latitude_buf, char *longtitude_buf)$/;"	f	signature:(char *publicip_buf, char *latitude_buf, char *longtitude_buf)
get_http_password	ctrl_server_json.c	/^void get_http_password(char *out, int max_len)$/;"	f	signature:(char *out, int max_len)
get_if_addr	cgi/net_tool.c	/^int get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_addr	client_tool/net_tool.c	/^int get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_addr	net_tool.c	/^int get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_addr	vppnconfig/net_tool.c	/^int get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_netmask	cgi/net_tool.c	/^int get_if_netmask(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_netmask	client_tool/net_tool.c	/^int get_if_netmask(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_if_netmask	net_tool.c	/^int get_if_netmask(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
get_input	cgi/main.c	/^	char *get_input;$/;"	l
get_input	client_tool/main.c	/^	char *get_input;$/;"	l
get_local_subnet	main.c	/^int get_local_subnet(char *subnet)$/;"	f	signature:(char *subnet)
get_module_name	ctrl_server_json.c	/^void get_module_name(char *out)$/;"	f	signature:(char *out)
get_peer_cnt	vppnconfig/main.c	/^int get_peer_cnt(int id)$/;"	f	signature:(int id)
get_peer_conf	vppnconfig/main.c	/^cJSON *get_peer_conf(int tunnel_id, int index)$/;"	f	signature:(int tunnel_id, int index)
get_peervpn_pid	main.c	/^int get_peervpn_pid(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
get_public_whitelist	ctrl-interface.c	/^cJSON *get_public_whitelist(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id)$/;"	f	signature:(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id)
get_public_whitelist	ctrl-interface.h	/^cJSON *get_public_whitelist(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id);$/;"	p	signature:(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id)
get_public_whitelist_from_cloud	ctrl-interface.c	/^cJSON *get_public_whitelist_from_cloud(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id)$/;"	f	signature:(char *cloud_host, int cloud_port, int vpn_type, int tunnel_id)
get_public_whitelist_from_local	ctrl-interface.c	/^cJSON *get_public_whitelist_from_local(int vpn_type, int tunnel_id)$/;"	f	signature:(int vpn_type, int tunnel_id)
get_resource_timer	main.c	/^	Timer get_resource_timer;$/;"	l
get_ret	main.c	/^	int get_ret = -1;$/;"	l
get_ret	main.c	/^	int get_ret = ERROR_CLOUD_UNREACHABLE;$/;"	l
get_route_info	cgi/net_tool.c	/^void get_route_info(char *buf, struct route_info *one_route)$/;"	f	signature:(char *buf, struct route_info *one_route)
get_route_info	client_tool/net_tool.c	/^void get_route_info(char *buf, struct route_info *one_route)$/;"	f	signature:(char *buf, struct route_info *one_route)
get_route_info	net_tool.c	/^void get_route_info(char *buf, struct route_info *one_route)$/;"	f	signature:(char *buf, struct route_info *one_route)
get_route_info	vppnconfig/net_tool.c	/^void get_route_info(char *buf, struct route_info *one_route)$/;"	f	signature:(char *buf, struct route_info *one_route)
get_route_list	cgi/net_tool.c	/^struct route_info *get_route_list()$/;"	f
get_route_list	client_tool/net_tool.c	/^struct route_info *get_route_list()$/;"	f
get_route_list	ctrl_server_json.c	/^static cJSON *get_route_list()$/;"	f	file:
get_route_list	net_tool.c	/^struct route_info *get_route_list()$/;"	f
get_route_list	vppnconfig/net_tool.c	/^struct route_info *get_route_list()$/;"	f
get_sn	ctrl_server_json.c	/^void get_sn(char *out)$/;"	f	signature:(char *out)
get_sockaddr	cgi/net_tool.c	/^struct sockaddr get_sockaddr(char *buf)$/;"	f	signature:(char *buf)
get_sockaddr	client_tool/net_tool.c	/^struct sockaddr get_sockaddr(char *buf)$/;"	f	signature:(char *buf)
get_sockaddr	net_tool.c	/^struct sockaddr get_sockaddr(char *buf)$/;"	f	signature:(char *buf)
get_sockaddr	vppnconfig/net_tool.c	/^struct sockaddr get_sockaddr(char *buf)$/;"	f	signature:(char *buf)
get_tinc_pid	main.c	/^int get_tinc_pid(int channel, int conf_type)$/;"	f	signature:(int channel, int conf_type)
get_tunnel_conf_dir_name	main.c	/^void get_tunnel_conf_dir_name(struct vpn_tunnel_s* tunnel, char *buf, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s* tunnel, char *buf, int conf_type)
get_tunnel_conf_hosts_dir_name	main.c	/^void get_tunnel_conf_hosts_dir_name(struct vpn_tunnel_s* tunnel, char *buf, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s* tunnel, char *buf, int conf_type)
get_vpath_cnt	vppnconfig/main.c	/^int get_vpath_cnt(int tunnel_id)$/;"	f	signature:(int tunnel_id)
get_vpath_conf	vppnconfig/main.c	/^cJSON *get_vpath_conf(int tunnel_id, int index)$/;"	f	signature:(int tunnel_id, int index)
getcgidata	cgi/main.c	/^char* getcgidata(FILE* fp, char* requestmethod)$/;"	f	signature:(FILE* fp, char* requestmethod)
getcgidata	client_tool/main.c	/^char* getcgidata(FILE* fp, char* requestmethod)$/;"	f	signature:(FILE* fp, char* requestmethod)
global_vpn_peers	ctrl_server_json.c	/^cJSON *global_vpn_peers = NULL;$/;"	v
global_vpn_status	ctrl_server_json.c	/^cJSON *global_vpn_status = NULL;$/;"	v
got	ctrl_server_json.c	/^	static int got = 0;$/;"	l	file:
gw	ctrl-interface.c	/^	char *gw = NULL;$/;"	l
gw	ctrl_server_json.c	/^			char *gw = NULL;$/;"	l
gw	ctrl_server_json.c	/^		char *gw = gw_item->valuestring;$/;"	l
gw	ctrl_server_json.c	/^	char *gw = gw_item->valuestring;$/;"	l
gw_buf	cgi/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
gw_buf	client_tool/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
gw_buf	ctrl-interface.c	/^			char gw_buf[30];$/;"	l
gw_buf	main.c	/^	char *gw_buf = NULL;$/;"	l
gw_buf	net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
gw_buf	vppnconfig/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
gw_item	ctrl-interface.c	/^		cJSON *gw_item = cJSON_GetObjectItem(switch_json, "vpath_tunnel");$/;"	l
gw_item	ctrl_server_json.c	/^		cJSON *gw_item = cJSON_GetObjectItem(item, "gw");$/;"	l
gw_item	ctrl_server_json.c	/^		cJSON *gw_item = cJSON_GetObjectItem(item, "vproxy");$/;"	l
gw_item	ctrl_server_json.c	/^	cJSON *gw_item = cJSON_GetObjectItem(jsonreq, "vproxy");$/;"	l
gw_item	main.c	/^			cJSON *gw_item = cJSON_GetObjectItem(item, "vproxy");$/;"	l
gzcompress	compress_tool.c	/^int gzcompress(Bytef *data, uLong ndata,$/;"	f	signature:(Bytef *data, uLong ndata, Bytef *zdata, uLong *nzdata)
gzcompress	compress_tool.h	/^int gzcompress(Bytef *data, uLong ndata,$/;"	p	signature:(Bytef *data, uLong ndata, Bytef *zdata, uLong *nzdata)
gzdecompress	compress_tool.c	/^int gzdecompress(Byte *zdata, uLong nzdata,$/;"	f	signature:(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)
gzdecompress	compress_tool.h	/^int gzdecompress(Byte *zdata, uLong nzdata,$/;"	p	signature:(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)
h	cJSON.c	/^	unsigned h=0;$/;"	l
h	cgi/cJSON.c	/^	unsigned h=0;$/;"	l
h	client_tool/cJSON.c	/^	unsigned h=0;$/;"	l
h	vppnconfig/cJSON.c	/^	unsigned h=0;$/;"	l
handle_get_vport_on	client_tool/main.c	/^void handle_get_vport_on()$/;"	f
handle_request	ctrl_server.c	/^void handle_request(ctrl_request_t *request)$/;"	f	signature:(ctrl_request_t *request)
handle_request_thread	ctrl_server.c	/^void* handle_request_thread(void *arg)$/;"	f	signature:(void *arg)
handle_vpn_jsonreq	ctrl_server_json.c	/^void handle_vpn_jsonreq(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
handle_vpn_jsonreq	ctrl_server_json.h	/^void handle_vpn_jsonreq(cJSON *jsonreq, ctrl_request_t *request);$/;"	p	signature:(cJSON *jsonreq, ctrl_request_t *request)
has_address	ctrl_server_json.c	/^    unsigned int has_address:1;     \/* 1 if we know an external address for this node *\/$/;"	m	struct:node_status_t	file:	access:public
he	cgi/net_tool.c	/^	struct hostent *he = gethostbyname(host);$/;"	l
he	cgi/net_tool.c	/^	struct hostent *he;    \/* structure that will get information about remote host *\/$/;"	l
he	client_tool/net_tool.c	/^	struct hostent *he = gethostbyname(host);$/;"	l
he	client_tool/net_tool.c	/^	struct hostent *he;    \/* structure that will get information about remote host *\/$/;"	l
he	net_tool.c	/^	struct hostent *he = gethostbyname(host);$/;"	l
he	net_tool.c	/^	struct hostent *he;    \/* structure that will get information about remote host *\/$/;"	l
he	vppnconfig/net_tool.c	/^	struct hostent *he = gethostbyname(host);$/;"	l
he	vppnconfig/net_tool.c	/^	struct hostent *he;    \/* structure that will get information about remote host *\/$/;"	l
head_buf	cgi/net_tool.c	/^	char head_buf[1000];$/;"	l
head_buf	client_tool/net_tool.c	/^	char head_buf[1000];$/;"	l
head_buf	net_tool.c	/^	char head_buf[1000];$/;"	l
head_buf	net_tool.c	/^	char head_buf[2000];$/;"	l
head_buf	vppnconfig/net_tool.c	/^	char head_buf[1000];$/;"	l
head_len	net_tool.c	/^	int head_len;$/;"	l
heart_beat_ret	main.c	/^						int heart_beat_ret = vpn_tunnel_heartbeat(&config->tunnel, config->self_id, config->cloud_host, config->cloud_port, server_reachable, 1);$/;"	l
host	ctrl_server.c	/^	char *host;$/;"	m	struct:ctrl_addr_s	file:	access:public
host	vppnconfig/main.c	/^	char *host = GetConfig(conf_manager_host);$/;"	l
host_item	cgi/net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, "ip");$/;"	l
host_item	cgi/net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, ip_name);$/;"	l
host_item	cgi/net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, "ip");$/;"	l
host_item	cgi/net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, ip_name);$/;"	l
host_item	client_tool/net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, "ip");$/;"	l
host_item	client_tool/net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, ip_name);$/;"	l
host_item	client_tool/net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, "ip");$/;"	l
host_item	client_tool/net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, ip_name);$/;"	l
host_item	ctrl_server_json.c	/^	cJSON *host_item = cJSON_GetObjectItem(jsonreq, "cloud_host");$/;"	l
host_item	main.c	/^				cJSON *host_item = cJSON_GetObjectItem(conf, "IP");$/;"	l
host_item	main.c	/^				cJSON *host_item = cJSON_GetObjectItem(response, "IP");$/;"	l
host_item	net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, "ip");$/;"	l
host_item	net_tool.c	/^							cJSON *host_item = cJSON_GetObjectItem(item, ip_name);$/;"	l
host_item	net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, "ip");$/;"	l
host_item	net_tool.c	/^			cJSON *host_item = cJSON_GetObjectItem(itm, ip_name);$/;"	l
host_item	vpn_config.c	/^				cJSON *host_item = cJSON_GetObjectItem(root, "cloud_host");$/;"	l
host_item	vppnconfig/main.c	/^		cJSON *host_item = cJSON_GetObjectItem(obj, CLOUD_HOST);$/;"	l
http_password	ctrl_server_json.c	/^	char http_password[200] = "";$/;"	l
http_res	vpn_cloud.c	/^				char *http_res = net_tool_http_client_raw(cloud_host, cloud_port, uri, dst, dst_len, &recv_len);$/;"	l
i	bird_conf.c	/^			int i;$/;"	l
i	bird_conf.c	/^	int i;$/;"	l
i	bird_conf.c	/^	int i=0;$/;"	l
i	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
i	cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
i	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
i	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
i	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
i	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
i	cgi/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
i	cgi/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cgi/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cgi/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cgi/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	cgi/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
i	cgi/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
i	cgi/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
i	cgi/main.c	/^					int i;$/;"	l
i	cgi/main.c	/^		int i = 0, j = 0;$/;"	l
i	cgi/main.c	/^	int i = 0;$/;"	l
i	cgi/net_tool.c	/^					int i;$/;"	l
i	cgi/net_tool.c	/^			int i;$/;"	l
i	cgi/net_tool.c	/^		int i;$/;"	l
i	cgi/net_tool.c	/^	int i = 0;$/;"	l
i	cgi/net_tool.c	/^	int i;$/;"	l
i	cgi/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
i	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
i	client_tool/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
i	client_tool/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	client_tool/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	client_tool/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	client_tool/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	client_tool/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
i	client_tool/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
i	client_tool/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
i	client_tool/main.c	/^		int i = 0, j = 0;$/;"	l
i	client_tool/main.c	/^	int i = 0;$/;"	l
i	client_tool/main.c	/^	int i;$/;"	l
i	client_tool/net_tool.c	/^					int i;$/;"	l
i	client_tool/net_tool.c	/^			int i;$/;"	l
i	client_tool/net_tool.c	/^		int i;$/;"	l
i	client_tool/net_tool.c	/^	int i = 0;$/;"	l
i	client_tool/net_tool.c	/^	int i;$/;"	l
i	client_tool/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
i	ctrl-interface.c	/^			int i;$/;"	l
i	ctrl-interface.c	/^		int i;$/;"	l
i	ctrl-interface.c	/^	int i;$/;"	l
i	ctrl_server_json.c	/^			int i;$/;"	l
i	ctrl_server_json.c	/^		int i;$/;"	l
i	ctrl_server_json.c	/^	int i;$/;"	l
i	iptables_tool.c	/^	int i;$/;"	l
i	main.c	/^					int i;$/;"	l
i	main.c	/^			int i;$/;"	l
i	main.c	/^		int i;$/;"	l
i	main.c	/^	int i;$/;"	l
i	net_tool.c	/^					int i;$/;"	l
i	net_tool.c	/^			int i;$/;"	l
i	net_tool.c	/^		int i;$/;"	l
i	net_tool.c	/^	int i = 0;$/;"	l
i	net_tool.c	/^	int i;$/;"	l
i	net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
i	vpn_config.c	/^	int i;$/;"	l
i	vppnconfig/bird_conf.c	/^	int i=0;$/;"	l
i	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
i	vppnconfig/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
i	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
i	vppnconfig/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	l
i	vppnconfig/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	l
i	vppnconfig/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	l
i	vppnconfig/main.c	/^			int i;$/;"	l
i	vppnconfig/main.c	/^		int i;$/;"	l
i	vppnconfig/main.c	/^	int i;$/;"	l
i	vppnconfig/net_tool.c	/^			int i;$/;"	l
i	vppnconfig/net_tool.c	/^		int i;$/;"	l
i	vppnconfig/net_tool.c	/^	int i = 0;$/;"	l
i	vppnconfig/nvram-op.c	/^	int i;$/;"	l
icmp	cgi/net_tool.c	/^				struct icmp *icmp;$/;"	l
icmp	cgi/net_tool.c	/^			struct icmp *icmp;$/;"	l
icmp	client_tool/net_tool.c	/^				struct icmp *icmp;$/;"	l
icmp	client_tool/net_tool.c	/^			struct icmp *icmp;$/;"	l
icmp	net_tool.c	/^				struct icmp *icmp;$/;"	l
icmp	net_tool.c	/^			struct icmp *icmp;$/;"	l
icmp	vppnconfig/net_tool.c	/^			struct icmp *icmp;$/;"	l
id	vpn_config.c	/^    char *id = read_text("\/etc\/vppn_id");$/;"	l
if_name	client_tool/main.c	/^			char if_name[100];$/;"	l
ifconfig4_content	main.c	/^	char ifconfig4_content[400];$/;"	l
ifr	cgi/net_tool.c	/^	struct ifreq ifr;$/;"	l
ifr	client_tool/net_tool.c	/^	struct ifreq ifr;$/;"	l
ifr	net_tool.c	/^	struct ifreq ifr;$/;"	l
ifr	vppnconfig/net_tool.c	/^	struct ifreq ifr;$/;"	l
illegal	ctrl_server_json.c	/^	int illegal = 0;$/;"	l
in	iptables_tool.h	/^	char in[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
in_if_addr	cgi/net_tool.c	/^		struct sockaddr_in *in_if_addr 	  = (struct sockaddr_in *)if_addr;$/;"	l
in_if_addr	client_tool/net_tool.c	/^		struct sockaddr_in *in_if_addr 	  = (struct sockaddr_in *)if_addr;$/;"	l
in_if_addr	net_tool.c	/^		struct sockaddr_in *in_if_addr 	  = (struct sockaddr_in *)if_addr;$/;"	l
in_if_addr	vppnconfig/net_tool.c	/^		struct sockaddr_in *in_if_addr 	  = (struct sockaddr_in *)if_addr;$/;"	l
in_route_dst	cgi/net_tool.c	/^		struct sockaddr_in *in_route_dst  = (struct sockaddr_in *)&route_dst;$/;"	l
in_route_dst	client_tool/net_tool.c	/^		struct sockaddr_in *in_route_dst  = (struct sockaddr_in *)&route_dst;$/;"	l
in_route_dst	net_tool.c	/^		struct sockaddr_in *in_route_dst  = (struct sockaddr_in *)&route_dst;$/;"	l
in_route_dst	vppnconfig/net_tool.c	/^		struct sockaddr_in *in_route_dst  = (struct sockaddr_in *)&route_dst;$/;"	l
in_route_mask	cgi/net_tool.c	/^		struct sockaddr_in *in_route_mask = (struct sockaddr_in *)&route_mask;$/;"	l
in_route_mask	client_tool/net_tool.c	/^		struct sockaddr_in *in_route_mask = (struct sockaddr_in *)&route_mask;$/;"	l
in_route_mask	net_tool.c	/^		struct sockaddr_in *in_route_mask = (struct sockaddr_in *)&route_mask;$/;"	l
in_route_mask	vppnconfig/net_tool.c	/^		struct sockaddr_in *in_route_mask = (struct sockaddr_in *)&route_mask;$/;"	l
indirect	ctrl_server_json.c	/^    unsigned int indirect:1;                \/* 1 if this node is not directly reachable by us *\/$/;"	m	struct:node_status_t	file:	access:public
info	ctrl_server_json.c	/^	char *info = fetch_attach_device();$/;"	l
info	vpn_config.h	/^	struct vpn_tunnel_info_s	info;$/;"	m	struct:vpn_tunnel_s	typeref:struct:vpn_tunnel_s::vpn_tunnel_info_s	access:public
input	cgi/main.c	/^	char *input = NULL;$/;"	l
input	cgi/main.c	/^	char* input;$/;"	l
input	client_tool/main.c	/^	char* input;$/;"	l
int_to_bitfield	ctrl_server_json.c	/^void int_to_bitfield(void *bitfield, size_t size, unsigned int value)$/;"	f	signature:(void *bitfield, size_t size, unsigned int value)
interface_buf	bird_conf.c	/^		char interface_buf[100];$/;"	l
interface_buf	cgi/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
interface_buf	client_tool/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
interface_buf	main.c	/^	char interface_buf[200];$/;"	l
interface_buf	net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
interface_buf	vppnconfig/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
interface_content	main.c	/^	char interface_content[400];$/;"	l
interval	timer_tool.c	/^    struct timeval interval = {timeout \/ 1000, (timeout % 1000) * 1000};$/;"	l
interval	timer_tool.c	/^    struct timeval interval = {timeout, 0};$/;"	l
interval_msec_dot	cgi/net_tool.c	/^    unsigned long long interval_msec_dot = 0;$/;"	l
interval_msec_dot	client_tool/net_tool.c	/^    unsigned long long interval_msec_dot = 0;$/;"	l
interval_msec_dot	net_tool.c	/^    unsigned long long interval_msec_dot = 0;$/;"	l
interval_msec_dot	vppnconfig/net_tool.c	/^    unsigned long long interval_msec_dot = 0;$/;"	l
interval_msec_int	cgi/net_tool.c	/^    unsigned long long interval_msec_int = 0;$/;"	l
interval_msec_int	client_tool/net_tool.c	/^    unsigned long long interval_msec_int = 0;$/;"	l
interval_msec_int	net_tool.c	/^    unsigned long long interval_msec_int = 0;$/;"	l
interval_msec_int	vppnconfig/net_tool.c	/^    unsigned long long interval_msec_int = 0;$/;"	l
intf_first	bird_conf.c	/^	char intf_first[] =  "protocol ospf { \\n"$/;"	l
intf_first	vppnconfig/bird_conf.c	/^	char intf_first[] =  "protocol ospf { \\n"$/;"	l
intf_format	bird_conf.c	/^	char *intf_format = "\\t\\tinterface \\"%s\\" { \\n"$/;"	l
intf_format	vppnconfig/bird_conf.c	/^	char *intf_format = "\\t\\tinterface \\"%s\\" { \\n"$/;"	l
intf_last	bird_conf.c	/^	char intf_last[] =	"\\t}; \\n"$/;"	l
intf_last	vppnconfig/bird_conf.c	/^	char intf_last[] =	"\\t}; \\n"$/;"	l
into	cJSON.c	/^	char *into=json;$/;"	l
into	cgi/cJSON.c	/^	char *into=json;$/;"	l
into	client_tool/cJSON.c	/^	char *into=json;$/;"	l
into	vppnconfig/cJSON.c	/^	char *into=json;$/;"	l
ip	cgi/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
ip	client_tool/net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
ip	net_tool.c	/^	char cname[128] , aname[128] , ip[20];$/;"	l
ip_addr	cgi/net_tool.c	/^	struct sockaddr ip_addr;$/;"	l
ip_addr	client_tool/net_tool.c	/^	struct sockaddr ip_addr;$/;"	l
ip_addr	net_tool.c	/^		struct in_addr ip_addr;$/;"	l
ip_addr	net_tool.c	/^	struct in_addr ip_addr;$/;"	l
ip_addr	net_tool.c	/^	struct sockaddr ip_addr;$/;"	l
ip_addr	vppnconfig/net_tool.c	/^	struct sockaddr ip_addr;$/;"	l
ip_addr_ptr	net_tool.c	/^	struct sockaddr_in* ip_addr_ptr = (struct sockaddr_in*)(&ip_addr);$/;"	l
ip_array	cgi/net_tool.c	/^	cJSON *ip_array = cJSON_CreateArray();$/;"	l
ip_array	client_tool/net_tool.c	/^	cJSON *ip_array = cJSON_CreateArray();$/;"	l
ip_array	net_tool.c	/^	cJSON *ip_array = cJSON_CreateArray();$/;"	l
ip_buf	main.c	/^							char ip_buf[40];$/;"	l
ip_buf	main.c	/^	char ip_buf[200];$/;"	l
ip_buf1	main.c	/^	char ip_buf1[32];$/;"	l
ip_buf2	main.c	/^	char ip_buf2[32];$/;"	l
ip_err	bird_conf.c	/^	int ip_err = net_tool_get_if_ip(v_interface, local_vip);$/;"	l
ip_item	ctrl-interface.c	/^				cJSON* ip_item = cJSON_GetObjectItem(one_neighbor, "peer_vip");$/;"	l
ip_item	main.c	/^			cJSON* ip_item = cJSON_GetObjectItem(item, "ip");$/;"	l
ip_item	vppnconfig/main.c	/^		cJSON *ip_item = cJSON_GetObjectItem(peer, "ip");$/;"	l
ip_seg1	main.c	/^	int ip_seg1;$/;"	l
ip_seg2	main.c	/^	int ip_seg2;$/;"	l
ip_seg3	main.c	/^	int ip_seg3;$/;"	l
ip_seg4	main.c	/^	int ip_seg4;$/;"	l
iph	cgi/net_tool.c	/^				struct ip *iph;$/;"	l
iph	cgi/net_tool.c	/^			struct ip *iph;$/;"	l
iph	client_tool/net_tool.c	/^				struct ip *iph;$/;"	l
iph	client_tool/net_tool.c	/^			struct ip *iph;$/;"	l
iph	net_tool.c	/^				struct ip *iph;$/;"	l
iph	net_tool.c	/^			struct ip *iph;$/;"	l
iph	vppnconfig/net_tool.c	/^			struct ip *iph;$/;"	l
iptabels_create_chain	iptables_tool.c	/^void iptabels_create_chain(char *table, char *chain)$/;"	f	signature:(char *table, char *chain)
iptables_append_rule	iptables_tool.c	/^void iptables_append_rule(char *table, char *chain, char *rule_str)$/;"	f	signature:(char *table, char *chain, char *rule_str)
iptables_append_rule	iptables_tool.h	/^void iptables_append_rule(char *table, char *chain, char *rule_str);$/;"	p	signature:(char *table, char *chain, char *rule_str)
iptables_delete_rule	iptables_tool.c	/^void iptables_delete_rule(char *table, char *chain, char *rule_str)$/;"	f	signature:(char *table, char *chain, char *rule_str)
iptables_delete_rule	iptables_tool.h	/^void iptables_delete_rule(char *table, char *chain, char *rule_str);$/;"	p	signature:(char *table, char *chain, char *rule_str)
iptables_find_rule	iptables_tool.c	/^int iptables_find_rule(char *table, char *chain, char *in, char *out, char *src, char *dst, char *target)$/;"	f	signature:(char *table, char *chain, char *in, char *out, char *src, char *dst, char *target)
iptables_find_rule	iptables_tool.h	/^int iptables_find_rule(char *table, char *chain, char *in, char *out, char *src, char *dst, char *target);$/;"	p	signature:(char *table, char *chain, char *in, char *out, char *src, char *dst, char *target)
iptables_insert_rule	iptables_tool.c	/^void iptables_insert_rule(char *table, char *chain, char *rule_str, int position)$/;"	f	signature:(char *table, char *chain, char *rule_str, int position)
iptables_insert_rule	iptables_tool.h	/^void iptables_insert_rule(char *table, char *chain, char *rule_str, int position);$/;"	p	signature:(char *table, char *chain, char *rule_str, int position)
iptables_rule_s	iptables_tool.h	/^struct iptables_rule_s$/;"	s
iptables_rule_s::dst	iptables_tool.h	/^	char dst[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
iptables_rule_s::in	iptables_tool.h	/^	char in[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
iptables_rule_s::out	iptables_tool.h	/^	char out[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
iptables_rule_s::src	iptables_tool.h	/^	char src[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
iptables_rule_s::target	iptables_tool.h	/^	char target[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
ipv4_addr	cgi/net_tool.c	/^	struct sockaddr_in *ipv4_addr = (struct sockaddr_in *)&addr;$/;"	l
ipv4_addr	client_tool/net_tool.c	/^	struct sockaddr_in *ipv4_addr = (struct sockaddr_in *)&addr;$/;"	l
ipv4_addr	net_tool.c	/^	struct sockaddr_in *ipv4_addr = (struct sockaddr_in *)&addr;$/;"	l
ipv4_addr	vppnconfig/net_tool.c	/^	struct sockaddr_in *ipv4_addr = (struct sockaddr_in *)&addr;$/;"	l
is_ip	main.c	/^int is_ip(char *host)$/;"	f	signature:(char *host)
is_pointer	cgi/net_tool.c	/^is_pointer(int in);$/;"	p	file:	signature:(int in)
is_pointer	cgi/net_tool.c	/^static int is_pointer(int in){$/;"	f	file:	signature:(int in)
is_pointer	client_tool/net_tool.c	/^is_pointer(int in);$/;"	p	file:	signature:(int in)
is_pointer	client_tool/net_tool.c	/^static int is_pointer(int in){$/;"	f	file:	signature:(int in)
is_pointer	net_tool.c	/^is_pointer(int in);$/;"	p	file:	signature:(int in)
is_pointer	net_tool.c	/^static int is_pointer(int in){$/;"	f	file:	signature:(int in)
item	bird_conf.c	/^				cJSON *item = cJSON_GetArrayItem(tunnel_peers, j);$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	l
item	cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	l
item	cgi/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	l
item	cgi/net_tool.c	/^						cJSON *item = cJSON_GetArrayItem(hosts, i);$/;"	l
item	cgi/net_tool.c	/^		cJSON *item = cJSON_GetArrayItem(hosts, j);$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	l
item	client_tool/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	l
item	client_tool/main.c	/^		cJSON *item = read_json_from_file(file);$/;"	l
item	client_tool/net_tool.c	/^						cJSON *item = cJSON_GetArrayItem(hosts, i);$/;"	l
item	client_tool/net_tool.c	/^		cJSON *item = cJSON_GetArrayItem(hosts, j);$/;"	l
item	ctrl-interface.c	/^	cJSON *item = cJSON_CreateObject();$/;"	l
item	ctrl_server_json.c	/^				cJSON *item = cJSON_GetArrayItem(peers_json, i);$/;"	l
item	ctrl_server_json.c	/^		cJSON *item = cJSON_GetArrayItem(list_item, i);$/;"	l
item	ctrl_server_json.c	/^		cJSON *item = cJSON_GetArrayItem(peers, i);$/;"	l
item	ctrl_server_json.c	/^		cJSON *item = cJSON_GetArrayItem(vpath_json, i);$/;"	l
item	ctrl_server_json.c	/^		cJSON *item = cJSON_GetArrayItem(vpaths, i);$/;"	l
item	main.c	/^						cJSON *item = cJSON_GetArrayItem(whitelist_item, i);$/;"	l
item	main.c	/^			cJSON *item = cJSON_GetArrayItem(whitelist, i);$/;"	l
item	main.c	/^			cJSON* item = cJSON_GetArrayItem(members, i);$/;"	l
item	net_tool.c	/^						cJSON *item = cJSON_GetArrayItem(hosts, i);$/;"	l
item	net_tool.c	/^		cJSON *item = cJSON_GetArrayItem(hosts, j);$/;"	l
item	vppnconfig/bird_conf.c	/^		cJSON *item = cJSON_GetArrayItem(array, i);$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	l
item	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	l
item	vppnconfig/main.c	/^		cJSON *item = cJSON_GetArrayItem(new_array, i);$/;"	l
item_cnt	bird_conf.c	/^			int item_cnt = cJSON_GetArraySize(peers);$/;"	l
item_cnt	ctrl-interface.c	/^	int item_cnt = cJSON_GetArraySize(whitelist);$/;"	l
item_to_ping	ctrl_server_json.c	/^				cJSON *item_to_ping = cJSON_CreateObject();$/;"	l
items_cnt	ctrl-interface.c	/^			int items_cnt = cJSON_GetArraySize(neighbors);$/;"	l
itm	cgi/net_tool.c	/^		cJSON *itm = cJSON_GetArrayItem(hosts, i);$/;"	l
itm	client_tool/net_tool.c	/^		cJSON *itm = cJSON_GetArrayItem(hosts, i);$/;"	l
itm	net_tool.c	/^		cJSON *itm = cJSON_GetArrayItem(hosts, i);$/;"	l
j	bird_conf.c	/^			int j;$/;"	l
j	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
j	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
j	cgi/main.c	/^		int i = 0, j = 0;$/;"	l
j	cgi/net_tool.c	/^				int j;$/;"	l
j	cgi/net_tool.c	/^	int j;$/;"	l
j	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
j	client_tool/main.c	/^		int i = 0, j = 0;$/;"	l
j	client_tool/net_tool.c	/^				int j;$/;"	l
j	client_tool/net_tool.c	/^	int j;$/;"	l
j	net_tool.c	/^				int j;$/;"	l
j	net_tool.c	/^	int j;$/;"	l
j	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
json_conf	ctrl_server_json.c	/^	cJSON *json_conf = cJSON_CreateObject();$/;"	l
json_get_manager	ctrl_server_json.c	/^cJSON *json_get_manager(int tunnel_type, int tunnel_id)$/;"	f	signature:(int tunnel_type, int tunnel_id)
json_get_package	ctrl_server_json.c	/^cJSON *json_get_package(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
json_get_peers	ctrl_server_json.c	/^cJSON *json_get_peers(int tunnel_id, char *server)$/;"	f	signature:(int tunnel_id, char *server)
json_get_public_vpath	ctrl_server_json.c	/^cJSON *json_get_public_vpath(int tunnel_type, int tunnel_id)$/;"	f	signature:(int tunnel_type, int tunnel_id)
json_get_routes	ctrl_server_json.c	/^cJSON *json_get_routes()$/;"	f
json_get_vpathlist	ctrl_server_json.c	/^cJSON *json_get_vpathlist(int tunnel_type, int tunnel_id)$/;"	f	signature:(int tunnel_type, int tunnel_id)
json_get_vpn_peers	ctrl_server_json.c	/^cJSON *json_get_vpn_peers()$/;"	f
json_get_vpn_peers_thread	ctrl_server_json.c	/^void *json_get_vpn_peers_thread(void *arg)$/;"	f	signature:(void *arg)
json_get_vpn_status	ctrl_server_json.c	/^cJSON *json_get_vpn_status()$/;"	f
json_handle_add_manager	ctrl_server_json.c	/^void json_handle_add_manager(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_add_peer	ctrl_server_json.c	/^void json_handle_add_peer(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_add_public_vpath	ctrl_server_json.c	/^void json_handle_add_public_vpath(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_add_vpath	ctrl_server_json.c	/^void json_handle_add_vpath(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_add_vpath_list	ctrl_server_json.c	/^void json_handle_add_vpath_list(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_ask_neighbor	ctrl_server_json.c	/^void json_handle_ask_neighbor(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_default	ctrl_server_json.c	/^void json_handle_default(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_del_manager	ctrl_server_json.c	/^void json_handle_del_manager(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_del_peer	ctrl_server_json.c	/^void json_handle_del_peer(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_del_public_vpath	ctrl_server_json.c	/^void json_handle_del_public_vpath(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_del_vpath	ctrl_server_json.c	/^void json_handle_del_vpath(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_del_vpath_list	ctrl_server_json.c	/^void json_handle_del_vpath_list(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_dump_nodes	ctrl_server_json.c	/^void json_handle_dump_nodes(cJSON* jsonreq, ctrl_request_t* request)$/;"	f	signature:(cJSON* jsonreq, ctrl_request_t* request)
json_handle_get_attachdevice	ctrl_server_json.c	/^void json_handle_get_attachdevice(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_deviceinfo	ctrl_server_json.c	/^void json_handle_get_deviceinfo(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_package	ctrl_server_json.c	/^void json_handle_get_package(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_route	ctrl_server_json.c	/^void json_handle_get_route(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_serverlist	ctrl_server_json.c	/^void json_handle_get_serverlist(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_traffic	ctrl_server_json.c	/^void json_handle_get_traffic(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_vpath_list	ctrl_server_json.c	/^void json_handle_get_vpath_list(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_vpnstatus	ctrl_server_json.c	/^void json_handle_get_vpnstatus(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_get_vport_on	ctrl_server_json.c	/^void json_handle_get_vport_on(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_reload_member	ctrl_server_json.c	/^void json_handle_reload_member(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_set_syslog_off	ctrl_server_json.c	/^void json_handle_set_syslog_off(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_set_syslog_on	ctrl_server_json.c	/^void json_handle_set_syslog_on(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_start_vpn	ctrl_server_json.c	/^void json_handle_start_vpn(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_handle_stop_vpn	ctrl_server_json.c	/^void json_handle_stop_vpn(cJSON *jsonreq, ctrl_request_t *request)$/;"	f	signature:(cJSON *jsonreq, ctrl_request_t *request)
json_list	main.c	/^					cJSON *json_list = cJSON_Duplicate(wl, 1);$/;"	l
json_response	ctrl_server_json.c	/^void json_response(cJSON *res, ctrl_request_t *request)$/;"	f	signature:(cJSON *res, ctrl_request_t *request)
json_wl	main.c	/^					cJSON *json_wl = cJSON_CreateObject();$/;"	l
jsonreq	ctrl_server.c	/^		cJSON *jsonreq = new_vpn_jsonreq(request);$/;"	l
known	ctrl_server_json.c	/^	int known = ctrl_find_neighbor(channel_item->valueint, vip_item->valuestring);$/;"	l
lan	vppnconfig/bird_conf.c	/^	char *lan = get_custom_lan_if();$/;"	l
lan_ip	main.c	/^	char lan_ip[100];$/;"	l
lan_ip_buf	ctrl_server_json.c	/^	char lan_ip_buf[32] = "";$/;"	l
lan_item	vpn_config.c	/^		cJSON *lan_item = cJSON_GetObjectItem(custom, "lan_interface");$/;"	l
lan_mac_buf	ctrl_server_json.c	/^	char lan_mac_buf[32] = "";$/;"	l
last_heartbeat_code	vpn_config.h	/^	int		last_heartbeat_code;$/;"	m	struct:vpn_tunnel_s	access:public
last_len	vppnconfig/nvram-op.c	/^		int last_len = 0;$/;"	l
last_select_code	vpn_config.h	/^	int		last_select_code;$/;"	m	struct:vpn_tunnel_s	access:public
latency	vpn_config.h	/^	double					latency;$/;"	m	struct:vpn_tunnel_info_s	access:public
latency_item	cgi/net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	cgi/net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latency_item	cgi/net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	cgi/net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latency_item	client_tool/net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	client_tool/net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latency_item	client_tool/net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	client_tool/net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latency_item	net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	net_tool.c	/^									cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latency_item	net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, "latency");$/;"	l
latency_item	net_tool.c	/^			cJSON *latency_item = cJSON_GetObjectItem(item, latency_name);$/;"	l
latitude	ctrl_server_json.c	/^	char latitude[32];$/;"	m	struct:geoip_struct	file:	access:public
latitude_buf	ctrl_server_json.c	/^	char latitude_buf[40] = "";$/;"	l
len	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
len	cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
len	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
len	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
len	cJSON.c	/^      size_t len;$/;"	l
len	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
len	cgi/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
len	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
len	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
len	cgi/cJSON.c	/^      size_t len;$/;"	l
len	cgi/main.c	/^	int len;$/;"	l
len	cgi/main.c	/^    int len = strlen((const char*)str);$/;"	l
len	cgi/net_tool.c	/^	int type , datalen , len;$/;"	l
len	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
len	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
len	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
len	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
len	client_tool/cJSON.c	/^      size_t len;$/;"	l
len	client_tool/main.c	/^	int len;$/;"	l
len	client_tool/main.c	/^    int len = strlen((const char*)str);$/;"	l
len	client_tool/net_tool.c	/^	int type , datalen , len;$/;"	l
len	ctrl_server_json.c	/^	int len = strlen(str);$/;"	l
len	ctrl_server_json.c	/^	int len = strlen(uri);$/;"	l
len	ctrl_server_json.c	/^	int len;$/;"	l
len	main.c	/^	int len = strlen(host);$/;"	l
len	net_tool.c	/^	int type , datalen , len;$/;"	l
len	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
len	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
len	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
len	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
len	vppnconfig/cJSON.c	/^      size_t len;$/;"	l
len	vppnconfig/nvram-op.c	/^	int len = strlen(str);$/;"	l
length	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
length	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
length	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
length	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
level_item	ctrl_server_json.c	/^	cJSON *level_item = cJSON_GetObjectItem(jsonreq, "log_level");$/;"	l
level_item	vpn_config.c	/^		cJSON *level_item = cJSON_GetObjectItem(log_obj, "log_level");$/;"	l
line_buf	cgi/net_tool.c	/^	char line_buf[1000];$/;"	l
line_buf	client_tool/net_tool.c	/^	char line_buf[1000];$/;"	l
line_buf	ctrl-interface.c	/^		char line_buf[100];$/;"	l
line_buf	ctrl_server_json.c	/^			char line_buf[200] = "";$/;"	l
line_buf	ctrl_server_json.c	/^	char line_buf[4096];$/;"	l
line_buf	main.c	/^							char line_buf[200];$/;"	l
line_buf	main.c	/^		char line_buf[100];$/;"	l
line_buf	net_tool.c	/^	char line_buf[1000];$/;"	l
line_buf	process_tool.c	/^	char line_buf[1024];$/;"	l
line_buf	vppnconfig/main.c	/^		char line_buf[4096] = "";$/;"	l
line_buf	vppnconfig/net_tool.c	/^	char line_buf[1000];$/;"	l
line_end	ctrl_server_json.c	/^		char *line_end = NULL;$/;"	l
line_start	ctrl_server_json.c	/^		char *line_start = str;$/;"	l
list_item	ctrl_server_json.c	/^	cJSON *list_item = cJSON_CreateArray();$/;"	l
list_item	ctrl_server_json.c	/^	cJSON *list_item = cJSON_GetObjectItem(jsonreq, "list");$/;"	l
listen_fd	ctrl_server.c	/^	int 					listen_fd = -1;$/;"	l
listen_fd	ctrl_server.c	/^	int listen_fd = -1;$/;"	l
listen_fd	ctrl_server.h	/^	int listen_fd;$/;"	m	struct:ctrl_server_s	access:public
load_manager	vppnconfig/main.c	/^void load_manager(int conf_type)$/;"	f	signature:(int conf_type)
load_peer	bird_conf.c	/^void load_peer(cJSON *total_peers, int id, char* teamid)$/;"	f	signature:(cJSON *total_peers, int id, char* teamid)
load_peer_conf	vppnconfig/main.c	/^void load_peer_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
load_peer_conf2	vppnconfig/main.c	/^void load_peer_conf2(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
load_peer_confs	vppnconfig/main.c	/^void load_peer_confs(int conf_type)$/;"	f	signature:(int conf_type)
load_public_vpath_switch_conf	vppnconfig/main.c	/^void load_public_vpath_switch_conf(int conf_type, int tunnel_id)$/;"	f	signature:(int conf_type, int tunnel_id)
load_public_vpath_switch_confs	vppnconfig/main.c	/^void load_public_vpath_switch_confs(int conf_type)$/;"	f	signature:(int conf_type)
load_ret	main.c	/^		int load_ret;$/;"	l
load_tunnel_conf	vppnconfig/main.c	/^void load_tunnel_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
load_tunnel_confs	vppnconfig/main.c	/^void load_tunnel_confs(int conf_type)$/;"	f	signature:(int conf_type)
load_vpath_conf	vppnconfig/main.c	/^void load_vpath_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
load_vpath_conf2	vppnconfig/main.c	/^void load_vpath_conf2(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
load_vpath_confs	vppnconfig/main.c	/^void load_vpath_confs(int conf_type)$/;"	f	signature:(int conf_type)
load_vpath_into_dnsmasq_conf	ctrl-interface.c	/^void load_vpath_into_dnsmasq_conf(cJSON *vpath, char *dnsmasq_conf_file, int conf_type, int channel, char* team_id)$/;"	f	signature:(cJSON *vpath, char *dnsmasq_conf_file, int conf_type, int channel, char* team_id)
local2gw_latency	ctrl-interface.h	/^	double  local2gw_latency;$/;"	m	struct:ctrl_local_status_s	access:public
local_as	bird_conf.c	/^		int local_as = local_vip.s_addr%1022 + 64512;$/;"	l
local_as	vppnconfig/bird_conf.c	/^		int local_as = local_vip.s_addr%1022 + 64512;$/;"	l
local_conf	main.c	/^	char local_conf[200];$/;"	l
local_ip	bird_conf.c	/^	char local_ip[20] = {0};$/;"	l
local_ip	vppnconfig/bird_conf.c	/^	char local_ip[20] = {0};$/;"	l
local_item	bird_conf.c	/^		cJSON *local_item = cJSON_GetObjectItem(obj, "local_vip");$/;"	l
local_item	vppnconfig/bird_conf.c	/^		cJSON *local_item = cJSON_GetObjectItem(obj, "local_vip");$/;"	l
local_lan_ip	ctrl_server_json.c	/^	char local_lan_ip[100];$/;"	l
local_lan_netmask	ctrl_server_json.c	/^	char local_lan_netmask[100];$/;"	l
local_sub	bird_conf.c	/^	char local_sub[100] = "";$/;"	l
local_sub	main.c	/^	char local_sub[24];$/;"	l
local_sub_item	vppnconfig/bird_conf.c	/^	cJSON *local_sub_item = NULL;$/;"	l
local_vip	bird_conf.c	/^	char local_vip[100] = "";$/;"	l
local_vip	bird_conf.c	/^	struct in_addr local_vip;$/;"	l
local_vip	ctrl-interface.h	/^	char local_vip[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_local_status_s	access:public
local_vip	vppnconfig/bird_conf.c	/^	struct in_addr local_vip;$/;"	l
log_conf_file	vpn_config.c	/^	char log_conf_file[100];$/;"	l
log_file	ctrl-interface.c	/^	char log_file[100];$/;"	l
log_level	vpn_config.h	/^	int							log_level;$/;"	m	struct:vpn_tunnel_s	access:public
log_obj	vpn_config.c	/^	cJSON *log_obj = read_json_from_file(log_conf_file);$/;"	l
log_on	vpn_config.h	/^	int							log_on;$/;"	m	struct:vpn_tunnel_s	access:public
longtitude	ctrl_server_json.c	/^	char longtitude[32];$/;"	m	struct:geoip_struct	file:	access:public
longtitude_buf	ctrl_server_json.c	/^	char longtitude_buf[40] = "";$/;"	l
loop_tid	ctrl_server.h	/^	pthread_t loop_tid;$/;"	m	struct:ctrl_server_s	access:public
mac	vpn_config.h	/^	char	mac[32];$/;"	m	struct:vpn_package_s	access:public
mac_item	main.c	/^						cJSON *mac_item = cJSON_GetObjectItem(other_item, "mac");$/;"	l
mac_item	main.c	/^				cJSON *mac_item = cJSON_GetObjectItem(other_item, "mac");$/;"	l
mac_item	main.c	/^			cJSON* mac_item = cJSON_GetObjectItem(item, "mac");$/;"	l
main	cgi/main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	client_tool/main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	vppnconfig/main.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
malloc_fn	cgi/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
malloc_fn	client_tool/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
malloc_fn	vppnconfig/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	access:public
manager_file	ctrl-interface.c	/^	char manager_file[100];$/;"	l
manager_host	ctrl-interface.h	/^	char manager_host[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_manager_status_s	access:public
manager_item	ctrl_server_json.c	/^	cJSON *manager_item = json_get_manager(dump_config->tunnel_type, dump_config->tunnel.tunnel_id);$/;"	l
manager_json	ctrl-interface.c	/^	cJSON *manager_json = read_json_from_file(manager_file);$/;"	l
manager_latency	ctrl-interface.h	/^	double manager_latency;$/;"	m	struct:ctrl_manager_status_s	access:public
manager_port	ctrl-interface.h	/^	int  manager_port;$/;"	m	struct:ctrl_manager_status_s	access:public
mask	ctrl_server_json.c	/^			char *mask = NULL;$/;"	l
mask_addr	cgi/net_tool.c	/^	struct sockaddr mask_addr;$/;"	l
mask_addr	client_tool/net_tool.c	/^	struct sockaddr mask_addr;$/;"	l
mask_addr	net_tool.c	/^		struct in_addr mask_addr;$/;"	l
mask_addr	net_tool.c	/^	struct in_addr mask_addr;$/;"	l
mask_addr	net_tool.c	/^	struct sockaddr mask_addr;$/;"	l
mask_addr_ptr	net_tool.c	/^	struct sockaddr_in* mask_addr_ptr = (struct sockaddr_in*)(&mask_addr);$/;"	l
mask_buf	cgi/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
mask_buf	client_tool/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
mask_buf	net_tool.c	/^		char mask_buf[100];$/;"	l
mask_buf	net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
mask_buf	vppnconfig/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
mask_in	cgi/net_tool.c	/^	struct sockaddr_in *mask_in = (struct sockaddr_in *)mask;$/;"	l
mask_in	client_tool/net_tool.c	/^	struct sockaddr_in *mask_in = (struct sockaddr_in *)mask;$/;"	l
mask_in	net_tool.c	/^	struct in_addr *mask_in = mask;$/;"	l
mask_num	net_tool.c	/^		uint32_t mask_num = 1 << (32 - num);$/;"	l
match_str	main.c	/^		char match_str[100];$/;"	l
match_str	main.c	/^	char match_str[100];$/;"	l
maxfds	cgi/net_tool.c	/^		int maxfds = sockfd + 1;$/;"	l
maxfds	cgi/net_tool.c	/^	int maxfds = 0;$/;"	l
maxfds	client_tool/net_tool.c	/^		int maxfds = sockfd + 1;$/;"	l
maxfds	client_tool/net_tool.c	/^	int maxfds = 0;$/;"	l
maxfds	net_tool.c	/^		int maxfds = sockfd + 1;$/;"	l
maxfds	net_tool.c	/^	int maxfds = 0;$/;"	l
maxfds	vppnconfig/net_tool.c	/^	int maxfds = 0;$/;"	l
members_item	ctrl_server_json.c	/^					cJSON* members_item = cJSON_GetObjectItem(response, "members");$/;"	l
members_item	main.c	/^					cJSON* members_item = cJSON_GetObjectItem(response, "members");$/;"	l
merge_old_into_new	vppnconfig/main.c	/^void merge_old_into_new(cJSON *new, cJSON *old)$/;"	f	signature:(cJSON *new, cJSON *old)
merge_old_vpn_vpath_into_new	vppnconfig/main.c	/^void merge_old_vpn_vpath_into_new(cJSON *new_array, cJSON *old_array)$/;"	f	signature:(cJSON *new_array, cJSON *old_array)
merge_old_vppn_vpath_into_new	vppnconfig/main.c	/^void merge_old_vppn_vpath_into_new(cJSON *new_array, cJSON *old_array)$/;"	f	signature:(cJSON *new_array, cJSON *old_array)
merge_temp_peers_conf	bird_conf.c	/^cJSON* merge_temp_peers_conf()$/;"	f
metric_buf	cgi/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
metric_buf	client_tool/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
metric_buf	net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
metric_buf	vppnconfig/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
module_name_buf	ctrl_server_json.c	/^	char module_name_buf[32] = "";$/;"	l
mtu_buf	cgi/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
mtu_buf	client_tool/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
mtu_buf	net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
mtu_buf	vppnconfig/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
my_debug	my_debug.c	/^int my_debug(int debug_level, const char *file_name, const char *func_name, int line, const char *fmt, ...) $/;"	f	signature:(int debug_level, const char *file_name, const char *func_name, int line, const char *fmt, ...)
my_debug	my_debug.h	/^int my_debug(int debug_level, const char *file_name, const char *func_name, int line, const char *fmt, ...);$/;"	p	signature:(int debug_level, const char *file_name, const char *func_name, int line, const char *fmt, ...)
my_debug_set_level	my_debug.c	/^void my_debug_set_level(int level)$/;"	f	signature:(int level)
my_debug_set_level	my_debug.h	/^void my_debug_set_level(int level);$/;"	p	signature:(int level)
my_dns_parse	cgi/net_tool.c	/^my_dns_parse(char *dns_server, char *dns_name);$/;"	p	file:	signature:(char *dns_server, char *dns_name)
my_dns_parse	cgi/net_tool.c	/^static cJSON *my_dns_parse(char *dns_server, char *dns_name) {$/;"	f	file:	signature:(char *dns_server, char *dns_name)
my_dns_parse	client_tool/net_tool.c	/^my_dns_parse(char *dns_server, char *dns_name);$/;"	p	file:	signature:(char *dns_server, char *dns_name)
my_dns_parse	client_tool/net_tool.c	/^static cJSON *my_dns_parse(char *dns_server, char *dns_name) {$/;"	f	file:	signature:(char *dns_server, char *dns_name)
my_dns_parse	net_tool.c	/^my_dns_parse(char *dns_server, char *dns_name);$/;"	p	file:	signature:(char *dns_server, char *dns_name)
my_dns_parse	net_tool.c	/^static cJSON *my_dns_parse(char *dns_server, char *dns_name) {$/;"	f	file:	signature:(char *dns_server, char *dns_name)
my_skip_crlf	vpn_config.c	/^void my_skip_crlf(char *str)$/;"	f	signature:(char *str)
my_strcat	vppnconfig/main.c	/^static char *my_strcat(char *str1, char *str2)$/;"	f	file:	signature:(char *str1, char *str2)
myself_item	vpn_config.c	/^				cJSON *myself_item = cJSON_GetObjectItem(root, VPN_TINC_MYSELF_ADDR);$/;"	l
n	bird_conf.c	/^	int n=0;$/;"	l
n	cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
n	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cgi/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
n	cgi/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cgi/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cgi/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cgi/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	cgi/net_tool.c	/^			int n;$/;"	l
n	cgi/net_tool.c	/^		int n = select(maxfds, &readfds, NULL, NULL, &timeo);$/;"	l
n	cgi/net_tool.c	/^	int n , flag;$/;"	l
n	cgi/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
n	cgi/net_tool.c	/^	int n;$/;"	l
n	client_tool/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
n	client_tool/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	client_tool/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	client_tool/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	client_tool/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	client_tool/net_tool.c	/^			int n;$/;"	l
n	client_tool/net_tool.c	/^		int n = select(maxfds, &readfds, NULL, NULL, &timeo);$/;"	l
n	client_tool/net_tool.c	/^	int n , flag;$/;"	l
n	client_tool/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
n	client_tool/net_tool.c	/^	int n;$/;"	l
n	net_tool.c	/^			int n;$/;"	l
n	net_tool.c	/^		int n = select(maxfds, &readfds, NULL, NULL, &timeo);$/;"	l
n	net_tool.c	/^	int n , flag;$/;"	l
n	net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
n	net_tool.c	/^	int n;$/;"	l
n	vppnconfig/bird_conf.c	/^	int n=0;$/;"	l
n	vppnconfig/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
n	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
n	vppnconfig/net_tool.c	/^			int n;$/;"	l
name_buf	main.c	/^	char name_buf[200];$/;"	l
name_ptr	ctrl_server_json.c	/^			char* name_ptr = line_start;$/;"	l
name_to_ip	ctrl_server_json.c	/^static void name_to_ip(char* name, char *ip_out)$/;"	f	file:	signature:(char* name, char *ip_out)
names	cJSON.c	/^	char **entries=0,**names=0;$/;"	l
names	cgi/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
names	client_tool/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
names	vppnconfig/cJSON.c	/^	char **entries=0,**names=0;$/;"	l
need_reconnect	main.c	/^		int need_reconnect;$/;"	l
need_recv_len	ctrl_server.c	/^		size_t need_recv_len = recv_client_data_len(sockfd);$/;"	l
neighbors	ctrl-interface.c	/^		cJSON *neighbors = ctrl_get_tunnel_neighbors(channel);$/;"	l
net_tool_dns_request	cgi/net_tool.c	/^cJSON *net_tool_dns_request(char *dns_server, char *request_name)$/;"	f	signature:(char *dns_server, char *request_name)
net_tool_dns_request	cgi/net_tool.h	/^net_tool_dns_request(char *dns_server, char *request_name);$/;"	p	signature:(char *dns_server, char *request_name)
net_tool_dns_request	client_tool/net_tool.c	/^cJSON *net_tool_dns_request(char *dns_server, char *request_name)$/;"	f	signature:(char *dns_server, char *request_name)
net_tool_dns_request	client_tool/net_tool.h	/^net_tool_dns_request(char *dns_server, char *request_name);$/;"	p	signature:(char *dns_server, char *request_name)
net_tool_dns_request	net_tool.c	/^cJSON *net_tool_dns_request(char *dns_server, char *request_name)$/;"	f	signature:(char *dns_server, char *request_name)
net_tool_dns_request	net_tool.h	/^net_tool_dns_request(char *dns_server, char *request_name);$/;"	p	signature:(char *dns_server, char *request_name)
net_tool_get_if_addr	cgi/net_tool.c	/^int net_tool_get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
net_tool_get_if_addr	cgi/net_tool.h	/^net_tool_get_if_addr(char *if_name, struct sockaddr*);$/;"	p	signature:(char *if_name, struct sockaddr*)
net_tool_get_if_addr	client_tool/net_tool.c	/^int net_tool_get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
net_tool_get_if_addr	client_tool/net_tool.h	/^net_tool_get_if_addr(char *if_name, struct sockaddr*);$/;"	p	signature:(char *if_name, struct sockaddr*)
net_tool_get_if_addr	net_tool.c	/^int net_tool_get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
net_tool_get_if_addr	net_tool.h	/^net_tool_get_if_addr(char *if_name, struct sockaddr*);$/;"	p	signature:(char *if_name, struct sockaddr*)
net_tool_get_if_addr	vppnconfig/net_tool.c	/^int net_tool_get_if_addr(char *if_name, struct sockaddr *sock)$/;"	f	signature:(char *if_name, struct sockaddr *sock)
net_tool_get_if_addr	vppnconfig/net_tool.h	/^net_tool_get_if_addr(char *if_name, struct sockaddr*);$/;"	p	signature:(char *if_name, struct sockaddr*)
net_tool_get_if_hwaddr	cgi/net_tool.c	/^int net_tool_get_if_hwaddr(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	cgi/net_tool.h	/^net_tool_get_if_hwaddr(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	client_tool/net_tool.c	/^int net_tool_get_if_hwaddr(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	client_tool/net_tool.h	/^net_tool_get_if_hwaddr(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	net_tool.c	/^int net_tool_get_if_hwaddr(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	net_tool.h	/^net_tool_get_if_hwaddr(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	vppnconfig/net_tool.c	/^int net_tool_get_if_hwaddr(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_hwaddr	vppnconfig/net_tool.h	/^net_tool_get_if_hwaddr(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_ip	cgi/net_tool.c	/^int net_tool_get_if_ip(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_ip	cgi/net_tool.h	/^net_tool_get_if_ip(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_ip	client_tool/net_tool.c	/^int net_tool_get_if_ip(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_ip	client_tool/net_tool.h	/^net_tool_get_if_ip(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_ip	net_tool.c	/^int net_tool_get_if_ip(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_ip	net_tool.h	/^net_tool_get_if_ip(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_ip	vppnconfig/net_tool.c	/^int net_tool_get_if_ip(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_ip	vppnconfig/net_tool.h	/^net_tool_get_if_ip(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	cgi/net_tool.c	/^int net_tool_get_if_netmask(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	cgi/net_tool.h	/^net_tool_get_if_netmask(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	client_tool/net_tool.c	/^int net_tool_get_if_netmask(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	client_tool/net_tool.h	/^net_tool_get_if_netmask(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	net_tool.c	/^int net_tool_get_if_netmask(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_netmask	net_tool.h	/^net_tool_get_if_netmask(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	cgi/net_tool.c	/^int net_tool_get_if_subnet(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	cgi/net_tool.h	/^net_tool_get_if_subnet(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	client_tool/net_tool.c	/^int net_tool_get_if_subnet(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	client_tool/net_tool.h	/^net_tool_get_if_subnet(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	net_tool.c	/^int net_tool_get_if_subnet(char *if_name, char *buf)$/;"	f	signature:(char *if_name, char *buf)
net_tool_get_if_subnet	net_tool.h	/^net_tool_get_if_subnet(char *if_name, char *buf);$/;"	p	signature:(char *if_name, char *buf)
net_tool_http_client	cgi/net_tool.c	/^char *net_tool_http_client(char *host, int port, char *uri, char *body, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, char *body, int *recv_len)
net_tool_http_client	client_tool/net_tool.c	/^char *net_tool_http_client(char *host, int port, char *uri, char *body, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, char *body, int *recv_len)
net_tool_http_client	net_tool.c	/^char *net_tool_http_client(char *host, int port, char *uri, char *body, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, char *body, int *recv_len)
net_tool_http_client	vppnconfig/net_tool.c	/^char *net_tool_http_client(char *host, int port, char *uri, char *body, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, char *body, int *recv_len)
net_tool_http_client2	net_tool.c	/^char *net_tool_http_client2(int method, char *host, int port, char *uri, char *body, int body_len, char* header, int *recv_len)$/;"	f	signature:(int method, char *host, int port, char *uri, char *body, int body_len, char* header, int *recv_len)
net_tool_http_client2	net_tool.h	/^char *net_tool_http_client2(int method, char *host, int port, char *uri, char *body, int body_len, char* header, int *recv_len);$/;"	p	signature:(int method, char *host, int port, char *uri, char *body, int body_len, char* header, int *recv_len)
net_tool_http_client_raw	cgi/net_tool.c	/^char *net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	cgi/net_tool.h	/^net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	client_tool/net_tool.c	/^char *net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	client_tool/net_tool.h	/^net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	net_tool.c	/^char *net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	net_tool.h	/^net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	vppnconfig/net_tool.c	/^char *net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_client_raw	vppnconfig/net_tool.h	/^net_tool_http_client_raw(char *host, int port, char *uri, void *body, int body_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *uri, void *body, int body_len, int *recv_len)
net_tool_http_json_client	cgi/net_tool.c	/^cJSON *net_tool_http_json_client(char *host, int port, char *uri, cJSON *req)$/;"	f	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	cgi/net_tool.h	/^net_tool_http_json_client(char *host, int port, char *uri, cJSON *req);$/;"	p	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	client_tool/net_tool.c	/^cJSON *net_tool_http_json_client(char *host, int port, char *uri, cJSON *req)$/;"	f	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	client_tool/net_tool.h	/^net_tool_http_json_client(char *host, int port, char *uri, cJSON *req);$/;"	p	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	net_tool.c	/^cJSON *net_tool_http_json_client(char *host, int port, char *uri, cJSON *req)$/;"	f	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	net_tool.h	/^net_tool_http_json_client(char *host, int port, char *uri, cJSON *req);$/;"	p	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	vppnconfig/net_tool.c	/^cJSON *net_tool_http_json_client(char *host, int port, char *uri, cJSON *req)$/;"	f	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client	vppnconfig/net_tool.h	/^net_tool_http_json_client(char *host, int port, char *uri, cJSON *req);$/;"	p	signature:(char *host, int port, char *uri, cJSON *req)
net_tool_http_json_client2	net_tool.c	/^cJSON* net_tool_http_json_client2(int method, char *host, int port, char *uri, cJSON* req, char* header)$/;"	f	signature:(int method, char *host, int port, char *uri, cJSON* req, char* header)
net_tool_http_json_client2	net_tool.h	/^cJSON* net_tool_http_json_client2(int method, char *host, int port, char *uri, cJSON* req, char* header);$/;"	p	signature:(int method, char *host, int port, char *uri, cJSON* req, char* header)
net_tool_ip_to_subnet	net_tool.c	/^int net_tool_ip_to_subnet(char *ip, int mask_num, char *out)$/;"	f	signature:(char *ip, int mask_num, char *out)
net_tool_ip_to_subnet	net_tool.h	/^int net_tool_ip_to_subnet(char *ip, int mask_num, char *out);$/;"	p	signature:(char *ip, int mask_num, char *out)
net_tool_netmask_to_num	net_tool.c	/^uint32_t net_tool_netmask_to_num(char *netmask)$/;"	f	signature:(char *netmask)
net_tool_netmask_to_num	net_tool.h	/^uint32_t net_tool_netmask_to_num(char *netmask);$/;"	p	signature:(char *netmask)
net_tool_num_to_netmask	net_tool.c	/^int net_tool_num_to_netmask(int num, char* out)$/;"	f	signature:(int num, char* out)
net_tool_num_to_netmask	net_tool.h	/^int net_tool_num_to_netmask(int num, char* out);$/;"	p	signature:(int num, char* out)
net_tool_ping_host	cgi/net_tool.c	/^double net_tool_ping_host(const char* host, int timeout)$/;"	f	signature:(const char* host, int timeout)
net_tool_ping_host	cgi/net_tool.h	/^net_tool_ping_host(const char* host, int timeout);$/;"	p	signature:(const char* host, int timeout)
net_tool_ping_host	client_tool/net_tool.c	/^double net_tool_ping_host(const char* host, int timeout)$/;"	f	signature:(const char* host, int timeout)
net_tool_ping_host	client_tool/net_tool.h	/^net_tool_ping_host(const char* host, int timeout);$/;"	p	signature:(const char* host, int timeout)
net_tool_ping_host	net_tool.c	/^double net_tool_ping_host(const char* host, int timeout)$/;"	f	signature:(const char* host, int timeout)
net_tool_ping_host	net_tool.h	/^net_tool_ping_host(const char* host, int timeout);$/;"	p	signature:(const char* host, int timeout)
net_tool_ping_host	vppnconfig/net_tool.c	/^double net_tool_ping_host(const char* host, int timeout)$/;"	f	signature:(const char* host, int timeout)
net_tool_ping_host	vppnconfig/net_tool.h	/^net_tool_ping_host(const char* host, int timeout);$/;"	p	signature:(const char* host, int timeout)
net_tool_ping_hosts	cgi/net_tool.c	/^void net_tool_ping_hosts(cJSON *hosts, int timeout)$/;"	f	signature:(cJSON *hosts, int timeout)
net_tool_ping_hosts	cgi/net_tool.h	/^net_tool_ping_hosts(cJSON* hosts, int timeout);$/;"	p	signature:(cJSON* hosts, int timeout)
net_tool_ping_hosts	client_tool/net_tool.c	/^void net_tool_ping_hosts(cJSON *hosts, int timeout)$/;"	f	signature:(cJSON *hosts, int timeout)
net_tool_ping_hosts	client_tool/net_tool.h	/^net_tool_ping_hosts(cJSON* hosts, int timeout);$/;"	p	signature:(cJSON* hosts, int timeout)
net_tool_ping_hosts	net_tool.c	/^void net_tool_ping_hosts(cJSON *hosts, int timeout)$/;"	f	signature:(cJSON *hosts, int timeout)
net_tool_ping_hosts	net_tool.h	/^net_tool_ping_hosts(cJSON* hosts, int timeout);$/;"	p	signature:(cJSON* hosts, int timeout)
net_tool_ping_hosts2	cgi/net_tool.c	/^void net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout)$/;"	f	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_ping_hosts2	cgi/net_tool.h	/^net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout);$/;"	p	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_ping_hosts2	client_tool/net_tool.c	/^void net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout)$/;"	f	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_ping_hosts2	client_tool/net_tool.h	/^net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout);$/;"	p	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_ping_hosts2	net_tool.c	/^void net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout)$/;"	f	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_ping_hosts2	net_tool.h	/^net_tool_ping_hosts2(cJSON *hosts, char *ip_name, char*latency_name, int timeout);$/;"	p	signature:(cJSON *hosts, char *ip_name, char*latency_name, int timeout)
net_tool_reset_routes	cgi/net_tool.c	/^void net_tool_reset_routes(char *dev)$/;"	f	signature:(char *dev)
net_tool_reset_routes	cgi/net_tool.h	/^net_tool_reset_routes(char *dev);$/;"	p	signature:(char *dev)
net_tool_reset_routes	client_tool/net_tool.c	/^void net_tool_reset_routes(char *dev)$/;"	f	signature:(char *dev)
net_tool_reset_routes	client_tool/net_tool.h	/^net_tool_reset_routes(char *dev);$/;"	p	signature:(char *dev)
net_tool_reset_routes	net_tool.c	/^void net_tool_reset_routes(char *dev)$/;"	f	signature:(char *dev)
net_tool_reset_routes	net_tool.h	/^net_tool_reset_routes(char *dev);$/;"	p	signature:(char *dev)
net_tool_reset_routes	vppnconfig/net_tool.c	/^void net_tool_reset_routes(char *dev)$/;"	f	signature:(char *dev)
net_tool_reset_routes	vppnconfig/net_tool.h	/^net_tool_reset_routes(char *dev);$/;"	p	signature:(char *dev)
net_tool_tcp_client	cgi/net_tool.c	/^char *net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	cgi/net_tool.h	/^net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	client_tool/net_tool.c	/^char *net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	client_tool/net_tool.h	/^net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	net_tool.c	/^char *net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	net_tool.h	/^net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	vppnconfig/net_tool.c	/^char *net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len)$/;"	f	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_client	vppnconfig/net_tool.h	/^net_tool_tcp_client(char *host, int port, char *send_buf, int send_len, int *recv_len);$/;"	p	signature:(char *host, int port, char *send_buf, int send_len, int *recv_len)
net_tool_tcp_json_client	cgi/net_tool.c	/^cJSON *net_tool_tcp_json_client(char *host, int port, cJSON *req)$/;"	f	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	cgi/net_tool.h	/^net_tool_tcp_json_client(char *host, int port, cJSON *req);$/;"	p	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	client_tool/net_tool.c	/^cJSON *net_tool_tcp_json_client(char *host, int port, cJSON *req)$/;"	f	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	client_tool/net_tool.h	/^net_tool_tcp_json_client(char *host, int port, cJSON *req);$/;"	p	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	net_tool.c	/^cJSON *net_tool_tcp_json_client(char *host, int port, cJSON *req)$/;"	f	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	net_tool.h	/^net_tool_tcp_json_client(char *host, int port, cJSON *req);$/;"	p	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	vppnconfig/net_tool.c	/^cJSON *net_tool_tcp_json_client(char *host, int port, cJSON *req)$/;"	f	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client	vppnconfig/net_tool.h	/^net_tool_tcp_json_client(char *host, int port, cJSON *req);$/;"	p	signature:(char *host, int port, cJSON *req)
net_tool_tcp_json_client_with_size	cgi/net_tool.c	/^cJSON *net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size)$/;"	f	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_json_client_with_size	cgi/net_tool.h	/^net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size);$/;"	p	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_json_client_with_size	client_tool/net_tool.c	/^cJSON *net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size)$/;"	f	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_json_client_with_size	client_tool/net_tool.h	/^net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size);$/;"	p	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_json_client_with_size	net_tool.c	/^cJSON *net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size)$/;"	f	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_json_client_with_size	net_tool.h	/^net_tool_tcp_json_client_with_size(char *host, int port, cJSON *req, char *prefix, int prefix_size);$/;"	p	signature:(char *host, int port, cJSON *req, char *prefix, int prefix_size)
net_tool_tcp_port_reachable	net_tool.c	/^int net_tool_tcp_port_reachable(char *host, int port)$/;"	f	signature:(char *host, int port)
net_tool_tcp_port_reachable	net_tool.h	/^int net_tool_tcp_port_reachable(char *host, int port);$/;"	p	signature:(char *host, int port)
netip	cgi/net_tool.c	/^	unsigned char netip[4];$/;"	l
netip	client_tool/net_tool.c	/^	unsigned char netip[4];$/;"	l
netip	net_tool.c	/^	unsigned char netip[4];$/;"	l
netmask_buf	main.c	/^							char netmask_buf[40];$/;"	l
netmask_buf	main.c	/^	char netmask_buf[100];$/;"	l
netmask_num	main.c	/^	int netmask_num = 28;$/;"	l
network_part	cgi/net_tool.c	/^	struct sockaddr_in *network_part = (struct sockaddr_in *)ip;;$/;"	l
network_part	client_tool/net_tool.c	/^	struct sockaddr_in *network_part = (struct sockaddr_in *)ip;;$/;"	l
network_part	net_tool.c	/^	struct in_addr *network_part = ip;;$/;"	l
network_part_len	cgi/net_tool.c	/^	int network_part_len = 0;$/;"	l
network_part_len	client_tool/net_tool.c	/^	int network_part_len = 0;$/;"	l
network_part_len	net_tool.c	/^	int network_part_len = 0;$/;"	l
network_part_len_buf	cgi/net_tool.c	/^	char network_part_len_buf[10];$/;"	l
network_part_len_buf	client_tool/net_tool.c	/^	char network_part_len_buf[10];$/;"	l
network_part_len_buf	net_tool.c	/^	char network_part_len_buf[10];$/;"	l
new_arr	main.c	/^	cJSON* new_arr = cJSON_CreateArray();$/;"	l
new_array	vppnconfig/main.c	/^	cJSON *new_array = parse_tunnel_vpath(new_conf, conf_type);$/;"	l
new_attach	attachdevice.c	/^		char *new_attach = process_tool_run_cmd("soap-tool get_attachdevice");$/;"	l
new_cnt	ctrl_server_json.c	/^	int new_cnt = cJSON_GetArraySize(new_peers);$/;"	l
new_cnt	vppnconfig/main.c	/^	int new_cnt = cJSON_GetArraySize(new);$/;"	l
new_conf	vppnconfig/main.c	/^	char *new_conf = GetConfig(new_peers_conf);$/;"	l
new_conf	vppnconfig/main.c	/^	char *new_conf = NULL;$/;"	l
new_conf_array	vppnconfig/main.c	/^	cJSON *new_conf_array = parse_tunnel_peers(new_conf);$/;"	l
new_item	cJSON.c	/^		cJSON *new_item;$/;"	l
new_item	cgi/cJSON.c	/^		cJSON *new_item;$/;"	l
new_item	client_tool/cJSON.c	/^		cJSON *new_item;$/;"	l
new_item	ctrl_server_json.c	/^		cJSON *new_item = cJSON_GetArrayItem(new_peers, i);$/;"	l
new_item	main.c	/^				cJSON* new_item = cJSON_CreateObject();$/;"	l
new_item	vppnconfig/cJSON.c	/^		cJSON *new_item;$/;"	l
new_item	vppnconfig/main.c	/^		cJSON *new_item = cJSON_CreateObject();$/;"	l
new_item	vppnconfig/main.c	/^		cJSON *new_item = cJSON_GetArrayItem(new, i);$/;"	l
new_obj	bird_conf.c	/^					cJSON *new_obj = cJSON_CreateObject();$/;"	l
new_obj	ctrl-interface.c	/^		cJSON *new_obj = NULL;$/;"	l
new_obj	ctrl_server_json.c	/^				cJSON *new_obj = cJSON_CreateObject();$/;"	l
new_obj	ctrl_server_json.c	/^			cJSON* new_obj = cJSON_CreateObject();$/;"	l
new_obj1	vppnconfig/main.c	/^			cJSON * new_obj1 = cJSON_CreateObject();$/;"	l
new_obj2	vppnconfig/main.c	/^			cJSON * new_obj2 = cJSON_CreateObject();$/;"	l
new_peer	ctrl_server_json.c	/^		cJSON *new_peer = cJSON_CreateObject();$/;"	l
new_peers	vppnconfig/main.c	/^	cJSON *new_peers = cJSON_CreateArray();$/;"	l
new_peers_conf	vppnconfig/main.c	/^	char new_peers_conf[100];$/;"	l
new_peers_file	vppnconfig/main.c	/^	char new_peers_file[100];$/;"	l
new_request	ctrl_server.c	/^ctrl_request_t *new_request()$/;"	f
new_str_len	process_tool.c	/^		int new_str_len = strlen(line_buf) + old_str_len;$/;"	l
new_temp_peers_conf	bird_conf.c	/^void new_temp_peers_conf(cJSON *peers, int tunnel_id)$/;"	f	signature:(cJSON *peers, int tunnel_id)
new_vpath	ctrl_server_json.c	/^				cJSON *new_vpath = cJSON_CreateObject();$/;"	l
new_vpath	ctrl_server_json.c	/^			cJSON *new_vpath = cJSON_CreateObject();$/;"	l
new_vpath	vppnconfig/main.c	/^		cJSON *new_vpath = read_json_from_file(new_vpath_file);$/;"	l
new_vpath_conf	vppnconfig/main.c	/^	char new_vpath_conf[100];$/;"	l
new_vpath_file	vppnconfig/main.c	/^	char new_vpath_file[100];$/;"	l
new_vpn_jsonreq	ctrl_server_json.c	/^cJSON *new_vpn_jsonreq(ctrl_request_t *request)$/;"	f	signature:(ctrl_request_t *request)
new_vpn_jsonreq	ctrl_server_json.h	/^cJSON *new_vpn_jsonreq(ctrl_request_t *request);$/;"	p	signature:(ctrl_request_t *request)
new_vpn_peers	ctrl_server_json.c	/^	cJSON *new_vpn_peers = json_get_vpn_peers();$/;"	l
newbuffer	cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newbuffer	cgi/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newbuffer	client_tool/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newbuffer	vppnconfig/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newchild	cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newchild	cgi/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newchild	client_tool/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newchild	vppnconfig/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newitem	cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newitem	cgi/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newitem	client_tool/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newitem	vppnconfig/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
newsize	cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newsize	cgi/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newsize	client_tool/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
newsize	vppnconfig/cJSON.c	/^	char *newbuffer;int newsize;$/;"	l
next	cJSON.c	/^	cJSON *next;$/;"	l
next	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
next	cgi/cJSON.c	/^	cJSON *next;$/;"	l
next	cgi/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
next	cgi/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
next	client_tool/cJSON.c	/^	cJSON *next;$/;"	l
next	client_tool/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
next	client_tool/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
next	net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
next	vppnconfig/cJSON.c	/^	cJSON *next;$/;"	l
next	vppnconfig/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON	access:public
next	vppnconfig/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
nid	attachdevice.c	/^	pthread_t nid;$/;"	l
nid	ctrl_server_json.c	/^	pthread_t nid;$/;"	l
nleft	cgi/net_tool.c	/^    int nleft=len;$/;"	l
nleft	client_tool/net_tool.c	/^    int nleft=len;$/;"	l
nleft	net_tool.c	/^    int nleft=len;$/;"	l
nleft	vppnconfig/net_tool.c	/^    int nleft=len;$/;"	l
node	cJSON.c	/^	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));$/;"	l
node	cgi/cJSON.c	/^	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));$/;"	l
node	client_tool/cJSON.c	/^	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));$/;"	l
node	vppnconfig/cJSON.c	/^	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));$/;"	l
node_item	ctrl_server_json.c	/^				cJSON* node_item = NULL;$/;"	l
node_state	ctrl_server_json.c	/^			node_status_t node_state;$/;"	l
node_status_t	ctrl_server_json.c	/^typedef struct node_status_t {$/;"	s	file:
node_status_t	ctrl_server_json.c	/^} node_status_t;$/;"	t	typeref:struct:node_status_t	file:
node_status_t::has_address	ctrl_server_json.c	/^    unsigned int has_address:1;     \/* 1 if we know an external address for this node *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::indirect	ctrl_server_json.c	/^    unsigned int indirect:1;                \/* 1 if this node is not directly reachable by us *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::reachable	ctrl_server_json.c	/^    unsigned int reachable:1;               \/* 1 if this node is reachable in the graph *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::send_locally	ctrl_server_json.c	/^    unsigned int send_locally:1;        \/* 1 if the next UDP packet should be sent on the local network *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::sptps	ctrl_server_json.c	/^    unsigned int sptps:1;                   \/* 1 if this node supports SPTPS *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::udp_confirmed	ctrl_server_json.c	/^    unsigned int udp_confirmed:1;           \/* 1 if the address is one that we received UDP traffic on *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::udppacket	ctrl_server_json.c	/^    unsigned int udppacket:1;       \/* 1 if the most recently received packet was UDP *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::unused	ctrl_server_json.c	/^    unsigned int unused:20;$/;"	m	struct:node_status_t	file:	access:public
node_status_t::unused_active	ctrl_server_json.c	/^    unsigned int unused_active:1;           \/* 1 if active (not used for nodes) *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::validkey	ctrl_server_json.c	/^    unsigned int validkey:1;                \/* 1 if we currently have a valid key for him *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::validkey_in	ctrl_server_json.c	/^    unsigned int validkey_in:1;     \/* 1 if we have sent a valid key to him *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::visited	ctrl_server_json.c	/^    unsigned int visited:1;                 \/* 1 if this node has been visited by one of the graph algorithms *\/$/;"	m	struct:node_status_t	file:	access:public
node_status_t::waitingforkey	ctrl_server_json.c	/^    unsigned int waitingforkey:1;           \/* 1 if we already sent out a request *\/$/;"	m	struct:node_status_t	file:	access:public
nodes	ctrl_server_json.c	/^	cJSON* nodes = NULL;$/;"	l
now	timer_tool.c	/^    struct timeval now, res;$/;"	l
now	timer_tool.c	/^    struct timeval now;$/;"	l
now_tv	cgi/net_tool.c	/^							struct timeval now_tv;$/;"	l
now_tv	cgi/net_tool.c	/^				struct timeval now_tv;$/;"	l
now_tv	client_tool/net_tool.c	/^							struct timeval now_tv;$/;"	l
now_tv	client_tool/net_tool.c	/^				struct timeval now_tv;$/;"	l
now_tv	net_tool.c	/^							struct timeval now_tv;$/;"	l
now_tv	net_tool.c	/^				struct timeval now_tv;$/;"	l
now_tv	vppnconfig/net_tool.c	/^							struct timeval now_tv;$/;"	l
nptr	cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
nptr	cgi/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
nptr	client_tool/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
nptr	vppnconfig/cJSON.c	/^	cJSON *newitem,*cptr,*nptr=0,*newchild;$/;"	l
ntid	main.c	/^		pthread_t ntid;$/;"	l
number	cgi/net_tool.c	/^	long long int number = 0;$/;"	l
number	client_tool/net_tool.c	/^	long long int number = 0;$/;"	l
number	net_tool.c	/^	long long int number = 0;$/;"	l
number	vppnconfig/net_tool.c	/^	long long int number = 0;$/;"	l
numentries	cJSON.c	/^	int numentries=0,fail=0;$/;"	l
numentries	cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
numentries	cgi/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
numentries	cgi/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
numentries	client_tool/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
numentries	client_tool/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
numentries	vppnconfig/cJSON.c	/^	int numentries=0,fail=0;$/;"	l
numentries	vppnconfig/cJSON.c	/^	int numentries=0,i=0,fail=0;$/;"	l
obj	bird_conf.c	/^		cJSON *obj = cJSON_GetArrayItem(peers, i);$/;"	l
obj	main.c	/^					cJSON *obj = cJSON_CreateObject();$/;"	l
obj	vppnconfig/bird_conf.c	/^		cJSON *obj = cJSON_GetArrayItem(peer_info_array, i);$/;"	l
obj	vppnconfig/bird_conf.c	/^	cJSON *obj = read_json_from_file("\/etc\/vppn_custom.conf");$/;"	l
obj	vppnconfig/main.c	/^			cJSON *obj = cJSON_CreateObject();$/;"	l
obj	vppnconfig/main.c	/^			cJSON *obj = cJSON_GetArrayItem(tunnel_vpath, i);$/;"	l
obj	vppnconfig/main.c	/^		cJSON *obj = get_peer_conf(id, i);$/;"	l
obj	vppnconfig/main.c	/^		cJSON *obj = get_vpath_conf(id, i);$/;"	l
obj	vppnconfig/main.c	/^	cJSON *obj = NULL;$/;"	l
obj	vppnconfig/main.c	/^	cJSON *obj = read_json_from_file(conf_manager_file);$/;"	l
obj	vppnconfig/main.c	/^	cJSON *obj = read_json_from_file(conf_tunnel_file);$/;"	l
obj1	vppnconfig/main.c	/^			cJSON *obj1 = cJSON_CreateObject();$/;"	l
obj2	vppnconfig/main.c	/^			cJSON *obj2 = cJSON_CreateObject();$/;"	l
offset	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon3	file:	access:public
offset	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:	access:public
offset	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon2	file:	access:public
offset	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon4	file:	access:public
old_array	vppnconfig/main.c	/^	cJSON *old_array = parse_tunnel_old_vpath(old_conf, conf_type);$/;"	l
old_cnt	ctrl_server_json.c	/^	int old_cnt = cJSON_GetArraySize(old_peers);$/;"	l
old_cnt	vppnconfig/main.c	/^		int old_cnt = cJSON_GetArraySize(old_array);$/;"	l
old_cnt	vppnconfig/main.c	/^	int old_cnt = cJSON_GetArraySize(old);$/;"	l
old_conf	vppnconfig/main.c	/^	char *old_conf = GetConfig(old_peers_conf);$/;"	l
old_conf	vppnconfig/main.c	/^	char *old_conf = NULL;$/;"	l
old_conf_array	vppnconfig/main.c	/^	cJSON *old_conf_array = parse_old_tunnel_peers(old_conf);$/;"	l
old_item	ctrl_server_json.c	/^		cJSON *old_item = cJSON_GetArrayItem(old_peers, i);$/;"	l
old_item	vppnconfig/main.c	/^			cJSON *old_item = cJSON_GetArrayItem(old_array, i);$/;"	l
old_item	vppnconfig/main.c	/^		cJSON *old_item = cJSON_GetArrayItem(old, i);$/;"	l
old_latency_item	ctrl_server_json.c	/^	cJSON *old_latency_item = cJSON_GetObjectItem(old_item, "peer_latency");$/;"	l
old_obj	vppnconfig/main.c	/^			cJSON *old_obj = cJSON_GetArrayItem(old_array, i);$/;"	l
old_peer_server_item	vppnconfig/main.c	/^	cJSON *old_peer_server_item = cJSON_GetObjectItem(old_item, "peer_server");$/;"	l
old_peer_vip_item	vppnconfig/main.c	/^	cJSON *old_peer_vip_item = cJSON_GetObjectItem(old_item, "peer_vip");$/;"	l
old_peers	vppnconfig/main.c	/^	cJSON *old_peers = read_json_from_file(peers_file);$/;"	l
old_peers_conf	vppnconfig/main.c	/^	char old_peers_conf[100];$/;"	l
old_str_len	process_tool.c	/^		int old_str_len = ret?(strlen(ret)):0;$/;"	l
old_uri_item	vppnconfig/main.c	/^	cJSON *old_uri_item = cJSON_GetObjectItem(old_item, "uri");$/;"	l
old_vip_item	ctrl_server_json.c	/^	cJSON *old_vip_item = cJSON_GetObjectItem(old_item, "peer_vip");$/;"	l
old_vpath	vppnconfig/main.c	/^		cJSON *old_vpath = read_json_from_file(old_vpath_file);$/;"	l
old_vpath_conf	vppnconfig/main.c	/^	char old_vpath_conf[100];$/;"	l
old_vpath_file	vppnconfig/main.c	/^	char old_vpath_file[100];$/;"	l
old_vproxy_item	vppnconfig/main.c	/^	cJSON *old_vproxy_item = cJSON_GetObjectItem(old_item, "vproxy");$/;"	l
on	ctrl-interface.c	/^	int on = 0;$/;"	l
on	ctrl_server_json.c	/^	int on = dump_config->tunnel.tunnel_on;$/;"	l
on_item	ctrl-interface.c	/^		cJSON *on_item = cJSON_GetObjectItem(switch_json, "on");$/;"	l
on_item	vpn_config.c	/^				cJSON *on_item = cJSON_GetObjectItem(root, VPN_SWITCH_STR);$/;"	l
on_item	vpn_config.c	/^		cJSON *on_item = cJSON_GetObjectItem(log_obj, "log_on");$/;"	l
on_item	vppnconfig/main.c	/^		cJSON *on_item = cJSON_GetObjectItem(obj, "on");$/;"	l
on_item	vppnconfig/main.c	/^	cJSON *on_item = cJSON_GetObjectItem(conf_json, "on");$/;"	l
one_item	vppnconfig/main.c	/^			cJSON *one_item = cJSON_GetArrayItem(tunnel_vpath, i);$/;"	l
one_neighbor	ctrl-interface.c	/^				cJSON* one_neighbor = cJSON_GetArrayItem(neighbors, i);$/;"	l
one_path	ctrl-interface.c	/^		cJSON *one_path = cJSON_GetArrayItem(vpath, i);$/;"	l
one_route	cgi/net_tool.c	/^			struct route_info *one_route = malloc(sizeof(struct route_info));$/;"	l
one_route	client_tool/net_tool.c	/^			struct route_info *one_route = malloc(sizeof(struct route_info));$/;"	l
one_route	net_tool.c	/^			struct route_info *one_route = malloc(sizeof(struct route_info));$/;"	l
one_route	vppnconfig/net_tool.c	/^			struct route_info *one_route = malloc(sizeof(struct route_info));$/;"	l
one_rule	iptables_tool.c	/^	struct iptables_rule_s one_rule;$/;"	l
optlen	ctrl_server.c	/^		socklen_t optlen = sizeof(struct timeval);$/;"	l
other_item	main.c	/^					cJSON *other_item = cJSON_GetObjectItem(response, "OtherInfo");$/;"	l
other_item	main.c	/^			cJSON *other_item = cJSON_GetObjectItem(response, "OtherInfo");$/;"	l
out	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
out	cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
out	cJSON.c	/^	char *out=0;$/;"	l
out	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
out	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
out	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
out	cgi/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
out	cgi/cJSON.c	/^	char *out=0;$/;"	l
out	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
out	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
out	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
out	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
out	client_tool/cJSON.c	/^	char *out=0;$/;"	l
out	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
out	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
out	iptables_tool.h	/^	char out[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
out	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
out	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
out	vppnconfig/cJSON.c	/^	char *out=0;$/;"	l
out	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
out	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
output_json	cgi/main.c	/^void output_json(cJSON *obj)$/;"	f	signature:(cJSON *obj)
output_json	client_tool/main.c	/^void output_json(cJSON *obj)$/;"	f	signature:(cJSON *obj)
p	cJSON.c	/^	printbuffer p;$/;"	l
p	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cgi/cJSON.c	/^	printbuffer p;$/;"	l
p	cgi/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cgi/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cgi/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	cgi/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	client_tool/cJSON.c	/^	printbuffer p;$/;"	l
p	client_tool/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	client_tool/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	client_tool/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	client_tool/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	vppnconfig/cJSON.c	/^	printbuffer p;$/;"	l
p	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p	vppnconfig/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	l
p2p_array	vppnconfig/main.c	/^		cJSON *p2p_array = cJSON_GetObjectItem(old_peers, "p2p_info");$/;"	l
package	vpn_config.h	/^	struct vpn_package_s	package;$/;"	m	struct:vpn_tunnel_info_s	typeref:struct:vpn_tunnel_info_s::vpn_package_s	access:public
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_array	cgi/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_array	cgi/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_array	client_tool/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_array	client_tool/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_array	vppnconfig/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_array	vppnconfig/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_cmd_args	process_tool.c	/^static int parse_cmd_args(char *cmd, char *ret_args[], int max_args_num)$/;"	f	file:	signature:(char *cmd, char *ret_args[], int max_args_num)
parse_dns_name	cgi/net_tool.c	/^parse_dns_name(unsigned char *chunk , unsigned char *ptr$/;"	p	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_name	cgi/net_tool.c	/^parse_dns_name(unsigned char *chunk$/;"	f	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_name	client_tool/net_tool.c	/^parse_dns_name(unsigned char *chunk , unsigned char *ptr$/;"	p	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_name	client_tool/net_tool.c	/^parse_dns_name(unsigned char *chunk$/;"	f	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_name	net_tool.c	/^parse_dns_name(unsigned char *chunk , unsigned char *ptr$/;"	p	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_name	net_tool.c	/^parse_dns_name(unsigned char *chunk$/;"	f	file:	signature:(unsigned char *chunk , unsigned char *ptr , char *out , int *len)
parse_dns_response	cgi/net_tool.c	/^parse_dns_response(int socketfd);$/;"	p	file:	signature:(int socketfd)
parse_dns_response	cgi/net_tool.c	/^static cJSON *parse_dns_response(int socketfd) {$/;"	f	file:	signature:(int socketfd)
parse_dns_response	client_tool/net_tool.c	/^parse_dns_response(int socketfd);$/;"	p	file:	signature:(int socketfd)
parse_dns_response	client_tool/net_tool.c	/^static cJSON *parse_dns_response(int socketfd) {$/;"	f	file:	signature:(int socketfd)
parse_dns_response	net_tool.c	/^parse_dns_response(int socketfd);$/;"	p	file:	signature:(int socketfd)
parse_dns_response	net_tool.c	/^static cJSON *parse_dns_response(int socketfd) {$/;"	f	file:	signature:(int socketfd)
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:	signature:(const char *str)
parse_hex4	cgi/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:	signature:(const char *str)
parse_hex4	client_tool/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:	signature:(const char *str)
parse_hex4	vppnconfig/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:	signature:(const char *str)
parse_number	cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:	signature:(cJSON *item,const char *num)
parse_number	cgi/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:	signature:(cJSON *item,const char *num)
parse_number	client_tool/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:	signature:(cJSON *item,const char *num)
parse_number	vppnconfig/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:	signature:(cJSON *item,const char *num)
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_object	cgi/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_object	cgi/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_object	client_tool/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_object	client_tool/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_object	vppnconfig/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_object	vppnconfig/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_old_tunnel_peers	vppnconfig/main.c	/^cJSON *parse_old_tunnel_peers(char *ptr)$/;"	f	signature:(char *ptr)
parse_on_rule	iptables_tool.c	/^void parse_on_rule(char *buf, struct iptables_rule_s *rule)$/;"	f	signature:(char *buf, struct iptables_rule_s *rule)
parse_reachable_nodes	ctrl_server_json.c	/^static cJSON* parse_reachable_nodes(char *str)$/;"	f	file:	signature:(char *str)
parse_string	cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:	signature:(cJSON *item,const char *str)
parse_string	cgi/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:	signature:(cJSON *item,const char *str)
parse_string	client_tool/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:	signature:(cJSON *item,const char *str)
parse_string	vppnconfig/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:	signature:(cJSON *item,const char *str)
parse_tunnel_old_vpath	vppnconfig/main.c	/^cJSON *parse_tunnel_old_vpath(char *ptr, int conf_type)$/;"	f	signature:(char *ptr, int conf_type)
parse_tunnel_peers	vppnconfig/main.c	/^cJSON *parse_tunnel_peers(char *ptr)$/;"	f	signature:(char *ptr)
parse_tunnel_vpath	vppnconfig/main.c	/^cJSON *parse_tunnel_vpath(char *ptr, int conf_type)$/;"	f	signature:(char *ptr, int conf_type)
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_value	cgi/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_value	cgi/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_value	client_tool/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_value	client_tool/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
parse_value	vppnconfig/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:	signature:(cJSON *item,const char *value)
parse_value	vppnconfig/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value);$/;"	p	file:	signature:(cJSON *item,const char *value)
path_mode	client_tool/file_tool.c	/^		mode_t path_mode = file_stat.st_mode;$/;"	l
path_mode	file_tool.c	/^		mode_t path_mode = file_stat.st_mode;$/;"	l
path_mode	vppnconfig/file_tool.c	/^		mode_t path_mode = file_stat.st_mode;$/;"	l
payload	cgi/main.c	/^    char *payload = cJSON_Print(obj);$/;"	l
payload	client_tool/main.c	/^    char *payload = cJSON_Print(obj);$/;"	l
peer	bird_conf.c	/^				cJSON *peer = cJSON_GetArrayItem(peers, i);$/;"	l
peer	ctrl_server_json.c	/^	char *peer = peer_item->valuestring;$/;"	l
peer	vppnconfig/main.c	/^				cJSON *peer = cJSON_GetArrayItem(peers, i);$/;"	l
peer	vppnconfig/main.c	/^			cJSON *peer = cJSON_GetArrayItem(peers, i);$/;"	l
peer	vppnconfig/main.c	/^		cJSON *peer = cJSON_GetArrayItem(p2p_array, i);$/;"	l
peer_as	bird_conf.c	/^		int peer_as = peer_vip.s_addr%1022 + 64512;$/;"	l
peer_as	vppnconfig/bird_conf.c	/^		int peer_as = peer_vip.s_addr%1022 + 64512;$/;"	l
peer_cnt	vppnconfig/main.c	/^			int peer_cnt = cJSON_GetArraySize(peers);$/;"	l
peer_cnt	vppnconfig/main.c	/^		int peer_cnt = cJSON_GetArraySize(peers);$/;"	l
peer_cnt	vppnconfig/main.c	/^	int	peer_cnt = get_peer_cnt(id);$/;"	l
peer_conf	vppnconfig/main.c	/^				char *peer_conf = malloc(strlen(peer_vip_item->valuestring) + strlen(peer_server_item->valuestring) + strlen("@") + 1);$/;"	l
peer_conf	vppnconfig/main.c	/^			char *peer_conf = malloc(strlen(peer_vip_item->valuestring) + strlen(peer_server_item->valuestring) + strlen("@") + 1);$/;"	l
peer_info_array	vppnconfig/bird_conf.c	/^	cJSON *peer_info_array = NULL;$/;"	l
peer_item	bird_conf.c	/^		cJSON *peer_item = cJSON_GetObjectItem(obj, "peer_vip");$/;"	l
peer_item	ctrl_server_json.c	/^		cJSON *peer_item = cJSON_GetObjectItem(item, "peer_vip");$/;"	l
peer_item	ctrl_server_json.c	/^	cJSON *peer_item = cJSON_GetObjectItem(jsonreq, "peer");$/;"	l
peer_item	vppnconfig/bird_conf.c	/^		cJSON *peer_item = cJSON_GetObjectItem(obj, "ip");$/;"	l
peer_server	vppnconfig/main.c	/^			char *peer_server = ++separator;$/;"	l
peer_server_item	vppnconfig/main.c	/^				cJSON *peer_server_item = cJSON_GetObjectItem(peer, "peer_teamid");$/;"	l
peer_server_item	vppnconfig/main.c	/^			cJSON *peer_server_item = cJSON_GetObjectItem(peer, "peer_server");$/;"	l
peer_server_item	vppnconfig/main.c	/^		cJSON *peer_server_item = cJSON_GetObjectItem(new_item, "peer_server");$/;"	l
peer_teamid_item	bird_conf.c	/^				cJSON *peer_teamid_item = cJSON_GetObjectItem(peer, "peer_teamid");$/;"	l
peer_vip	bird_conf.c	/^	struct in_addr peer_vip;$/;"	l
peer_vip	vppnconfig/bird_conf.c	/^	struct in_addr peer_vip;$/;"	l
peer_vip	vppnconfig/main.c	/^			char *peer_vip = token;$/;"	l
peer_vip	vppnconfig/main.c	/^		char *peer_vip = ptr;$/;"	l
peer_vip_item	bird_conf.c	/^				cJSON *peer_vip_item = cJSON_GetObjectItem(peer, "peer_vip");$/;"	l
peer_vip_item	ctrl_server_json.c	/^				cJSON *peer_vip_item = cJSON_GetObjectItem(item, "peer_vip");$/;"	l
peer_vip_item	vppnconfig/main.c	/^				cJSON *peer_vip_item = cJSON_GetObjectItem(peer, "peer_vip");$/;"	l
peer_vip_item	vppnconfig/main.c	/^			cJSON *peer_vip_item = cJSON_GetObjectItem(peer, "peer_vip");$/;"	l
peer_vip_item	vppnconfig/main.c	/^		cJSON *peer_vip_item = cJSON_GetObjectItem(new_item, "peer_vip");$/;"	l
peers	bird_conf.c	/^		cJSON *peers = read_json_from_file(conf_peer_file);$/;"	l
peers	bird_conf.c	/^	cJSON *peers = cJSON_CreateArray();$/;"	l
peers	ctrl_server_json.c	/^	cJSON *peers = NULL;$/;"	l
peers	vppnconfig/main.c	/^		cJSON *peers = parse_tunnel_peers(conf_ptr);$/;"	l
peers	vppnconfig/main.c	/^		cJSON *peers =read_json_from_file(conf_peer_file);$/;"	l
peers_cnt	ctrl_server_json.c	/^		int peers_cnt = cJSON_GetArraySize(peers_json);$/;"	l
peers_conf_file	ctrl_server_json.c	/^	char peers_conf_file[100];$/;"	l
peers_file	ctrl-interface.c	/^	char peers_file[100];$/;"	l
peers_file	main.c	/^	char peers_file[100];$/;"	l
peers_file	vppnconfig/main.c	/^	char peers_file[100] = "\/etc\/site\/bird_info.txt";$/;"	l
peers_item	ctrl_server_json.c	/^	cJSON *peers_item = cJSON_GetObjectItem(tunnel_status_item, "peers");$/;"	l
peers_json	ctrl_server_json.c	/^	cJSON *peers_json = read_json_from_file(peers_conf_file);$/;"	l
pid	cgi/net_tool.c	/^				pid_t pid;$/;"	l
pid	cgi/net_tool.c	/^			pid_t pid;$/;"	l
pid	cgi/net_tool.c	/^	pid_t pid = getpid();$/;"	l
pid	client_tool/net_tool.c	/^				pid_t pid;$/;"	l
pid	client_tool/net_tool.c	/^			pid_t pid;$/;"	l
pid	client_tool/net_tool.c	/^	pid_t pid = getpid();$/;"	l
pid	main.c	/^	int pid = get_ctrl_pid(tunnel_id, conf_type);$/;"	l
pid	main.c	/^	int pid = get_peervpn_pid(tunnel_id, conf_type);$/;"	l
pid	main.c	/^	int pid = get_tinc_pid(tunnel_id, conf_type);$/;"	l
pid	main.c	/^	int pid = process_tool_ps("peervpn", match_str);$/;"	l
pid	main.c	/^	pid_t pid; $/;"	l
pid	net_tool.c	/^				pid_t pid;$/;"	l
pid	net_tool.c	/^			pid_t pid;$/;"	l
pid	net_tool.c	/^	pid_t pid = getpid();$/;"	l
pid	process_tool.c	/^	int pid = process_tool_ps(program_name, match_str);$/;"	l
pid	process_tool.c	/^            pid_t pid = fork();$/;"	l
pid	vppnconfig/net_tool.c	/^			pid_t pid;$/;"	l
pid_file	main.c	/^	char pid_file[200];$/;"	l
pid_str	main.c	/^	char pid_str[200];$/;"	l
ping	cgi/net_tool.c	/^double ping(struct in_addr *dstip, int timeout)$/;"	f	signature:(struct in_addr *dstip, int timeout)
ping	client_tool/net_tool.c	/^double ping(struct in_addr *dstip, int timeout)$/;"	f	signature:(struct in_addr *dstip, int timeout)
ping	net_tool.c	/^double ping(struct in_addr *dstip, int timeout)$/;"	f	signature:(struct in_addr *dstip, int timeout)
ping	vppnconfig/net_tool.c	/^double ping(struct in_addr *dstip, int timeout)$/;"	f	signature:(struct in_addr *dstip, int timeout)
ping_status	main.c	/^						double ping_status = vpn_tunnel_latency(&config->tunnel);$/;"	l
ping_time	main.c	/^	double ping_time = 0.0;$/;"	l
ping_timer	main.c	/^	Timer ping_timer;$/;"	l
pkt_tv	cgi/net_tool.c	/^							struct timeval *pkt_tv;$/;"	l
pkt_tv	cgi/net_tool.c	/^				struct timeval *pkt_tv;$/;"	l
pkt_tv	client_tool/net_tool.c	/^							struct timeval *pkt_tv;$/;"	l
pkt_tv	client_tool/net_tool.c	/^				struct timeval *pkt_tv;$/;"	l
pkt_tv	net_tool.c	/^							struct timeval *pkt_tv;$/;"	l
pkt_tv	net_tool.c	/^				struct timeval *pkt_tv;$/;"	l
pkt_tv	vppnconfig/net_tool.c	/^							struct timeval *pkt_tv;$/;"	l
port	ctrl_server.c	/^	u_short port;$/;"	m	struct:ctrl_addr_s	file:	access:public
port	vppnconfig/main.c	/^	char *port = GetConfig(conf_manager_port);$/;"	l
port_content	main.c	/^	char port_content[400];$/;"	l
port_item	ctrl_server_json.c	/^	cJSON *port_item = cJSON_GetObjectItem(jsonreq, "cloud_port");$/;"	l
port_item	vpn_config.c	/^				cJSON *port_item = cJSON_GetObjectItem(root, "cloud_port");$/;"	l
port_item	vppnconfig/main.c	/^		cJSON *port_item = cJSON_GetObjectItem(obj, CLOUD_PORT);$/;"	l
port_num	vppnconfig/main.c	/^			int port_num = atoi(port);$/;"	l
pos	cgi/net_tool.c	/^	char *pos = out + (*len);$/;"	l
pos	cgi/net_tool.c	/^	char *pos;$/;"	l
pos	client_tool/net_tool.c	/^	char *pos = out + (*len);$/;"	l
pos	client_tool/net_tool.c	/^	char *pos;$/;"	l
pos	ctrl_server_json.c	/^			int pos = find_vpath(vpath_json, gw, uri, teamid_item->valuestring);$/;"	l
pos	ctrl_server_json.c	/^		int pos = find_vpath(vpath_json, gw, uri, teamid_item->valuestring);$/;"	l
pos	ctrl_server_json.c	/^	int pos = find_peer(peers_json, peer, server);$/;"	l
pos	net_tool.c	/^	char *pos = out + (*len);$/;"	l
pos	net_tool.c	/^	char *pos;$/;"	l
pow2gt	cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:	signature:(int x)
pow2gt	cgi/cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:	signature:(int x)
pow2gt	client_tool/cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:	signature:(int x)
pow2gt	vppnconfig/cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:	signature:(int x)
prefix_line	my_debug.c	/^		char *prefix_line = NULL;$/;"	l
preload_7800_old_peers	vppnconfig/main.c	/^void preload_7800_old_peers()$/;"	f
preload_7800_old_tunnel_peers	vppnconfig/main.c	/^void preload_7800_old_tunnel_peers(cJSON *p2p_array, int tunnel_id)$/;"	f	signature:(cJSON *p2p_array, int tunnel_id)
preload_7800_old_tunnel_vpath	vppnconfig/main.c	/^void preload_7800_old_tunnel_vpath(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
preload_7800_old_vpaths	vppnconfig/main.c	/^void preload_7800_old_vpaths(int conf_type)$/;"	f	signature:(int conf_type)
preload_non_7800_old_peers	vppnconfig/main.c	/^void preload_non_7800_old_peers()$/;"	f
preload_non_7800_old_tunnel_peers	vppnconfig/main.c	/^void preload_non_7800_old_tunnel_peers(int tunnel_id)$/;"	f	signature:(int tunnel_id)
preload_non_7800_old_tunnel_vpath	vppnconfig/main.c	/^void preload_non_7800_old_tunnel_vpath(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
preload_non_7800_old_vpaths	vppnconfig/main.c	/^void preload_non_7800_old_vpaths(int conf_type)$/;"	f	signature:(int conf_type)
preload_old_peers	vppnconfig/main.c	/^void preload_old_peers()$/;"	f
preload_old_vpath	vppnconfig/main.c	/^void preload_old_vpath(int conf_type)$/;"	f	signature:(int conf_type)
prev	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
prev	cgi/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
prev	client_tool/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
prev	vppnconfig/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::	access:public
prikey_item	main.c	/^				cJSON *prikey_item = cJSON_GetObjectItem(response, "PrivKey");$/;"	l
printUsage	vpn_config.c	/^void printUsage()$/;"	f
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	cgi/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	cgi/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	client_tool/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	client_tool/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	vppnconfig/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_array	vppnconfig/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_number	cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_number	cgi/cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_number	client_tool/cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_number	vppnconfig/cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	cgi/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	cgi/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	client_tool/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	client_tool/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	vppnconfig/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_object	vppnconfig/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_string	cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_string	cgi/cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_string	client_tool/cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_string	vppnconfig/cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:	signature:(cJSON *item,printbuffer *p)
print_string_ptr	cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:	signature:(const char *str,printbuffer *p)
print_string_ptr	cgi/cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:	signature:(const char *str,printbuffer *p)
print_string_ptr	client_tool/cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:	signature:(const char *str,printbuffer *p)
print_string_ptr	vppnconfig/cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:	signature:(const char *str,printbuffer *p)
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	cgi/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	cgi/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	client_tool/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	client_tool/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	vppnconfig/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
print_value	vppnconfig/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);$/;"	p	file:	signature:(cJSON *item,int depth,int fmt,printbuffer *p)
printbuffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon3	file:
printbuffer	cgi/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon1	file:
printbuffer	client_tool/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon2	file:
printbuffer	vppnconfig/cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon4	file:
process_tool_kill	process_tool.c	/^void process_tool_kill(char *program_name, char *match_str, int sig)$/;"	f	signature:(char *program_name, char *match_str, int sig)
process_tool_kill	process_tool.h	/^void process_tool_kill(char *program_name, char *match_str, int sig);$/;"	p	signature:(char *program_name, char *match_str, int sig)
process_tool_ps	process_tool.c	/^int process_tool_ps(char *program_name, char *match_str)$/;"	f	signature:(char *program_name, char *match_str)
process_tool_ps	process_tool.h	/^int process_tool_ps(char *program_name, char *match_str);$/;"	p	signature:(char *program_name, char *match_str)
process_tool_run_cmd	process_tool.c	/^char *process_tool_run_cmd(char *cmd_buf)$/;"	f	signature:(char *cmd_buf)
process_tool_run_cmd	process_tool.h	/^char *process_tool_run_cmd(char *cmd_buf);$/;"	p	signature:(char *cmd_buf)
process_tool_system	process_tool.c	/^int process_tool_system(const char *cmd)$/;"	f	signature:(const char *cmd)
process_tool_system	process_tool.h	/^int process_tool_system(const char *cmd);$/;"	p	signature:(const char *cmd)
proxy	vppnconfig/main.c	/^			char *proxy = NULL;$/;"	l
proxy	vppnconfig/main.c	/^	char *proxy = NULL;$/;"	l
proxyIp_item	main.c	/^					cJSON* proxyIp_item = cJSON_GetObjectItem(response, "proxyIp");$/;"	l
proxy_host	ctrl-interface.h	/^	char proxy_host[MAX_IP_BUF_LEN];$/;"	m	struct:ctrl_proxy_status_s	access:public
proxy_item	ctrl-interface.c	/^		cJSON *proxy_item = cJSON_GetObjectItem(one_path, "vproxy");$/;"	l
proxy_item	vppnconfig/main.c	/^			cJSON *proxy_item = cJSON_GetObjectItem(one_item, "vproxy");$/;"	l
proxy_item	vppnconfig/main.c	/^	cJSON *proxy_item = cJSON_GetObjectItem(obj, "vproxy");$/;"	l
proxy_latency	ctrl-interface.h	/^	double proxy_latency;$/;"	m	struct:ctrl_proxy_status_s	access:public
proxy_port	ctrl-interface.h	/^	int  proxy_port;$/;"	m	struct:ctrl_proxy_status_s	access:public
pthread_self	attachdevice.c	/^	pthread_detach(pthread_self());$/;"	p	file:
pthread_self	ctrl_server_json.c	/^	pthread_detach(pthread_self());$/;"	p	file:
pthread_self	main.c	/^	pthread_detach(pthread_self());$/;"	p	file:
ptr	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ptr	cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ptr	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ptr	cgi/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ptr	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr	cgi/net_tool.c	/^			char *ptr = strstr(response, "\\r\\n\\r\\n");$/;"	l
ptr	cgi/net_tool.c	/^	struct sockaddr_in *ptr = (struct sockaddr_in *)&ip_addr;$/;"	l
ptr	cgi/net_tool.c	/^	unsigned char *ptr = buf;$/;"	l
ptr	cgi/net_tool.c	/^	unsigned char *ptr = request;$/;"	l
ptr	cgi/net_tool.c	/^	unsigned char *ptr;$/;"	l
ptr	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ptr	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ptr	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr	client_tool/file_tool.c	/^	cJSON *ptr = NULL;$/;"	l
ptr	client_tool/net_tool.c	/^			char *ptr = strstr(response, "\\r\\n\\r\\n");$/;"	l
ptr	client_tool/net_tool.c	/^	struct sockaddr_in *ptr = (struct sockaddr_in *)&ip_addr;$/;"	l
ptr	client_tool/net_tool.c	/^	unsigned char *ptr = buf;$/;"	l
ptr	client_tool/net_tool.c	/^	unsigned char *ptr = request;$/;"	l
ptr	client_tool/net_tool.c	/^	unsigned char *ptr;$/;"	l
ptr	ctrl-interface.c	/^		char *ptr = cJSON_Print(json);$/;"	l
ptr	ctrl_server_json.c	/^	char *ptr = NULL;$/;"	l
ptr	file_tool.c	/^	cJSON *ptr = NULL;$/;"	l
ptr	net_tool.c	/^			char *ptr = strstr(response, "\\r\\n\\r\\n");$/;"	l
ptr	net_tool.c	/^		char *ptr = strstr(response, "\\r\\n\\r\\n");$/;"	l
ptr	net_tool.c	/^	struct sockaddr_in *ptr = (struct sockaddr_in *)&ip_addr;$/;"	l
ptr	net_tool.c	/^	unsigned char *ptr = buf;$/;"	l
ptr	net_tool.c	/^	unsigned char *ptr = request;$/;"	l
ptr	net_tool.c	/^	unsigned char *ptr;$/;"	l
ptr	vppnconfig/bird_conf.c	/^	char 	*ptr = NULL;$/;"	l
ptr	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ptr	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ptr	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr	vppnconfig/file_tool.c	/^	cJSON *ptr = NULL;$/;"	l
ptr	vppnconfig/main.c	/^		char *ptr = cJSON_Print(root);$/;"	l
ptr	vppnconfig/main.c	/^	char *ptr = GetConfig(conf_vpath);$/;"	l
ptr	vppnconfig/main.c	/^	char *ptr = NULL;$/;"	l
ptr	vppnconfig/net_tool.c	/^			char *ptr = strstr(response, "\\r\\n\\r\\n");$/;"	l
ptr	vppnconfig/net_tool.c	/^	struct sockaddr_in *ptr = (struct sockaddr_in *)&ip_addr;$/;"	l
ptr2	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr2	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr2	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr2	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr2	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr2	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
ptr2	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
ptr2	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
pubkey_item	main.c	/^				cJSON *pubkey_item = cJSON_GetObjectItem(response, "PubKey");$/;"	l
public_ip	ctrl_server_json.c	/^	char public_ip[32];$/;"	m	struct:geoip_struct	file:	access:public
public_list	main.c	/^						char public_list[200];$/;"	l
public_list	main.c	/^	char public_list[200];$/;"	l
public_vpath	ctrl-interface.c	/^	cJSON *public_vpath = read_json_from_file(public_vpath_conf_file);$/;"	l
public_vpath_conf	ctrl-interface.c	/^	char public_vpath_conf[100];$/;"	l
public_vpath_conf_file	ctrl-interface.c	/^	char public_vpath_conf_file[100];$/;"	l
public_vpath_switch_file	ctrl-interface.c	/^	char public_vpath_switch_file[100];$/;"	l
public_vpath_switch_file	vppnconfig/main.c	/^	char public_vpath_switch_file[100];$/;"	l
public_whitelist_file	ctrl-interface.c	/^	char public_whitelist_file[100];$/;"	l
public_wl_json	ctrl-interface.c	/^			cJSON *public_wl_json = get_public_whitelist(cloud_host, cloud_port, conf_type, tunnel_id);$/;"	l
publicip_buf	ctrl_server_json.c	/^	char publicip_buf[40] = "";$/;"	l
querys	cgi/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
querys	client_tool/net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
querys	net_tool.c	/^	int n , i , flag , querys , answers;$/;"	l
question	cgi/net_tool.c	/^	unsigned char question[128];$/;"	l
question	client_tool/net_tool.c	/^	unsigned char question[128];$/;"	l
question	net_tool.c	/^	unsigned char question[128];$/;"	l
question_len	cgi/net_tool.c	/^	int question_len;$/;"	l
question_len	client_tool/net_tool.c	/^	int question_len;$/;"	l
question_len	net_tool.c	/^	int question_len;$/;"	l
reachable	ctrl_server_json.c	/^    unsigned int reachable:1;               \/* 1 if this node is reachable in the graph *\/$/;"	m	struct:node_status_t	file:	access:public
read_buf	iptables_tool.c	/^	char read_buf[1000];$/;"	l
read_buf	main.c	/^	char read_buf[4000];$/;"	l
read_buf	vppnconfig/nvram-op.c	/^	char read_buf[100];$/;"	l
read_buf	vppnconfig/nvram-op.c	/^	char read_buf[4000];$/;"	l
read_fds	ctrl_server.c	/^	fd_set			read_fds;$/;"	l
read_fp_data	process_tool.c	/^static char *read_fp_data(FILE *fp)$/;"	f	file:	signature:(FILE *fp)
read_json_from_file	client_tool/file_tool.c	/^cJSON *read_json_from_file(char *file_name)$/;"	f	signature:(char *file_name)
read_json_from_file	client_tool/file_tool.h	/^cJSON *read_json_from_file(char *file_name);$/;"	p	signature:(char *file_name)
read_json_from_file	file_tool.c	/^cJSON *read_json_from_file(char *file_name)$/;"	f	signature:(char *file_name)
read_json_from_file	file_tool.h	/^cJSON *read_json_from_file(char *file_name);$/;"	p	signature:(char *file_name)
read_json_from_file	vppnconfig/file_tool.c	/^cJSON *read_json_from_file(char *file_name)$/;"	f	signature:(char *file_name)
read_json_from_file	vppnconfig/file_tool.h	/^cJSON *read_json_from_file(char *file_name);$/;"	p	signature:(char *file_name)
read_text	client_tool/file_tool.c	/^char *read_text(char *file_name)$/;"	f	signature:(char *file_name)
read_text	client_tool/file_tool.h	/^char *read_text(char *file_name);$/;"	p	signature:(char *file_name)
read_text	file_tool.c	/^char *read_text(char *file_name)$/;"	f	signature:(char *file_name)
read_text	file_tool.h	/^char *read_text(char *file_name);$/;"	p	signature:(char *file_name)
read_text	vppnconfig/file_tool.c	/^char *read_text(char *file_name)$/;"	f	signature:(char *file_name)
read_text	vppnconfig/file_tool.h	/^char *read_text(char *file_name);$/;"	p	signature:(char *file_name)
readfds	cgi/net_tool.c	/^	fd_set readfds;$/;"	l
readfds	client_tool/net_tool.c	/^	fd_set readfds;$/;"	l
readfds	net_tool.c	/^	fd_set readfds;$/;"	l
readfds	vppnconfig/net_tool.c	/^	fd_set readfds;$/;"	l
recv_client_data	ctrl_server.c	/^void *recv_client_data(int sockfd, int *len)$/;"	f	signature:(int sockfd, int *len)
recv_client_data_len	ctrl_server.c	/^size_t recv_client_data_len(int sockfd)$/;"	f	signature:(int sockfd)
recv_data	cgi/net_tool.c	/^char *recv_data(int sockfd, int *len)$/;"	f	signature:(int sockfd, int *len)
recv_data	client_tool/net_tool.c	/^char *recv_data(int sockfd, int *len)$/;"	f	signature:(int sockfd, int *len)
recv_data	net_tool.c	/^char *recv_data(int sockfd, int *len)$/;"	f	signature:(int sockfd, int *len)
recv_data	vppnconfig/net_tool.c	/^char *recv_data(int sockfd, int *len)$/;"	f	signature:(int sockfd, int *len)
recv_len	cgi/net_tool.c	/^		int recv_len = 0;$/;"	l
recv_len	cgi/net_tool.c	/^	ssize_t recv_len = 0;$/;"	l
recv_len	client_tool/net_tool.c	/^		int recv_len = 0;$/;"	l
recv_len	client_tool/net_tool.c	/^	ssize_t recv_len = 0;$/;"	l
recv_len	ctrl_server.c	/^	ssize_t recv_len = recv(sockfd, buf, 4, 0);$/;"	l
recv_len	ctrl_server.c	/^    ssize_t recv_len = 0;$/;"	l
recv_len	net_tool.c	/^		int recv_len = 0;$/;"	l
recv_len	net_tool.c	/^	int recv_len = 0;$/;"	l
recv_len	net_tool.c	/^	ssize_t recv_len = 0;$/;"	l
recv_len	vpn_cloud.c	/^		int recv_len = 0;$/;"	l
recv_len	vppnconfig/net_tool.c	/^		int recv_len = 0;$/;"	l
recv_len	vppnconfig/net_tool.c	/^	ssize_t recv_len = 0;$/;"	l
recv_len_total	cgi/net_tool.c	/^	ssize_t recv_len_total = 0;$/;"	l
recv_len_total	client_tool/net_tool.c	/^	ssize_t recv_len_total = 0;$/;"	l
recv_len_total	ctrl_server.c	/^    ssize_t recv_len_total = 0;$/;"	l
recv_len_total	net_tool.c	/^	ssize_t recv_len_total = 0;$/;"	l
recv_len_total	vppnconfig/net_tool.c	/^	ssize_t recv_len_total = 0;$/;"	l
recv_ping_packets	cgi/net_tool.c	/^void recv_ping_packets(int sockfd, cJSON *hosts, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, int timeout)
recv_ping_packets	client_tool/net_tool.c	/^void recv_ping_packets(int sockfd, cJSON *hosts, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, int timeout)
recv_ping_packets	net_tool.c	/^void recv_ping_packets(int sockfd, cJSON *hosts, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, int timeout)
recv_ping_packets2	cgi/net_tool.c	/^void recv_ping_packets2(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)
recv_ping_packets2	client_tool/net_tool.c	/^void recv_ping_packets2(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)
recv_ping_packets2	net_tool.c	/^void recv_ping_packets2(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)$/;"	f	signature:(int sockfd, cJSON *hosts, char *ip_name, char *latency_name, int timeout)
recv_ptr	cgi/net_tool.c	/^	char *recv_ptr = NULL;$/;"	l
recv_ptr	client_tool/net_tool.c	/^	char *recv_ptr = NULL;$/;"	l
recv_ptr	ctrl_server.c	/^    char *recv_ptr = NULL;$/;"	l
recv_ptr	net_tool.c	/^	char *recv_ptr = NULL;$/;"	l
recv_ptr	vppnconfig/net_tool.c	/^	char *recv_ptr = NULL;$/;"	l
recvpacket	cgi/net_tool.c	/^			char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	cgi/net_tool.c	/^	char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	client_tool/net_tool.c	/^			char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	client_tool/net_tool.c	/^	char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	net_tool.c	/^			char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	net_tool.c	/^	char recvpacket[PACKET_SIZE];$/;"	l
recvpacket	vppnconfig/net_tool.c	/^			char recvpacket[PACKET_SIZE];$/;"	l
ref	cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	l
ref	cgi/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	l
ref	client_tool/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	l
ref	vppnconfig/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	l
ref_buf	cgi/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
ref_buf	client_tool/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
ref_buf	net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
ref_buf	vppnconfig/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
refresh_flag	main.c	/^int refresh_flag = 0;$/;"	v
reload_bird_conf	bird_conf.c	/^void reload_bird_conf(int tunnel_id, char* teamid)$/;"	f	signature:(int tunnel_id, char* teamid)
reload_bird_conf	ctrl-interface.c	/^		extern void reload_bird_conf(int tunnel_id, char* team_id);$/;"	p	file:	signature:(int tunnel_id, char* team_id)
reload_config	cgi/main.c	/^	int	 reload_config = 0;$/;"	l
reload_dnsmasq_conf	ctrl-interface.c	/^void reload_dnsmasq_conf(int conf_type, int channel, char* team_id)$/;"	f	signature:(int conf_type, int channel, char* team_id)
remain_len	cgi/main.c	/^			int remain_len = len;$/;"	l
remain_len	client_tool/main.c	/^			int remain_len = len;$/;"	l
remove_ctrl_pid_file	main.c	/^void remove_ctrl_pid_file(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
remove_public_vpath_conf	ctrl-interface.c	/^void remove_public_vpath_conf(int conf_type, int tunnel_id)$/;"	f	signature:(int conf_type, int tunnel_id)
remove_public_vpath_conf	ctrl-interface.h	/^void remove_public_vpath_conf(int conf_type, int tunnel_id);$/;"	p	signature:(int conf_type, int tunnel_id)
req	cgi/main.c	/^		cJSON *req = cJSON_Parse(input);$/;"	l
req	ctrl_server.c	/^	ctrl_request_t *req;$/;"	l
req	ctrl_server.c	/^	ctrl_request_t*		req = NULL;$/;"	l
req	ctrl_server_json.c	/^	cJSON *req = cJSON_CreateObject();$/;"	l
req	ctrl_server_json.c	/^	cJSON* req = cJSON_CreateObject();$/;"	l
req	main.c	/^	cJSON *req = NULL;$/;"	l
req	main.c	/^	cJSON *req = cJSON_CreateObject();$/;"	l
req_cnt	ctrl_server.h	/^	int req_cnt;$/;"	m	struct:ctrl_server_s	access:public
req_method	cgi/main.c	/^	char *req_method = NULL;$/;"	l
request	cgi/net_tool.c	/^	unsigned char request[256];$/;"	l
request	client_tool/net_tool.c	/^	unsigned char request[256];$/;"	l
request	ctrl_server.c	/^	ctrl_request_t *request = (ctrl_request_t *)arg;$/;"	l
request	net_tool.c	/^	unsigned char request[256];$/;"	l
res	ctrl-interface.c	/^	cJSON *res = read_json_from_file(log_file);$/;"	l
res	ctrl_server_json.c	/^	cJSON *res = NULL;$/;"	l
res	ctrl_server_json.c	/^	cJSON *res = cJSON_CreateObject();$/;"	l
res	ctrl_server_json.c	/^	cJSON *res = json_get_package(&dump_config->tunnel);$/;"	l
res	main.c	/^					cJSON *res = vpn_cloud_tool_gzip(obj, g_config.cloud_host, g_config.cloud_port, "\/InternetRecords");$/;"	l
res	timer_tool.c	/^    struct timeval now, res;$/;"	l
res	vpn_cloud.c	/^	cJSON *res = NULL;$/;"	l
res_cnt	ctrl_server.h	/^	int res_cnt;$/;"	m	struct:ctrl_server_s	access:public
resource	vpn_config.h	/^	struct vpn_resource_s	resource;$/;"	m	struct:vpn_tunnel_info_s	typeref:struct:vpn_tunnel_info_s::vpn_resource_s	access:public
resource_id	vpn_config.h	/^	int		resource_id;$/;"	m	struct:vpn_resource_s	access:public
response	cgi/net_tool.c	/^		char *response = net_tool_http_client(host, port, uri, str_req, &recv_len);$/;"	l
response	cgi/net_tool.c	/^		char *response = net_tool_tcp_client(host, port, send_buf, send_len + 4, &recv_len);$/;"	l
response	cgi/net_tool.c	/^		char *response = net_tool_tcp_client(host, port, str_req, strlen(str_req) + 1, &recv_len);$/;"	l
response	client_tool/net_tool.c	/^		char *response = net_tool_http_client(host, port, uri, str_req, &recv_len);$/;"	l
response	client_tool/net_tool.c	/^		char *response = net_tool_tcp_client(host, port, send_buf, send_len + 4, &recv_len);$/;"	l
response	client_tool/net_tool.c	/^		char *response = net_tool_tcp_client(host, port, str_req, strlen(str_req) + 1, &recv_len);$/;"	l
response	ctrl_server_json.c	/^		cJSON* response = net_tool_http_json_client2(1, dump_config->cloud_host, dump_config->cloud_port, "\/vppn\/api\/v1\/client\/searchTeamById", req, "Authorization: Basic YWRtaW46cHVibGlj\\r\\n");$/;"	l
response	main.c	/^		cJSON *response = vpn_cloud_tool(req, cloud_host, cloud_port, "\/GetWhiteList");$/;"	l
response	main.c	/^		cJSON* response = net_tool_http_json_client2(1, cloud_host, cloud_port, "\/vppn\/api\/v1\/client\/searchTeamById", req, "Authorization: Basic YWRtaW46cHVibGlj\\r\\n");$/;"	l
response	main.c	/^	cJSON *response = vpn_cloud_tool(req, cloud_host, cloud_port, "\/ClientHeartBeat");$/;"	l
response	main.c	/^	cJSON *response = vpn_cloud_tool(req, cloud_host, cloud_port, "\/GetServerResource");$/;"	l
response	main.c	/^	cJSON *response = vpn_cloud_tool(req, cloud_host, cloud_port, "\/vlan\/routerHeartbeat");$/;"	l
response	main.c	/^	cJSON* response = net_tool_http_json_client2(1, cloud_host, cloud_port, "\/vppn\/api\/v1\/client\/heartBeat", req, "Authorization: Basic YWRtaW46cHVibGlj\\r\\n");$/;"	l
response	net_tool.c	/^		char *response = net_tool_http_client(host, port, uri, str_req, &recv_len);$/;"	l
response	net_tool.c	/^		char *response = net_tool_tcp_client(host, port, send_buf, send_len + 4, &recv_len);$/;"	l
response	net_tool.c	/^		char *response = net_tool_tcp_client(host, port, str_req, strlen(str_req) + 1, &recv_len);$/;"	l
response	net_tool.c	/^	char *response = net_tool_http_client2(method, host, port, uri, str_req, str_req?strlen(str_req):0, header, &recv_len);$/;"	l
response	vpn_cloud.c	/^	cJSON *response = net_tool_http_json_client(cloud_host, cloud_port, uri, req);$/;"	l
response	vppnconfig/net_tool.c	/^		char *response = net_tool_http_client(host, port, uri, str_req, &recv_len);$/;"	l
response	vppnconfig/net_tool.c	/^		char *response = net_tool_tcp_client(host, port, str_req, strlen(str_req) + 1, &recv_len);$/;"	l
restart_syslog	ctrl_server_json.c	/^void restart_syslog(char *log_host, char *log_port, char *log_level, char *vendor_name)$/;"	f	signature:(char *log_host, char *log_port, char *log_level, char *vendor_name)
result	ctrl_server_json.c	/^	char *result = process_tool_run_cmd(cmdbuf);$/;"	l
ret	attachdevice.c	/^	char *ret = NULL;$/;"	l
ret	attachdevice.c	/^	int ret = -1;$/;"	l
ret	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ret	cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ret	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ret	cgi/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ret	cgi/main.c	/^	char *ret = NULL;$/;"	l
ret	cgi/main.c	/^    unsigned char ret = 0;$/;"	l
ret	cgi/main.c	/^    unsigned char ret = 0xff;$/;"	l
ret	cgi/net_tool.c	/^	cJSON *ret = NULL;$/;"	l
ret	cgi/net_tool.c	/^	char *ret = NULL;$/;"	l
ret	cgi/net_tool.c	/^	int ret = -1; $/;"	l
ret	cgi/net_tool.c	/^	int ret = -1;$/;"	l
ret	cgi/net_tool.c	/^	int ret = 0;$/;"	l
ret	cgi/net_tool.c	/^	int ret = net_tool_get_if_addr(dev, &addr);$/;"	l
ret	cgi/net_tool.c	/^	int ret;$/;"	l
ret	cgi/net_tool.c	/^	struct route_info *ret = NULL;$/;"	l
ret	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ret	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ret	client_tool/file_tool.c	/^	int ret = -1;$/;"	l
ret	client_tool/file_tool.c	/^	int ret = 0;$/;"	l
ret	client_tool/main.c	/^			int ret = net_tool_get_if_ip(if_name, buf);$/;"	l
ret	client_tool/main.c	/^	char *ret = NULL;$/;"	l
ret	client_tool/main.c	/^	int ret = 0;$/;"	l
ret	client_tool/main.c	/^    unsigned char ret = 0;$/;"	l
ret	client_tool/main.c	/^    unsigned char ret = 0xff;$/;"	l
ret	client_tool/net_tool.c	/^	cJSON *ret = NULL;$/;"	l
ret	client_tool/net_tool.c	/^	char *ret = NULL;$/;"	l
ret	client_tool/net_tool.c	/^	int ret = -1; $/;"	l
ret	client_tool/net_tool.c	/^	int ret = -1;$/;"	l
ret	client_tool/net_tool.c	/^	int ret = 0;$/;"	l
ret	client_tool/net_tool.c	/^	int ret = net_tool_get_if_addr(dev, &addr);$/;"	l
ret	client_tool/net_tool.c	/^	int ret;$/;"	l
ret	client_tool/net_tool.c	/^	struct route_info *ret = NULL;$/;"	l
ret	ctrl-interface.c	/^	cJSON *ret = NULL;$/;"	l
ret	ctrl-interface.c	/^	cJSON *ret = read_json_from_file(peers_file);$/;"	l
ret	ctrl-interface.c	/^	int ret = -1;$/;"	l
ret	ctrl-interface.c	/^	int ret = 0;$/;"	l
ret	ctrl-interface.c	/^	struct vpn_config_s* ret = dump_global_config();$/;"	l
ret	ctrl_server.c	/^	ctrl_server_t* 			ret = NULL;$/;"	l
ret	ctrl_server.c	/^	int ret = -1;$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = cJSON_CreateArray();$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = cJSON_CreateObject();$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = cJSON_Parse(request->data + strlen("json"));$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = ctrl_get_manager(tunnel_type, tunnel_id);$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = ctrl_get_public_whitelist_switch(tunnel_type, tunnel_id);$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = get_route_list();$/;"	l
ret	ctrl_server_json.c	/^	cJSON *ret = read_json_from_file(vpath_file);$/;"	l
ret	ctrl_server_json.c	/^	cJSON* ret = cJSON_CreateArray();$/;"	l
ret	ctrl_server_json.c	/^	int	ret = -1;$/;"	l
ret	ctrl_server_json.c	/^	int ret = -1;$/;"	l
ret	ctrl_server_json.c	/^	int ret = -1;;$/;"	l
ret	file_tool.c	/^	int ret = -1;$/;"	l
ret	file_tool.c	/^	int ret = 0;$/;"	l
ret	iptables_tool.c	/^	int ret = 0;$/;"	l
ret	main.c	/^	int ret = -1;$/;"	l
ret	main.c	/^	int ret = 0;$/;"	l
ret	main.c	/^	int ret = 1;$/;"	l
ret	main.c	/^	int ret = ERROR_SELECT_NO_RESOURCE;$/;"	l
ret	main.c	/^	int ret = net_tool_get_if_subnet(dump_config->custom_lan_if, subnet);$/;"	l
ret	main.c	/^	int ret = net_tool_tcp_port_reachable(config->tunnel.info.resource.vpn_server_host, 50069);$/;"	l
ret	main.c	/^	struct vpn_config_s *ret = malloc(sizeof(struct vpn_config_s));$/;"	l
ret	my_debug.c	/^	int ret = 0;$/;"	l
ret	net_tool.c	/^	cJSON *ret = NULL;$/;"	l
ret	net_tool.c	/^	char *ret = NULL;$/;"	l
ret	net_tool.c	/^	int ret = -1; $/;"	l
ret	net_tool.c	/^	int ret = -1;$/;"	l
ret	net_tool.c	/^	int ret = 0;$/;"	l
ret	net_tool.c	/^	int ret = net_tool_get_if_addr(dev, &addr);$/;"	l
ret	net_tool.c	/^	int ret;$/;"	l
ret	net_tool.c	/^	struct route_info *ret = NULL;$/;"	l
ret	net_tool.c	/^	uint32_t ret = 0;$/;"	l
ret	process_tool.c	/^	char *ret = NULL;$/;"	l
ret	process_tool.c	/^    int ret = -1;$/;"	l
ret	vpn_config.c	/^	int		ret = -1;$/;"	l
ret	vpn_config.c	/^	int ret = -1;$/;"	l
ret	vpn_config.c	/^	int ret = 0;$/;"	l
ret	vppnconfig/bird_conf.c	/^	int		ret = -1;$/;"	l
ret	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
ret	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret;int len=5;$/;"	l
ret	vppnconfig/file_tool.c	/^	int ret = -1;$/;"	l
ret	vppnconfig/file_tool.c	/^	int ret = 0;$/;"	l
ret	vppnconfig/main.c	/^	cJSON *ret = cJSON_CreateArray();$/;"	l
ret	vppnconfig/main.c	/^	char *ret = NULL;$/;"	l
ret	vppnconfig/main.c	/^	int ret = 0;$/;"	l
ret	vppnconfig/net_tool.c	/^	cJSON *ret = NULL;$/;"	l
ret	vppnconfig/net_tool.c	/^	char *ret = NULL;$/;"	l
ret	vppnconfig/net_tool.c	/^	int ret = -1; $/;"	l
ret	vppnconfig/net_tool.c	/^	int ret = -1;$/;"	l
ret	vppnconfig/net_tool.c	/^	int ret = 0;$/;"	l
ret	vppnconfig/net_tool.c	/^	int ret = net_tool_get_if_addr(dev, &addr);$/;"	l
ret	vppnconfig/net_tool.c	/^	int ret;$/;"	l
ret	vppnconfig/net_tool.c	/^	struct route_info *ret = NULL;$/;"	l
ret_buf	vpn_config.c	/^		char *ret_buf = process_tool_run_cmd((char*)"artmtd -r sn | head -n 1 | awk -F: '{print $2}'");$/;"	l
ret_cloud	vpn_config.c	/^	int     ret_cloud;$/;"	l
ret_len	ctrl_server.c	/^	size_t ret_len = 0;$/;"	l
ret_len	vppnconfig/main.c	/^	int ret_len;$/;"	l
ret_pid	main.c	/^	int ret_pid = 0;$/;"	l
ret_pid	main.c	/^	pid_t ret_pid = 0;$/;"	l
ret_pid	process_tool.c	/^	int ret_pid = 0;$/;"	l
ret_ptr	client_tool/file_tool.c	/^	char *ret_ptr = NULL;$/;"	l
ret_ptr	file_tool.c	/^	char *ret_ptr = NULL;$/;"	l
ret_ptr	vppnconfig/file_tool.c	/^	char *ret_ptr = NULL;$/;"	l
ret_ptr	vppnconfig/nvram-op.c	/^	char *ret_ptr = NULL;$/;"	l
ret_reachable	net_tool.c	/^	int ret_reachable = 0;$/;"	l
ret_tunnel	vpn_config.c	/^	int     ret_tunnel;$/;"	l
root	main.c	/^			cJSON *root = cJSON_Parse(content);$/;"	l
root	vpn_config.c	/^		cJSON *root = cJSON_Parse(conf);$/;"	l
root	vppnconfig/bird_conf.c	/^	cJSON 	*root = NULL;$/;"	l
route_dst	cgi/net_tool.c	/^		struct sockaddr route_dst;$/;"	l
route_dst	client_tool/net_tool.c	/^		struct sockaddr route_dst;$/;"	l
route_dst	net_tool.c	/^		struct sockaddr route_dst;$/;"	l
route_dst	vppnconfig/net_tool.c	/^		struct sockaddr route_dst;$/;"	l
route_fp	ctrl_server_json.c	/^	FILE *route_fp = popen("route -n", "r");$/;"	l
route_info	cgi/net_tool.c	/^struct route_info$/;"	s	file:
route_info	client_tool/net_tool.c	/^struct route_info$/;"	s	file:
route_info	net_tool.c	/^struct route_info$/;"	s	file:
route_info	vppnconfig/net_tool.c	/^struct route_info$/;"	s	file:
route_info::dst_buf	cgi/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::dst_buf	client_tool/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::dst_buf	net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::dst_buf	vppnconfig/net_tool.c	/^	char dst_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::flags_buf	cgi/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::flags_buf	client_tool/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::flags_buf	net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::flags_buf	vppnconfig/net_tool.c	/^	char flags_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::gw_buf	cgi/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::gw_buf	client_tool/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::gw_buf	net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::gw_buf	vppnconfig/net_tool.c	/^	char gw_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::interface_buf	cgi/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::interface_buf	client_tool/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::interface_buf	net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::interface_buf	vppnconfig/net_tool.c	/^	char interface_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mask_buf	cgi/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mask_buf	client_tool/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mask_buf	net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mask_buf	vppnconfig/net_tool.c	/^	char mask_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::metric_buf	cgi/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::metric_buf	client_tool/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::metric_buf	net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::metric_buf	vppnconfig/net_tool.c	/^	char metric_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mtu_buf	cgi/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mtu_buf	client_tool/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mtu_buf	net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::mtu_buf	vppnconfig/net_tool.c	/^	char mtu_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::next	cgi/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
route_info::next	client_tool/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
route_info::next	net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
route_info::next	vppnconfig/net_tool.c	/^	struct route_info *next;$/;"	m	struct:route_info	typeref:struct:route_info::route_info	file:	access:public
route_info::ref_buf	cgi/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::ref_buf	client_tool/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::ref_buf	net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::ref_buf	vppnconfig/net_tool.c	/^	char ref_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::use_buf	cgi/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::use_buf	client_tool/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::use_buf	net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::use_buf	vppnconfig/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::window_buf	cgi/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::window_buf	client_tool/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::window_buf	net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
route_info::window_buf	vppnconfig/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
route_list	cgi/net_tool.c	/^	struct route_info *route_list = get_route_list();$/;"	l
route_list	client_tool/net_tool.c	/^	struct route_info *route_list = get_route_list();$/;"	l
route_list	ctrl_server_json.c	/^	cJSON *route_list = get_route_list();$/;"	l
route_list	net_tool.c	/^	struct route_info *route_list = get_route_list();$/;"	l
route_list	vppnconfig/net_tool.c	/^	struct route_info *route_list = get_route_list();$/;"	l
route_list_item	ctrl_server_json.c	/^	cJSON *route_list_item = json_get_routes();$/;"	l
route_mask	cgi/net_tool.c	/^		struct sockaddr route_mask;$/;"	l
route_mask	client_tool/net_tool.c	/^		struct sockaddr route_mask;$/;"	l
route_mask	net_tool.c	/^		struct sockaddr route_mask;$/;"	l
route_mask	vppnconfig/net_tool.c	/^		struct sockaddr route_mask;$/;"	l
route_need_delete	cgi/net_tool.c	/^int route_need_delete(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)$/;"	f	signature:(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)
route_need_delete	client_tool/net_tool.c	/^int route_need_delete(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)$/;"	f	signature:(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)
route_need_delete	net_tool.c	/^int route_need_delete(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)$/;"	f	signature:(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)
route_need_delete	vppnconfig/net_tool.c	/^int route_need_delete(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)$/;"	f	signature:(struct route_info *one_route, char *if_name, struct sockaddr *if_addr)
rt	cgi/net_tool.c	/^	struct rtentry rt;$/;"	l
rt	client_tool/net_tool.c	/^	struct rtentry rt;$/;"	l
rt	net_tool.c	/^	struct rtentry rt;$/;"	l
rt	vppnconfig/net_tool.c	/^	struct rtentry rt;$/;"	l
rule_str	main.c	/^			char rule_str[200];$/;"	l
run_deamon	main.c	/^void run_deamon(int conf_type)$/;"	f	signature:(int conf_type)
run_in_nodebug	vppnconfig/main.c	/^void run_in_nodebug()$/;"	f
run_no_debug_init	main.c	/^void run_no_debug_init()$/;"	f
running	main.c	/^int running = 1;$/;"	v
save_conf	vppnconfig/main.c	/^			char *save_conf = NULL;$/;"	l
save_conf	vppnconfig/main.c	/^		char *save_conf = NULL;$/;"	l
save_manager	vppnconfig/main.c	/^void save_manager(int conf_type)$/;"	f	signature:(int conf_type)
save_peer_conf	vppnconfig/main.c	/^void save_peer_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
save_peer_conf2	vppnconfig/main.c	/^void save_peer_conf2(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
save_peer_confs	vppnconfig/main.c	/^void save_peer_confs(int conf_type)$/;"	f	signature:(int conf_type)
save_peers_json_to_conf	vppnconfig/main.c	/^void save_peers_json_to_conf(cJSON *peers, int id)$/;"	f	signature:(cJSON *peers, int id)
save_ptr	vppnconfig/main.c	/^	char *save_ptr = NULL;$/;"	l
save_ptr1	cgi/net_tool.c	/^	char *save_ptr1 = NULL;$/;"	l
save_ptr1	client_tool/net_tool.c	/^	char *save_ptr1 = NULL;$/;"	l
save_ptr1	ctrl_server_json.c	/^			char *save_ptr1 = NULL;$/;"	l
save_ptr1	net_tool.c	/^	char *save_ptr1 = NULL;$/;"	l
save_ptr1	process_tool.c	/^    char *save_ptr1 = NULL;$/;"	l
save_ptr1	vppnconfig/main.c	/^	char *save_ptr1 = NULL;$/;"	l
save_ptr1	vppnconfig/net_tool.c	/^	char *save_ptr1 = NULL;$/;"	l
save_public_vpath_switch_conf	ctrl_server_json.c	/^static void save_public_vpath_switch_conf(int on, int tunnel_id, int conf_type, char *gw)$/;"	f	file:	signature:(int on, int tunnel_id, int conf_type, char *gw)
save_public_vpath_switch_conf	vppnconfig/main.c	/^void save_public_vpath_switch_conf(int conf_type, int tunnel_id)$/;"	f	signature:(int conf_type, int tunnel_id)
save_public_vpath_switch_confs	vppnconfig/main.c	/^void save_public_vpath_switch_confs(int conf_type)$/;"	f	signature:(int conf_type)
save_str	iptables_tool.c	/^	char *save_str;$/;"	l
save_tunnel_conf	vppnconfig/main.c	/^void save_tunnel_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
save_tunnel_confs	vppnconfig/main.c	/^void save_tunnel_confs(int conf_type)$/;"	f	signature:(int conf_type)
save_vpath_conf	vppnconfig/main.c	/^void save_vpath_conf(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
save_vpath_conf2	vppnconfig/main.c	/^void save_vpath_conf2(int conf_type, int id)$/;"	f	signature:(int conf_type, int id)
save_vpath_confs	vppnconfig/main.c	/^void save_vpath_confs(int conf_type)$/;"	f	signature:(int conf_type)
save_vpath_json_to_conf	vppnconfig/main.c	/^void save_vpath_json_to_conf(cJSON *tunnel_vpath, int conf_type, int id)$/;"	f	signature:(cJSON *tunnel_vpath, int conf_type, int id)
scale	cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
scale	cgi/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
scale	client_tool/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
scale	vppnconfig/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
sel_ret	main.c	/^		int sel_ret = 0;$/;"	l
select_ret	ctrl_server.c	/^	int			select_ret;$/;"	l
select_timeout	ctrl_server.c	/^	struct timeval select_timeout;$/;"	l
self_content	main.c	/^	char self_content[400];$/;"	l
self_file	main.c	/^	char self_file[400];$/;"	l
self_format	main.c	/^	char *self_format = "Subnet=%s\/32\\n"$/;"	l
self_id	vpn_config.h	/^	char						self_id[64];$/;"	m	struct:vpn_config_s	access:public
self_port_buf	main.c	/^	char self_port_buf[200];$/;"	l
self_subnet_buf	main.c	/^	char self_subnet_buf[200];$/;"	l
send_buf	cgi/net_tool.c	/^		char *send_buf = malloc(send_len + 4);$/;"	l
send_buf	cgi/net_tool.c	/^	char *send_buf = malloc(total_len);$/;"	l
send_buf	client_tool/net_tool.c	/^		char *send_buf = malloc(send_len + 4);$/;"	l
send_buf	client_tool/net_tool.c	/^	char *send_buf = malloc(total_len);$/;"	l
send_buf	net_tool.c	/^		char *send_buf = malloc(send_len + 4);$/;"	l
send_buf	net_tool.c	/^	char *send_buf = (char*)malloc(total_len);$/;"	l
send_buf	net_tool.c	/^	char *send_buf = malloc(total_len);$/;"	l
send_buf	vppnconfig/net_tool.c	/^	char *send_buf = malloc(total_len);$/;"	l
send_data	cgi/net_tool.c	/^		char *send_data = send_buf + 4;$/;"	l
send_data	client_tool/net_tool.c	/^		char *send_data = send_buf + 4;$/;"	l
send_data	net_tool.c	/^		char *send_data = send_buf + 4;$/;"	l
send_len	cgi/net_tool.c	/^		int send_len = prefix_size + strlen(str_req) + 1;$/;"	l
send_len	client_tool/net_tool.c	/^		int send_len = prefix_size + strlen(str_req) + 1;$/;"	l
send_len	net_tool.c	/^		int send_len = prefix_size + strlen(str_req) + 1;$/;"	l
send_locally	ctrl_server_json.c	/^    unsigned int send_locally:1;        \/* 1 if the next UDP packet should be sent on the local network *\/$/;"	m	struct:node_status_t	file:	access:public
send_num	cgi/net_tool.c	/^	int send_num;$/;"	l
send_num	client_tool/net_tool.c	/^	int send_num;$/;"	l
send_num	net_tool.c	/^	int send_num;$/;"	l
send_num	vppnconfig/net_tool.c	/^	int send_num;$/;"	l
send_ping_packets	cgi/net_tool.c	/^void send_ping_packets(int fd, cJSON *hosts)$/;"	f	signature:(int fd, cJSON *hosts)
send_ping_packets	client_tool/net_tool.c	/^void send_ping_packets(int fd, cJSON *hosts)$/;"	f	signature:(int fd, cJSON *hosts)
send_ping_packets	net_tool.c	/^void send_ping_packets(int fd, cJSON *hosts)$/;"	f	signature:(int fd, cJSON *hosts)
send_ping_packets2	cgi/net_tool.c	/^void send_ping_packets2(int fd, cJSON *hosts, char *ip_name)$/;"	f	signature:(int fd, cJSON *hosts, char *ip_name)
send_ping_packets2	client_tool/net_tool.c	/^void send_ping_packets2(int fd, cJSON *hosts, char *ip_name)$/;"	f	signature:(int fd, cJSON *hosts, char *ip_name)
send_ping_packets2	net_tool.c	/^void send_ping_packets2(int fd, cJSON *hosts, char *ip_name)$/;"	f	signature:(int fd, cJSON *hosts, char *ip_name)
sendpacket	cgi/net_tool.c	/^				char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	cgi/net_tool.c	/^			char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	client_tool/net_tool.c	/^				char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	client_tool/net_tool.c	/^			char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	net_tool.c	/^				char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	net_tool.c	/^			char sendpacket[PACKET_SIZE];$/;"	l
sendpacket	vppnconfig/net_tool.c	/^			char sendpacket[PACKET_SIZE];$/;"	l
sep	vppnconfig/main.c	/^		char* sep = strchr(ptr, '@');$/;"	l
separator	vppnconfig/main.c	/^				char *separator = strchr(uri, '@');$/;"	l
separator	vppnconfig/main.c	/^			char *separator = strchr(token, '@');$/;"	l
separator	vppnconfig/main.c	/^			char *separator = strchr(uri, '@');$/;"	l
serv	ctrl_server.c	/^	ctrl_server_t *serv = (ctrl_server_t *)arg;$/;"	l
server	cgi/net_tool.c	/^	struct sockaddr_in server;$/;"	l
server	client_tool/net_tool.c	/^	struct sockaddr_in server;$/;"	l
server	ctrl_server_json.c	/^	char *server = server_item->valuestring;$/;"	l
server	net_tool.c	/^	struct sockaddr_in server;$/;"	l
server	vppnconfig/main.c	/^			char *server = NULL;$/;"	l
server	vppnconfig/net_tool.c	/^	struct sockaddr_in server;$/;"	l
server_content	main.c	/^	char server_content[400];$/;"	l
server_file	main.c	/^	char server_file[400];$/;"	l
server_format	main.c	/^	char *server_format = $/;"	l
server_item	ctrl_server_json.c	/^	cJSON *server_item = cJSON_GetObjectItem(jsonreq, "server");$/;"	l
server_item	vpn_config.c	/^				cJSON *server_item = cJSON_GetObjectItem(root, VPN_TINC_SERVER);$/;"	l
server_item	vppnconfig/main.c	/^			cJSON *server_item = cJSON_GetObjectItem(one_item, "server");$/;"	l
server_item	vppnconfig/main.c	/^	cJSON *server_item = cJSON_GetObjectItem(conf_json, "tunnel_server");$/;"	l
server_port_item	vpn_config.c	/^				cJSON *server_port_item = cJSON_GetObjectItem(root, VPN_TINC_SERVER_PORT);$/;"	l
server_reachable	main.c	/^						int server_reachable = vpn_tunnel_check_reachable(config);$/;"	l
serverlist	ctrl_server_json.c	/^	cJSON *serverlist = net_tool_http_json_client(dump_config->cloud_host, dump_config->cloud_port, "\/GetServerList", req);$/;"	l
servertype_buf	main.c	/^	char servertype_buf[100];$/;"	l
set_bird_file	bird_conf.h	/^int set_bird_file();$/;"	p	signature:()
set_bird_file	vppnconfig/bird_conf.c	/^int set_bird_file()$/;"	f
set_bird_file	vppnconfig/bird_conf.h	/^int set_bird_file();$/;"	p	signature:()
set_ctrl_pid	main.c	/^void set_ctrl_pid(int tunnel, int pid, int conf_type)$/;"	f	signature:(int tunnel, int pid, int conf_type)
set_defaut_latency	cgi/net_tool.c	/^void set_defaut_latency(cJSON *hosts)$/;"	f	signature:(cJSON *hosts)
set_defaut_latency	client_tool/net_tool.c	/^void set_defaut_latency(cJSON *hosts)$/;"	f	signature:(cJSON *hosts)
set_defaut_latency	net_tool.c	/^void set_defaut_latency(cJSON *hosts)$/;"	f	signature:(cJSON *hosts)
set_defaut_latency2	cgi/net_tool.c	/^void set_defaut_latency2(cJSON *hosts, char *latency_name)$/;"	f	signature:(cJSON *hosts, char *latency_name)
set_defaut_latency2	client_tool/net_tool.c	/^void set_defaut_latency2(cJSON *hosts, char *latency_name)$/;"	f	signature:(cJSON *hosts, char *latency_name)
set_defaut_latency2	net_tool.c	/^void set_defaut_latency2(cJSON *hosts, char *latency_name)$/;"	f	signature:(cJSON *hosts, char *latency_name)
set_members_conf	ctrl_server_json.c	/^extern void set_members_conf(cJSON* members, char* teamid, char* self_id, int tunnel_id, struct vpn_tunnel_s *tunnel);$/;"	p	file:	signature:(cJSON* members, char* teamid, char* self_id, int tunnel_id, struct vpn_tunnel_s *tunnel)
set_members_conf	main.c	/^int set_members_conf(cJSON* members, char* teamid, char* self_id, int tunnel_id, struct vpn_tunnel_s *tunnel)$/;"	f	signature:(cJSON* members, char* teamid, char* self_id, int tunnel_id, struct vpn_tunnel_s *tunnel)
set_peer_cnt	vppnconfig/main.c	/^void set_peer_cnt(int id, int cnt)$/;"	f	signature:(int id, int cnt)
set_peer_conf	vppnconfig/main.c	/^void set_peer_conf(int tunnel_id, int index, cJSON *peer)$/;"	f	signature:(int tunnel_id, int index, cJSON *peer)
set_peervpn_conf	main.c	/^void set_peervpn_conf(struct vpn_tunnel_s * tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s * tunnel, int conf_type)
set_ret	main.c	/^						int set_ret = set_members_conf(members_item, g_config.team_id, g_config.self_id, tunnel_id, tunnel);$/;"	l
set_syslog_conf	ctrl_server_json.c	/^void set_syslog_conf(char *log_host, char *log_port, char *log_level, char *vendor_name)$/;"	f	signature:(char *log_host, char *log_port, char *log_level, char *vendor_name)
set_tinc_conf_file	main.c	/^void set_tinc_conf_file(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
set_tinc_hosts_file	main.c	/^void set_tinc_hosts_file(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
set_tinc_up_file	main.c	/^void set_tinc_up_file(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
set_vpath_cnt	vppnconfig/main.c	/^void set_vpath_cnt(int tunnel_id, int cnt)$/;"	f	signature:(int tunnel_id, int cnt)
set_vpath_conf	vppnconfig/main.c	/^void set_vpath_conf(int tunnel_id, int index, cJSON *obj)$/;"	f	signature:(int tunnel_id, int index, cJSON *obj)
setup_peervpn_conf_files	main.c	/^void setup_peervpn_conf_files(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
setup_tinc_conf_files	main.c	/^void setup_tinc_conf_files(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
sig_handler	main.c	/^void sig_handler(int sig)$/;"	f	signature:(int sig)
sign	cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
sign	cgi/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
sign	client_tool/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
sign	vppnconfig/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
signsubscale	cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
signsubscale	cgi/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
signsubscale	client_tool/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
signsubscale	vppnconfig/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
size	base64.c	/^    int size = 0;$/;"	l
size	base64.c	/^    size_t size = 0;$/;"	l
sizeof	cgi/net_tool.c	/^					sendto(fd, (char *)&sendpacket, sizeof(struct icmp), 0, (struct sockaddr *)&addr, sizeof(addr));$/;"	p	file:
sizeof	client_tool/net_tool.c	/^					sendto(fd, (char *)&sendpacket, sizeof(struct icmp), 0, (struct sockaddr *)&addr, sizeof(addr));$/;"	p	file:
sizeof	net_tool.c	/^					sendto(fd, (char *)&sendpacket, sizeof(struct icmp), 0, (struct sockaddr *)&addr, sizeof(addr));$/;"	p	file:
skip	cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:	signature:(const char *in)
skip	cgi/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:	signature:(const char *in)
skip	client_tool/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:	signature:(const char *in)
skip	vppnconfig/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:	signature:(const char *in)
skip_crlf	ctrl_server_json.c	/^static void skip_crlf(char *str)$/;"	f	file:	signature:(char *str)
skip_crlf	iptables_tool.c	/^static void skip_crlf(char *str)$/;"	f	file:	signature:(char *str)
skip_crlf	vppnconfig/nvram-op.c	/^void skip_crlf(char *str)$/;"	f	signature:(char *str)
sn_buf	ctrl_server_json.c	/^	char sn_buf[32] = "";$/;"	l
sock_opt	ctrl_server.c	/^		int sock_opt = 1;$/;"	l
socketfd	cgi/net_tool.c	/^	int socketfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
socketfd	client_tool/net_tool.c	/^	int socketfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
socketfd	net_tool.c	/^	int socketfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
sockfd	cgi/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0); $/;"	l
sockfd	cgi/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
sockfd	cgi/net_tool.c	/^	int sockfd;$/;"	l
sockfd	client_tool/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0); $/;"	l
sockfd	client_tool/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
sockfd	client_tool/net_tool.c	/^	int sockfd;$/;"	l
sockfd	net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0); $/;"	l
sockfd	net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
sockfd	net_tool.c	/^	int sockfd;$/;"	l
sockfd	vppnconfig/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0); $/;"	l
sockfd	vppnconfig/net_tool.c	/^	int sockfd = socket(AF_INET, SOCK_DGRAM, 0);$/;"	l
sockfd	vppnconfig/net_tool.c	/^	int sockfd;$/;"	l
sptps	ctrl_server_json.c	/^    unsigned int sptps:1;                   \/* 1 if this node supports SPTPS *\/$/;"	m	struct:node_status_t	file:	access:public
src	iptables_tool.h	/^	char src[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
src	vpn_cloud.c	/^		Bytef *src = (Bytef *)str_req;$/;"	l
src_len	vpn_cloud.c	/^		uLong src_len = (uLong)strlen(str_req);$/;"	l
start_dns_report_loop	main.c	/^void start_dns_report_loop()$/;"	f
start_time	cgi/net_tool.c	/^	struct timeval start_time;$/;"	l
start_time	client_tool/net_tool.c	/^	struct timeval start_time;$/;"	l
start_time	net_tool.c	/^	struct timeval start_time;$/;"	l
stat_item	main.c	/^	cJSON *stat_item = cJSON_CreateObject();$/;"	l
stat_ret	client_tool/file_tool.c	/^	int stat_ret = stat(path, &file_stat);$/;"	l
stat_ret	file_tool.c	/^	int stat_ret = stat(path, &file_stat);$/;"	l
stat_ret	vppnconfig/file_tool.c	/^	int stat_ret = stat(path, &file_stat);$/;"	l
status	ctrl_server_json.c	/^			unsigned int status = 0;$/;"	l
status	ctrl_server_json.c	/^	int status = dump_config->tunnel.info.status;$/;"	l
status	process_tool.c	/^    int status;$/;"	l
status	vpn_config.h	/^	int						status;$/;"	m	struct:vpn_tunnel_info_s	access:public
status_item	ctrl_server_json.c	/^	cJSON *status_item = cJSON_CreateObject();$/;"	l
status_item	ctrl_server_json.c	/^	cJSON *status_item = cJSON_GetObjectItem(res, "tunnel_status");$/;"	l
status_ptr	ctrl_server_json.c	/^			char* status_ptr = strchr(line_start, ' ');$/;"	l
status_timer	main.c	/^	Timer status_timer;$/;"	l
str	cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
str	cJSON.c	/^	char *str;$/;"	l
str	cJSON.c	/^	char *str=0;$/;"	l
str	cgi/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
str	cgi/cJSON.c	/^	char *str;$/;"	l
str	cgi/cJSON.c	/^	char *str=0;$/;"	l
str	client_tool/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
str	client_tool/cJSON.c	/^	char *str;$/;"	l
str	client_tool/cJSON.c	/^	char *str=0;$/;"	l
str	client_tool/file_tool.c	/^	char *str = cJSON_Print(json);$/;"	l
str	ctrl_server_json.c	/^			char *str;$/;"	l
str	file_tool.c	/^	char *str = cJSON_Print(json);$/;"	l
str	iptables_tool.c	/^	char *str;$/;"	l
str	main.c	/^					char *str = cJSON_Print(json_wl);$/;"	l
str	main.c	/^	char *str = cJSON_Print(json);$/;"	l
str	process_tool.c	/^    char *str;$/;"	l
str	vppnconfig/bird_conf.c	/^	char *str = NULL;$/;"	l
str	vppnconfig/cJSON.c	/^	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;$/;"	l
str	vppnconfig/cJSON.c	/^	char *str;$/;"	l
str	vppnconfig/cJSON.c	/^	char *str=0;$/;"	l
str	vppnconfig/file_tool.c	/^	char *str = cJSON_Print(json);$/;"	l
str	vppnconfig/main.c	/^	char *str = GetConfig(conf_vpath);$/;"	l
str	vppnconfig/main.c	/^	char *str = NULL;$/;"	l
str1	vppnconfig/main.c	/^	char *str1;$/;"	l
str1_len	vppnconfig/main.c	/^	int str1_len = (str1?strlen(str1):0);$/;"	l
str_len	ctrl_server_json.c	/^		int str_len = strlen(str);$/;"	l
str_len	iptables_tool.c	/^	int str_len = strlen(str);$/;"	l
str_len	vpn_config.c	/^		int str_len = strlen(str);$/;"	l
str_req	cgi/net_tool.c	/^	char *str_req = cJSON_Print(req);$/;"	l
str_req	client_tool/net_tool.c	/^	char *str_req = cJSON_Print(req);$/;"	l
str_req	net_tool.c	/^	char *str_req = NULL;$/;"	l
str_req	net_tool.c	/^	char *str_req = cJSON_Print(req);$/;"	l
str_req	vpn_cloud.c	/^	char *str_req = cJSON_Print(req);$/;"	l
str_req	vppnconfig/net_tool.c	/^	char *str_req = cJSON_Print(req);$/;"	l
string	cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
string	cgi/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
string	client_tool/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
string	vppnconfig/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON	access:public
subnet_buf	main.c	/^						char subnet_buf[100];$/;"	l
subnet_item	main.c	/^					cJSON* subnet_item = cJSON_GetObjectItem(response, "subnet");$/;"	l
subscale	cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
subscale	cgi/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
subscale	client_tool/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
subscale	vppnconfig/cJSON.c	/^	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;$/;"	l
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:	signature:(cJSON *prev,cJSON *item)
suffix_object	cgi/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:	signature:(cJSON *prev,cJSON *item)
suffix_object	client_tool/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:	signature:(cJSON *prev,cJSON *item)
suffix_object	vppnconfig/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:	signature:(cJSON *prev,cJSON *item)
sum	cgi/net_tool.c	/^    int sum=0;$/;"	l
sum	client_tool/net_tool.c	/^    int sum=0;$/;"	l
sum	net_tool.c	/^    int sum=0;$/;"	l
sum	vppnconfig/net_tool.c	/^    int sum=0;$/;"	l
switch_input	cgi/main.c	/^    char *switch_input = NULL;$/;"	l
switch_json	ctrl-interface.c	/^	cJSON *switch_json = read_json_from_file(public_vpath_switch_file);$/;"	l
sync_peer	ctrl_server_json.c	/^void sync_peer(cJSON *new_peers, cJSON *old_item)$/;"	f	signature:(cJSON *new_peers, cJSON *old_item)
sync_peers	ctrl_server_json.c	/^void sync_peers(cJSON *new_peers, cJSON *old_peers)$/;"	f	signature:(cJSON *new_peers, cJSON *old_peers)
syslog_host_buf	ctrl_server_json.c	/^	char syslog_host_buf[200] = "";$/;"	l
syslog_host_item	ctrl_server_json.c	/^	cJSON *syslog_host_item = cJSON_GetObjectItem(jsonreq, "sys_log_host");$/;"	l
syslog_level_buf	ctrl_server_json.c	/^	char syslog_level_buf[200] = "";$/;"	l
syslog_level_item	ctrl_server_json.c	/^	cJSON *syslog_level_item = cJSON_GetObjectItem(jsonreq, "sys_log_level");$/;"	l
syslog_port_buf	ctrl_server_json.c	/^	char syslog_port_buf[200] = "";$/;"	l
syslog_port_item	ctrl_server_json.c	/^	cJSON *syslog_port_item = cJSON_GetObjectItem(jsonreq, "sys_log_port");$/;"	l
table_name	bird_conf.c	/^	char table_name[30] = {0};$/;"	l
table_name	vppnconfig/bird_conf.c	/^	char table_name[30] = {0};$/;"	l
target	iptables_tool.h	/^	char target[MAX_BUF_LEN];$/;"	m	struct:iptables_rule_s	access:public
target_host	cgi/main.c	/^				char *target_host = "127.0.0.1";$/;"	l
target_host	client_tool/main.c	/^	char *target_host = NULL;;$/;"	l
target_host_item	cgi/main.c	/^				cJSON *target_host_item = cJSON_GetObjectItem(req, "target_host");$/;"	l
team_id	vpn_config.h	/^	char						team_id[64];$/;"	m	struct:vpn_config_s	access:public
team_id	vppnconfig/main.c	/^		char* team_id = sep+1;$/;"	l
team_id	vppnconfig/main.c	/^	char *team_id = NULL;$/;"	l
team_id_item	ctrl-interface.c	/^		cJSON *team_id_item = cJSON_GetObjectItem(one_path, "team_id");$/;"	l
team_id_item	ctrl_server_json.c	/^	cJSON *team_id_item = cJSON_GetObjectItem(jsonreq, "team_id");$/;"	l
team_id_item	vpn_config.c	/^				cJSON *team_id_item = cJSON_GetObjectItem(root, VPN_TINC_TEAMID);$/;"	l
team_id_item	vppnconfig/main.c	/^	cJSON *team_id_item = cJSON_GetObjectItem(obj, "team_id");$/;"	l
teamid	vpn_config.h	/^	char	teamid[32];$/;"	m	struct:vpn_resource_s	access:public
teamid_file_item	ctrl_server_json.c	/^		cJSON *teamid_file_item = cJSON_GetObjectItem(item, "team_id");$/;"	l
teamid_item	ctrl_server_json.c	/^		cJSON *teamid_item = cJSON_GetObjectItem(item, "team_id");$/;"	l
teamid_item	ctrl_server_json.c	/^	cJSON *teamid_item = cJSON_GetObjectItem(jsonreq, "team_id");$/;"	l
teamid_item	vpn_config.c	/^				cJSON *teamid_item = cJSON_GetObjectItem(root, VPN_TINC_TEAMID);$/;"	l
teamid_item	vppnconfig/main.c	/^		cJSON *teamid_item = cJSON_GetObjectItem(obj, "team_id");$/;"	l
temp	net_tool.c	/^	uint32_t temp = ntohl(mask_addr.s_addr);$/;"	l
temp1	ctrl_server_json.c	/^	int temp1;$/;"	l
temp2	ctrl_server_json.c	/^	int temp2;$/;"	l
temp_bird_peers_file	bird_conf.c	/^	char temp_bird_peers_file[100];$/;"	l
text	client_tool/file_tool.c	/^	char *text = read_text(file_name);$/;"	l
text	ctrl_server_json.c	/^	char *text = process_tool_run_cmd("artmtd -r sn");$/;"	l
text	ctrl_server_json.c	/^	char *text = read_text("\/firmware_version");$/;"	l
text	ctrl_server_json.c	/^	char *text = read_text("\/module_name");$/;"	l
text	file_tool.c	/^	char *text = read_text(file_name);$/;"	l
text	main.c	/^			char *text = read_text(DNS_DUMP_FILE);$/;"	l
text	main.c	/^	char *text = cJSON_Print(conf);$/;"	l
text	main.c	/^	char *text = read_text(local_conf);$/;"	l
text	vppnconfig/file_tool.c	/^	char *text = read_text(file_name);$/;"	l
timeo	cgi/net_tool.c	/^		struct timeval timeo;$/;"	l
timeo	cgi/net_tool.c	/^	struct timeval timeo;$/;"	l
timeo	client_tool/net_tool.c	/^		struct timeval timeo;$/;"	l
timeo	client_tool/net_tool.c	/^	struct timeval timeo;$/;"	l
timeo	net_tool.c	/^		struct timeval timeo;$/;"	l
timeo	net_tool.c	/^	struct timeval timeo;$/;"	l
timeo	vppnconfig/net_tool.c	/^		struct timeval timeo;$/;"	l
timeout	cgi/net_tool.c	/^		struct timeval timeout = {8, 0}; $/;"	l
timeout	client_tool/net_tool.c	/^		struct timeval timeout = {8, 0}; $/;"	l
timeout	ctrl_server.c	/^	static struct timeval timeout = {5, 0};$/;"	l	file:
timeout	net_tool.c	/^		struct timeval timeout = {8, 0}; $/;"	l
timeout	vppnconfig/net_tool.c	/^		struct timeval timeout = {8, 0}; $/;"	l
timer_tool_countdown	timer_tool.c	/^void timer_tool_countdown(Timer* timer, unsigned int timeout)$/;"	f	signature:(Timer* timer, unsigned int timeout)
timer_tool_countdown	timer_tool.h	/^void timer_tool_countdown(Timer* timer, unsigned int timeout);$/;"	p	signature:(Timer* timer, unsigned int timeout)
timer_tool_countdown_ms	timer_tool.c	/^void timer_tool_countdown_ms(Timer* timer, unsigned int timeout)$/;"	f	signature:(Timer* timer, unsigned int timeout)
timer_tool_countdown_ms	timer_tool.h	/^void timer_tool_countdown_ms(Timer* timer, unsigned int timeout);$/;"	p	signature:(Timer* timer, unsigned int timeout)
timer_tool_init	timer_tool.c	/^void timer_tool_init(Timer* timer)$/;"	f	signature:(Timer* timer)
timer_tool_init	timer_tool.h	/^void timer_tool_init(Timer* timer);$/;"	p	signature:(Timer* timer)
timer_tool_is_expired	timer_tool.c	/^char timer_tool_is_expired(Timer* timer)$/;"	f	signature:(Timer* timer)
timer_tool_is_expired	timer_tool.h	/^char timer_tool_is_expired(Timer* timer);$/;"	p	signature:(Timer* timer)
timer_tool_left_ms	timer_tool.c	/^int timer_tool_left_ms(Timer* timer)$/;"	f	signature:(Timer* timer)
timer_tool_left_ms	timer_tool.h	/^int timer_tool_left_ms(Timer* timer);$/;"	p	signature:(Timer* timer)
tinc_conf_format	main.c	/^	char *tinc_conf_format;$/;"	l
tinc_dir	main.c	/^	char tinc_dir[200];$/;"	l
tinc_hosts_dir	main.c	/^	char tinc_hosts_dir[200];$/;"	l
tinc_pid	main.c	/^	int tinc_pid = get_tinc_pid(tunnel->tunnel_id, g_config.tunnel_type);$/;"	l
tinc_up_content	main.c	/^	char tinc_up_content[400];$/;"	l
tinc_up_format	main.c	/^	char *tinc_up_format;$/;"	l
tinc_up_name	main.c	/^	char tinc_up_name[400];$/;"	l
tmp	cgi/main.c	/^			unsigned char tmp;$/;"	l
tmp	cgi/net_tool.c	/^		struct route_info *tmp = NULL;$/;"	l
tmp	cgi/net_tool.c	/^		struct route_info *tmp = cur;$/;"	l
tmp	client_tool/main.c	/^			unsigned char tmp;$/;"	l
tmp	client_tool/net_tool.c	/^		struct route_info *tmp = NULL;$/;"	l
tmp	client_tool/net_tool.c	/^		struct route_info *tmp = cur;$/;"	l
tmp	net_tool.c	/^		struct route_info *tmp = NULL;$/;"	l
tmp	net_tool.c	/^		struct route_info *tmp = cur;$/;"	l
tmp	vppnconfig/net_tool.c	/^		struct route_info *tmp = NULL;$/;"	l
tmp	vppnconfig/net_tool.c	/^		struct route_info *tmp = cur;$/;"	l
tmp1	cgi/main.c	/^    unsigned char tmp1 = 0;$/;"	l
tmp1	client_tool/main.c	/^    unsigned char tmp1 = 0;$/;"	l
tmp1	main.c	/^	int tmp1;$/;"	l
tmp2	cgi/main.c	/^    unsigned char tmp2 = 0;$/;"	l
tmp2	client_tool/main.c	/^    unsigned char tmp2 = 0;$/;"	l
tmp2	main.c	/^	int tmp2;$/;"	l
tmp3	main.c	/^	int tmp3;$/;"	l
tmp4	main.c	/^	int tmp4;$/;"	l
tmp_str	cgi/main.c	/^    unsigned char *tmp_str = (unsigned char *)malloc(len + 1);$/;"	l
tmp_str	client_tool/main.c	/^    unsigned char *tmp_str = (unsigned char *)malloc(len + 1);$/;"	l
tmplen	cJSON.c	/^	size_t tmplen=0;$/;"	l
tmplen	cgi/cJSON.c	/^	size_t tmplen=0;$/;"	l
tmplen	client_tool/cJSON.c	/^	size_t tmplen=0;$/;"	l
tmplen	vppnconfig/cJSON.c	/^	size_t tmplen=0;$/;"	l
token	cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
token	cgi/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
token	cgi/net_tool.c	/^	char *token = NULL;$/;"	l
token	client_tool/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
token	client_tool/net_tool.c	/^	char *token = NULL;$/;"	l
token	ctrl_server_json.c	/^			char *token;$/;"	l
token	ctrl_server_json.c	/^	char *token = NULL;$/;"	l
token	iptables_tool.c	/^	char *token;$/;"	l
token	net_tool.c	/^	char *token = NULL;$/;"	l
token	process_tool.c	/^    char *token;$/;"	l
token	vppnconfig/cJSON.c	/^	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;$/;"	l
token	vppnconfig/main.c	/^	char *token;$/;"	l
token	vppnconfig/net_tool.c	/^	char *token = NULL;$/;"	l
total_len	cgi/net_tool.c	/^	int total_len = strlen(head_buf) + body_len + 1;$/;"	l
total_len	cgi/net_tool.c	/^	int total_len = strlen(head_buf) + strlen(body) + 1;$/;"	l
total_len	client_tool/net_tool.c	/^	int total_len = strlen(head_buf) + body_len + 1;$/;"	l
total_len	client_tool/net_tool.c	/^	int total_len = strlen(head_buf) + strlen(body) + 1;$/;"	l
total_len	net_tool.c	/^	int total_len = strlen(head_buf) + body_len + 1;$/;"	l
total_len	net_tool.c	/^	int total_len = strlen(head_buf) + strlen(body) + 1;$/;"	l
total_len	net_tool.c	/^	int total_len;$/;"	l
total_len	vppnconfig/main.c	/^	int total_len = strlen(uri_item->valuestring) + strlen(proxy_item->valuestring) + strlen(team_id_item->valuestring) + strlen("@") + strlen("@") + 1;$/;"	l
total_len	vppnconfig/net_tool.c	/^	int total_len = strlen(head_buf) + body_len + 1;$/;"	l
total_len	vppnconfig/net_tool.c	/^	int total_len = strlen(head_buf) + strlen(body) + 1;$/;"	l
traffic_file	ctrl_server_json.c	/^		char traffic_file[100];$/;"	l
tun_buf	main.c	/^		char tun_buf[10];$/;"	l
tun_gw_ip	main.c	/^		char *tun_gw_ip = strdup("10.1.255.1");$/;"	l
tun_item	bird_conf.c	/^		cJSON *tun_item = cJSON_GetObjectItem(obj, "tunnel_id");$/;"	l
tun_item	vppnconfig/bird_conf.c	/^		cJSON *tun_item = cJSON_GetObjectItem(obj, "tunnel_id");$/;"	l
tunnel	vpn_config.c	/^	int		tunnel = 0;$/;"	l
tunnel	vpn_config.h	/^	struct vpn_tunnel_s			tunnel;$/;"	m	struct:vpn_config_s	typeref:struct:vpn_config_s::vpn_tunnel_s	access:public
tunnel_check_reconnect	main.c	/^int tunnel_check_reconnect(int need_reset)$/;"	f	signature:(int need_reset)
tunnel_conf	ctrl-interface.c	/^	cJSON *tunnel_conf = ctrl_get_tunnel_conf(conf_type, channel);$/;"	l
tunnel_dev	vpn_config.h	/^	char	tunnel_dev[32];$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_file	vpn_config.c	/^	char tunnel_file[200];$/;"	l
tunnel_id	ctrl_server_json.c	/^	int tunnel_id = dump_config->tunnel.tunnel_id;$/;"	l
tunnel_id	main.c	/^	int tunnel_id = *(int *)arg;$/;"	l
tunnel_id	main.c	/^int tunnel_id = -1;$/;"	v
tunnel_id	vpn_config.h	/^	int		tunnel_id;$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_id_item	vppnconfig/main.c	/^		cJSON *tunnel_id_item = cJSON_GetObjectItem(peer, "tunnel_id");$/;"	l
tunnel_num	vpn_config.h	/^	int						tunnel_num;$/;"	m	struct:vpn_tunnel_set_s	access:public
tunnel_on	ctrl_server_json.c	/^	int tunnel_on = dump_config->tunnel.tunnel_on;$/;"	l
tunnel_on	main.c	/^int tunnel_on = 0;$/;"	v
tunnel_on	vpn_config.h	/^	int		tunnel_on;$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_on	vppnconfig/main.c	/^	char *tunnel_on = GetConfig(conf_tunnel_on);$/;"	l
tunnel_on	vppnconfig/main.c	/^	char tunnel_on[100] = "0";$/;"	l
tunnel_peers	bird_conf.c	/^		cJSON *tunnel_peers = read_json_from_file(temp_bird_peers_file);$/;"	l
tunnel_peers_cnt	bird_conf.c	/^			int tunnel_peers_cnt = cJSON_GetArraySize(tunnel_peers);$/;"	l
tunnel_res	cgi/main.c	/^						cJSON* tunnel_res = net_tool_tcp_json_client_with_size(target_host, i + VPNCTRL_SERVER_BASE, req, "json", strlen("json"));$/;"	l
tunnel_sleep_intr	main.c	/^int tunnel_sleep_intr(int timeout, int need_reset)$/;"	f	signature:(int timeout, int need_reset)
tunnel_sleep_waiton	main.c	/^void tunnel_sleep_waiton()$/;"	f
tunnel_stat	main.c	/^		int tunnel_stat;$/;"	l
tunnel_status_item	ctrl_server_json.c	/^	cJSON *tunnel_status_item = cJSON_GetObjectItem(status, "tunnel_status");$/;"	l
tunnel_teamid	vppnconfig/main.c	/^	char *tunnel_teamid = GetConfig(conf_tunnel_teamid);$/;"	l
tunnel_teamid	vppnconfig/main.c	/^	char tunnel_teamid[100]="";$/;"	l
tunnel_type	vpn_config.h	/^	int							tunnel_type;	\/* 0 for vpn, 1 for vppn *\/$/;"	m	struct:vpn_config_s	access:public
tunnel_type	vpn_config.h	/^	int		tunnel_type;		\/* 0:game, 1:web and more in future *\/$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_vpath	vppnconfig/main.c	/^		cJSON *tunnel_vpath = parse_tunnel_vpath(vpath, conf_type);$/;"	l
tunnel_vpath	vppnconfig/main.c	/^	cJSON *tunnel_vpath = read_json_from_file(conf_vpath_file);$/;"	l
tunnel_vpn_country	vpn_config.h	/^	char	tunnel_vpn_country[32];$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_vpn_server	vpn_config.h	/^	char	tunnel_vpn_server[32];	\/* if in non-auto_mode, the vpn will$/;"	m	struct:vpn_tunnel_s	access:public
tunnel_vpn_server_port	vpn_config.h	/^	char	tunnel_vpn_server_port[32];$/;"	m	struct:vpn_tunnel_s	access:public
tv	ctrl_server.c	/^		struct timeval tv;$/;"	l
tval	cgi/net_tool.c	/^				struct timeval *tval= (struct timeval *)icmp->icmp_data;$/;"	l
tval	cgi/net_tool.c	/^	struct timeval *tval;$/;"	l
tval	client_tool/net_tool.c	/^				struct timeval *tval= (struct timeval *)icmp->icmp_data;$/;"	l
tval	client_tool/net_tool.c	/^	struct timeval *tval;$/;"	l
tval	net_tool.c	/^				struct timeval *tval= (struct timeval *)icmp->icmp_data;$/;"	l
tval	net_tool.c	/^	struct timeval *tval;$/;"	l
tval	vppnconfig/net_tool.c	/^	struct timeval *tval;$/;"	l
type	cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
type	cgi/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
type	cgi/net_tool.c	/^	int type , datalen , len;$/;"	l
type	client_tool/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
type	client_tool/net_tool.c	/^	int type , datalen , len;$/;"	l
type	net_tool.c	/^	int type , datalen , len;$/;"	l
type	vpn_config.h	/^	char	type[32];$/;"	m	struct:vpn_package_s	access:public
type	vppnconfig/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON	access:public
type_item	main.c	/^						cJSON *type_item = cJSON_GetObjectItem(other_item, "type");$/;"	l
type_item	main.c	/^				cJSON *type_item = cJSON_GetObjectItem(other_item, "type");$/;"	l
uc	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc2	cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc2	cgi/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc2	client_tool/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
uc2	vppnconfig/cJSON.c	/^	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;$/;"	l
udp_confirmed	ctrl_server_json.c	/^    unsigned int udp_confirmed:1;           \/* 1 if the address is one that we received UDP traffic on *\/$/;"	m	struct:node_status_t	file:	access:public
udppacket	ctrl_server_json.c	/^    unsigned int udppacket:1;       \/* 1 if the most recently received packet was UDP *\/$/;"	m	struct:node_status_t	file:	access:public
unset_ret	main.c	/^	int unset_ret = 0;$/;"	l
unused	ctrl_server_json.c	/^    unsigned int unused:20;$/;"	m	struct:node_status_t	file:	access:public
unused_active	ctrl_server_json.c	/^    unsigned int unused_active:1;           \/* 1 if active (not used for nodes) *\/$/;"	m	struct:node_status_t	file:	access:public
update	cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:	signature:(printbuffer *p)
update	cgi/cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:	signature:(printbuffer *p)
update	client_tool/cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:	signature:(printbuffer *p)
update	vppnconfig/cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:	signature:(printbuffer *p)
update_attach_device	attachdevice.c	/^void *update_attach_device(void *arg)$/;"	f	signature:(void *arg)
update_vpn_peers	ctrl_server_json.c	/^void update_vpn_peers()$/;"	f
update_vpn_status	main.c	/^extern void update_vpn_status();$/;"	p	file:
uri	ctrl_server_json.c	/^		char *uri = uri_item->valuestring;$/;"	l
uri	ctrl_server_json.c	/^	char *uri = uri_item->valuestring;$/;"	l
uri	vppnconfig/main.c	/^			char *uri = NULL;$/;"	l
uri	vppnconfig/main.c	/^	char *uri = NULL;$/;"	l
uri_check_illegal	ctrl_server_json.c	/^static int uri_check_illegal(char *uri)$/;"	f	file:	signature:(char *uri)
uri_item	ctrl-interface.c	/^		cJSON *uri_item = cJSON_GetArrayItem(whitelist, i);$/;"	l
uri_item	ctrl-interface.c	/^		cJSON *uri_item = cJSON_GetObjectItem(one_path, "uri");$/;"	l
uri_item	ctrl_server_json.c	/^		cJSON *uri_item = cJSON_GetObjectItem(item, "uri");$/;"	l
uri_item	ctrl_server_json.c	/^	cJSON *uri_item = cJSON_GetObjectItem(jsonreq, "uri");$/;"	l
uri_item	vppnconfig/main.c	/^			cJSON *uri_item = cJSON_GetObjectItem(one_item, "uri");$/;"	l
uri_item	vppnconfig/main.c	/^		cJSON *uri_item = cJSON_GetObjectItem(item, "uri");$/;"	l
uri_item	vppnconfig/main.c	/^	cJSON *uri_item = cJSON_GetObjectItem(obj, "uri");$/;"	l
use_buf	cgi/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
use_buf	client_tool/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
use_buf	net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
use_buf	vppnconfig/net_tool.c	/^	char use_buf[20];$/;"	m	struct:route_info	file:	access:public
used_time	cgi/net_tool.c	/^	double used_time = 0;$/;"	l
used_time	cgi/net_tool.c	/^	double used_time;$/;"	l
used_time	cgi/net_tool.c	/^    double used_time = 0;$/;"	l
used_time	client_tool/net_tool.c	/^	double used_time = 0;$/;"	l
used_time	client_tool/net_tool.c	/^	double used_time;$/;"	l
used_time	client_tool/net_tool.c	/^    double used_time = 0;$/;"	l
used_time	net_tool.c	/^	double used_time = 0;$/;"	l
used_time	net_tool.c	/^	double used_time;$/;"	l
used_time	net_tool.c	/^    double used_time = 0;$/;"	l
used_time	vppnconfig/net_tool.c	/^	double used_time = 0;$/;"	l
used_time	vppnconfig/net_tool.c	/^    double used_time = 0;$/;"	l
v_interface	bird_conf.c	/^	char v_interface[100];$/;"	l
validkey	ctrl_server_json.c	/^    unsigned int validkey:1;                \/* 1 if we currently have a valid key for him *\/$/;"	m	struct:node_status_t	file:	access:public
validkey_in	ctrl_server_json.c	/^    unsigned int validkey_in:1;     \/* 1 if we have sent a valid key to him *\/$/;"	m	struct:node_status_t	file:	access:public
value	ctrl_server_json.c	/^    unsigned int value = 0;$/;"	l
value	vppnconfig/main.c	/^	char value[100];$/;"	l
valuedouble	cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valuedouble	cgi/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valuedouble	client_tool/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valuedouble	vppnconfig/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valueint	cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valueint	cgi/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valueint	client_tool/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valueint	vppnconfig/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON	access:public
valuestring	cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
valuestring	cgi/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
valuestring	client_tool/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
valuestring	vppnconfig/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON	access:public
vendor_name	ctrl_server_json.c	/^	char vendor_name[200] = "";$/;"	l
vip	ctrl_server_json.c	/^					char vip[100] = "";$/;"	l
vip_item	ctrl_server_json.c	/^		cJSON *vip_item = cJSON_GetObjectItem(new_item, "peer_vip");$/;"	l
vip_item	ctrl_server_json.c	/^	cJSON *vip_item = cJSON_GetObjectItem(jsonreq, "vip");$/;"	l
vip_item	vppnconfig/main.c	/^	cJSON *vip_item = cJSON_GetObjectItem(peer, "peer_vip");$/;"	l
visited	ctrl_server_json.c	/^    unsigned int visited:1;                 \/* 1 if this node has been visited by one of the graph algorithms *\/$/;"	m	struct:node_status_t	file:	access:public
vpath	ctrl-interface.c	/^	cJSON *vpath = read_json_from_file(vpath_conf_file);$/;"	l
vpath	vppnconfig/main.c	/^	char *vpath;$/;"	l
vpath_cnt	ctrl-interface.c	/^	int vpath_cnt = cJSON_GetArraySize(vpath);$/;"	l
vpath_cnt	ctrl_server_json.c	/^	int vpath_cnt = cJSON_GetArraySize(list_item);$/;"	l
vpath_cnt	ctrl_server_json.c	/^	int vpath_cnt = cJSON_GetArraySize(vpath_json);$/;"	l
vpath_cnt	vppnconfig/main.c	/^		int vpath_cnt = cJSON_GetArraySize(tunnel_vpath);$/;"	l
vpath_cnt	vppnconfig/main.c	/^	int vpath_cnt = get_vpath_cnt(id);$/;"	l
vpath_conf	vppnconfig/main.c	/^			char *vpath_conf = NULL;$/;"	l
vpath_conf_file	ctrl-interface.c	/^	char vpath_conf_file[100];$/;"	l
vpath_file	ctrl_server_json.c	/^		char vpath_file[100];$/;"	l
vpath_file	ctrl_server_json.c	/^	char vpath_file[100];$/;"	l
vpath_json	ctrl_server_json.c	/^		cJSON *vpath_json = read_json_from_file(vpath_file);$/;"	l
vpath_json	ctrl_server_json.c	/^	cJSON *vpath_json = read_json_from_file(vpath_file);$/;"	l
vpath_switch_conf	ctrl_server_json.c	/^	char vpath_switch_conf[100];$/;"	l
vpn_action	vpn_config.h	/^enum vpn_action$/;"	g
vpn_cloud_tool	vpn_cloud.c	/^cJSON *vpn_cloud_tool(cJSON *req, char *cloud_host, int cloud_port, char *uri)$/;"	f	signature:(cJSON *req, char *cloud_host, int cloud_port, char *uri)
vpn_cloud_tool	vpn_cloud.h	/^cJSON *vpn_cloud_tool(cJSON *req, char *cloud_host, int cloud_port, char *uri);$/;"	p	signature:(cJSON *req, char *cloud_host, int cloud_port, char *uri)
vpn_cloud_tool_gzip	vpn_cloud.c	/^cJSON *vpn_cloud_tool_gzip(cJSON *req, char *cloud_host, int cloud_port, char *uri)$/;"	f	signature:(cJSON *req, char *cloud_host, int cloud_port, char *uri)
vpn_cloud_tool_gzip	vpn_cloud.h	/^cJSON *vpn_cloud_tool_gzip(cJSON *req, char *cloud_host, int cloud_port, char *uri);$/;"	p	signature:(cJSON *req, char *cloud_host, int cloud_port, char *uri)
vpn_config_cloud_conf_file	vpn_config.c	/^void vpn_config_cloud_conf_file(char *file_buf, int tunnel, int conf_type)$/;"	f	signature:(char *file_buf, int tunnel, int conf_type)
vpn_config_load	vpn_config.c	/^int vpn_config_load(struct vpn_config_s *config, int argc, char **argv, int *action, int *tunnel_id)$/;"	f	signature:(struct vpn_config_s *config, int argc, char **argv, int *action, int *tunnel_id)
vpn_config_load	vpn_config.h	/^int vpn_config_load(struct vpn_config_s *config, int argc, char **argv, int *action, int *tunnel_id);$/;"	p	signature:(struct vpn_config_s *config, int argc, char **argv, int *action, int *tunnel_id)
vpn_config_load_cloud_config	vpn_config.c	/^int vpn_config_load_cloud_config(struct vpn_config_s *config, char *file_name)$/;"	f	signature:(struct vpn_config_s *config, char *file_name)
vpn_config_load_tunnel_config	vpn_config.c	/^int vpn_config_load_tunnel_config(struct vpn_config_s *config, char *file_name, int tunnel_id)$/;"	f	signature:(struct vpn_config_s *config, char *file_name, int tunnel_id)
vpn_config_load_tunnel_log_config	vpn_config.c	/^void vpn_config_load_tunnel_log_config(struct vpn_config_s *config, int tunnel_id)$/;"	f	signature:(struct vpn_config_s *config, int tunnel_id)
vpn_config_s	vpn_config.h	/^struct vpn_config_s$/;"	s
vpn_config_s::cloud_host	vpn_config.h	/^	char						cloud_host[64];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::cloud_port	vpn_config.h	/^	int							cloud_port;$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::custom_lan_if	vpn_config.h	/^	char						custom_lan_if[32];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::custom_tunnel_dev	vpn_config.h	/^	char						custom_tunnel_dev[32];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::custom_wan_if	vpn_config.h	/^	char						custom_wan_if[32];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::debug	vpn_config.h	/^	int							debug;$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::self_id	vpn_config.h	/^	char						self_id[64];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::team_id	vpn_config.h	/^	char						team_id[64];$/;"	m	struct:vpn_config_s	access:public
vpn_config_s::tunnel	vpn_config.h	/^	struct vpn_tunnel_s			tunnel;$/;"	m	struct:vpn_config_s	typeref:struct:vpn_config_s::vpn_tunnel_s	access:public
vpn_config_s::tunnel_type	vpn_config.h	/^	int							tunnel_type;	\/* 0 for vpn, 1 for vppn *\/$/;"	m	struct:vpn_config_s	access:public
vpn_config_set_self_id	vpn_config.c	/^void vpn_config_set_self_id(struct vpn_config_s *config)$/;"	f	file:	signature:(struct vpn_config_s *config)
vpn_config_tunnel_conf_file	vpn_config.c	/^void vpn_config_tunnel_conf_file(char *file_buf, int tunnel, int conf_type)$/;"	f	signature:(char *file_buf, int tunnel, int conf_type)
vpn_dir_buf	main.c	/^	char vpn_dir_buf[200];$/;"	l
vpn_error_no	vpn_config.h	/^enum vpn_error_no$/;"	g
vpn_hosts_dir_buf	main.c	/^	char vpn_hosts_dir_buf[200];$/;"	l
vpn_ip	vpn_config.h	/^	char	vpn_ip[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_ip_item	main.c	/^				cJSON *vpn_ip_item = cJSON_GetObjectItem(conf, "Subnet");$/;"	l
vpn_ip_item	main.c	/^				cJSON *vpn_ip_item = cJSON_GetObjectItem(response, "Subnet");$/;"	l
vpn_kill_tunnel_by_signal	main.c	/^void vpn_kill_tunnel_by_signal(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_main_loop	main.c	/^int vpn_main_loop(struct vpn_config_s *config)$/;"	f	signature:(struct vpn_config_s *config)
vpn_package_s	vpn_config.h	/^struct vpn_package_s$/;"	s
vpn_package_s::endtime	vpn_config.h	/^	char	endtime[32];$/;"	m	struct:vpn_package_s	access:public
vpn_package_s::flow	vpn_config.h	/^	char	flow[32];$/;"	m	struct:vpn_package_s	access:public
vpn_package_s::mac	vpn_config.h	/^	char	mac[32];$/;"	m	struct:vpn_package_s	access:public
vpn_package_s::type	vpn_config.h	/^	char	type[32];$/;"	m	struct:vpn_package_s	access:public
vpn_peers_lock	ctrl_server_json.c	/^pthread_mutex_t vpn_peers_lock;$/;"	v
vpn_prikey	vpn_config.h	/^	char	vpn_prikey[1024];$/;"	m	struct:vpn_resource_s	access:public
vpn_pubkey	vpn_config.h	/^	char	vpn_pubkey[1024];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s	vpn_config.h	/^struct vpn_resource_s$/;"	s
vpn_resource_s::error	vpn_config.h	/^	int		error;$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::error_code	vpn_config.h	/^	char	error_code[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::resource_id	vpn_config.h	/^	int		resource_id;$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::teamid	vpn_config.h	/^	char	teamid[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_ip	vpn_config.h	/^	char	vpn_ip[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_prikey	vpn_config.h	/^	char	vpn_prikey[1024];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_pubkey	vpn_config.h	/^	char	vpn_pubkey[1024];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_server_host	vpn_config.h	/^	char	vpn_server_host[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_server_port	vpn_config.h	/^	int		vpn_server_port;$/;"	m	struct:vpn_resource_s	access:public
vpn_resource_s::vpn_subnet	vpn_config.h	/^	char	vpn_subnet[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_server_host	vpn_config.h	/^	char	vpn_server_host[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_server_port	vpn_config.h	/^	int		vpn_server_port;$/;"	m	struct:vpn_resource_s	access:public
vpn_start_tunnel	main.c	/^void vpn_start_tunnel(struct vpn_config_s* config, int tunnel_id)$/;"	f	signature:(struct vpn_config_s* config, int tunnel_id)
vpn_start_tunnel_by_signal	main.c	/^void vpn_start_tunnel_by_signal(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_status_lock	ctrl_server_json.c	/^pthread_mutex_t vpn_status_lock;$/;"	v
vpn_stop_tunnel_by_signal	main.c	/^void vpn_stop_tunnel_by_signal(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_subnet	vpn_config.h	/^	char	vpn_subnet[32];$/;"	m	struct:vpn_resource_s	access:public
vpn_tunnel_add_conf	main.c	/^void vpn_tunnel_add_conf(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_add_connect_failtime	main.c	/^void vpn_tunnel_add_connect_failtime(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_add_whitelist	main.c	/^void vpn_tunnel_add_whitelist(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_alive_confirm	main.c	/^int vpn_tunnel_alive_confirm(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type)
vpn_tunnel_check_reachable	main.c	/^int vpn_tunnel_check_reachable(struct vpn_config_s* config)$/;"	f	signature:(struct vpn_config_s* config)
vpn_tunnel_connect	main.c	/^void vpn_tunnel_connect(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_del_conf	main.c	/^void vpn_tunnel_del_conf(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_del_whitelist	main.c	/^void vpn_tunnel_del_whitelist(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_disconnect	main.c	/^void vpn_tunnel_disconnect(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_exit	main.c	/^void vpn_tunnel_exit(struct vpn_tunnel_s* tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s* tunnel, int conf_type)
vpn_tunnel_firewall_monitor_thread	main.c	/^void *vpn_tunnel_firewall_monitor_thread(void *arg)$/;"	f	signature:(void *arg)
vpn_tunnel_get_connect_failtime	main.c	/^int vpn_tunnel_get_connect_failtime(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_get_dnsmasq_file	main.c	/^void vpn_tunnel_get_dnsmasq_file(struct vpn_tunnel_s *tunnel, char *buf)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *buf)
vpn_tunnel_get_dnsmasq_file_by_id	main.c	/^void vpn_tunnel_get_dnsmasq_file_by_id(int tunnel_id, char *buf)$/;"	f	signature:(int tunnel_id, char *buf)
vpn_tunnel_get_gw	main.c	/^char *vpn_tunnel_get_gw(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_get_netmask	main.c	/^void vpn_tunnel_get_netmask(struct vpn_tunnel_s *tunnel, char *buf)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *buf)
vpn_tunnel_get_resource_id	main.c	/^int vpn_tunnel_get_resource_id(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_get_status	main.c	/^int vpn_tunnel_get_status(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_get_whitelist_file	main.c	/^void vpn_tunnel_get_whitelist_file(struct vpn_tunnel_s *tunnel, char *buf)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *buf)
vpn_tunnel_get_whitelist_file_by_id	main.c	/^void vpn_tunnel_get_whitelist_file_by_id(int tunnel_id, char *buf)$/;"	f	signature:(int tunnel_id, char *buf)
vpn_tunnel_heartbeat	main.c	/^int vpn_tunnel_heartbeat(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port ,int server_reachable, int new_status)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port ,int server_reachable, int new_status)
vpn_tunnel_heartbeat_test	main.c	/^int vpn_tunnel_heartbeat_test(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port ,double ping_latency)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port ,double ping_latency)
vpn_tunnel_info_s	vpn_config.h	/^struct vpn_tunnel_info_s$/;"	s
vpn_tunnel_info_s::connect_fail_time	vpn_config.h	/^	int						connect_fail_time;$/;"	m	struct:vpn_tunnel_info_s	access:public
vpn_tunnel_info_s::connect_time	vpn_config.h	/^	int						connect_time;$/;"	m	struct:vpn_tunnel_info_s	access:public
vpn_tunnel_info_s::enable	vpn_config.h	/^	int						enable;$/;"	m	struct:vpn_tunnel_info_s	access:public
vpn_tunnel_info_s::latency	vpn_config.h	/^	double					latency;$/;"	m	struct:vpn_tunnel_info_s	access:public
vpn_tunnel_info_s::package	vpn_config.h	/^	struct vpn_package_s	package;$/;"	m	struct:vpn_tunnel_info_s	typeref:struct:vpn_tunnel_info_s::vpn_package_s	access:public
vpn_tunnel_info_s::resource	vpn_config.h	/^	struct vpn_resource_s	resource;$/;"	m	struct:vpn_tunnel_info_s	typeref:struct:vpn_tunnel_info_s::vpn_resource_s	access:public
vpn_tunnel_info_s::status	vpn_config.h	/^	int						status;$/;"	m	struct:vpn_tunnel_info_s	access:public
vpn_tunnel_latency	main.c	/^double vpn_tunnel_latency(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_load_whitelist	main.c	/^void vpn_tunnel_load_whitelist(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_load_whitelist_by_id	main.c	/^void vpn_tunnel_load_whitelist_by_id(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_load_whitelist_by_signal	main.c	/^void vpn_tunnel_load_whitelist_by_signal(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_tunnel_load_whitelist_conf_by_id	main.c	/^void vpn_tunnel_load_whitelist_conf_by_id(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_pid_file	main.c	/^void vpn_tunnel_pid_file(int tunnel_id, char *buf, int conf_type)$/;"	f	signature:(int tunnel_id, char *buf, int conf_type)
vpn_tunnel_put_resource_to_local	main.c	/^void vpn_tunnel_put_resource_to_local(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_reload_config	vpn_config.c	/^int vpn_tunnel_reload_config(struct vpn_config_s *config, int tunnel_id, int conf_type)$/;"	f	signature:(struct vpn_config_s *config, int tunnel_id, int conf_type)
vpn_tunnel_reload_config	vpn_config.h	/^int vpn_tunnel_reload_config(struct vpn_config_s *config, int tunnel_id, int conf_type);$/;"	p	signature:(struct vpn_config_s *config, int tunnel_id, int conf_type)
vpn_tunnel_reset_connect_failtime	main.c	/^void vpn_tunnel_reset_connect_failtime(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_reset_routes	main.c	/^void vpn_tunnel_reset_routes(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_reset_routes_by_id	main.c	/^void vpn_tunnel_reset_routes_by_id(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_reset_whitelist_conf	main.c	/^void vpn_tunnel_reset_whitelist_conf(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_s	vpn_config.h	/^struct vpn_tunnel_s$/;"	s
vpn_tunnel_s::auto_mode	vpn_config.h	/^	int		auto_mode;			\/* 0:non-auto_mode, 1:auto_mode *\/$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::info	vpn_config.h	/^	struct vpn_tunnel_info_s	info;$/;"	m	struct:vpn_tunnel_s	typeref:struct:vpn_tunnel_s::vpn_tunnel_info_s	access:public
vpn_tunnel_s::last_heartbeat_code	vpn_config.h	/^	int		last_heartbeat_code;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::last_select_code	vpn_config.h	/^	int		last_select_code;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::log_level	vpn_config.h	/^	int							log_level;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::log_on	vpn_config.h	/^	int							log_on;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_dev	vpn_config.h	/^	char	tunnel_dev[32];$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_id	vpn_config.h	/^	int		tunnel_id;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_on	vpn_config.h	/^	int		tunnel_on;$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_type	vpn_config.h	/^	int		tunnel_type;		\/* 0:game, 1:web and more in future *\/$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_vpn_country	vpn_config.h	/^	char	tunnel_vpn_country[32];$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_vpn_server	vpn_config.h	/^	char	tunnel_vpn_server[32];	\/* if in non-auto_mode, the vpn will$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_s::tunnel_vpn_server_port	vpn_config.h	/^	char	tunnel_vpn_server_port[32];$/;"	m	struct:vpn_tunnel_s	access:public
vpn_tunnel_select_resource	main.c	/^int vpn_tunnel_select_resource(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int cloud_cnt, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int cloud_cnt, int conf_type)
vpn_tunnel_select_resource_from_cloud	main.c	/^int vpn_tunnel_select_resource_from_cloud(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type)
vpn_tunnel_select_resource_from_cloud2	main.c	/^int vpn_tunnel_select_resource_from_cloud2(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type, int tunnel_id)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port, int conf_type, int tunnel_id)
vpn_tunnel_select_resource_from_local	main.c	/^int vpn_tunnel_select_resource_from_local(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_set_public_whitelist	main.c	/^int vpn_tunnel_set_public_whitelist(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port)
vpn_tunnel_set_public_whitelist_by_id	main.c	/^int vpn_tunnel_set_public_whitelist_by_id(int tunnel_id, char *user, char *cloud_host, int cloud_port)$/;"	f	signature:(int tunnel_id, char *user, char *cloud_host, int cloud_port)
vpn_tunnel_set_resource_id	main.c	/^void vpn_tunnel_set_resource_id(struct vpn_tunnel_s *tunnel, char *ip_str)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *ip_str)
vpn_tunnel_set_s	vpn_config.h	/^struct vpn_tunnel_set_s$/;"	s
vpn_tunnel_set_s::each_tunnel	vpn_config.h	/^	struct	vpn_tunnel_s*	each_tunnel;$/;"	m	struct:vpn_tunnel_set_s	typeref:struct:vpn_tunnel_set_s::vpn_tunnel_s	access:public
vpn_tunnel_set_s::tunnel_num	vpn_config.h	/^	int						tunnel_num;$/;"	m	struct:vpn_tunnel_set_s	access:public
vpn_tunnel_start_peervpn	main.c	/^void vpn_tunnel_start_peervpn(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_start_peervpn_by_id	main.c	/^void vpn_tunnel_start_peervpn_by_id(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_tunnel_start_tinc	main.c	/^void vpn_tunnel_start_tinc(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_start_tinc_by_id	main.c	/^void vpn_tunnel_start_tinc_by_id(int tunnel_id, int conf_type, struct vpn_tunnel_s *tunnel)$/;"	f	signature:(int tunnel_id, int conf_type, struct vpn_tunnel_s *tunnel)
vpn_tunnel_status	vpn_config.h	/^enum vpn_tunnel_status$/;"	g
vpn_tunnel_stop_peervpn	main.c	/^void vpn_tunnel_stop_peervpn(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_stop_peervpn_by_id	main.c	/^void vpn_tunnel_stop_peervpn_by_id(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_tunnel_stop_tinc	main.c	/^void vpn_tunnel_stop_tinc(struct vpn_tunnel_s *tunnel, int conf_type)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int conf_type)
vpn_tunnel_stop_tinc_by_id	main.c	/^void vpn_tunnel_stop_tinc_by_id(int tunnel_id, int conf_type)$/;"	f	signature:(int tunnel_id, int conf_type)
vpn_tunnel_unload_whitelist	main.c	/^void vpn_tunnel_unload_whitelist(struct vpn_tunnel_s *tunnel)$/;"	f	signature:(struct vpn_tunnel_s *tunnel)
vpn_tunnel_unload_whitelist_by_id	main.c	/^void vpn_tunnel_unload_whitelist_by_id(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_unload_whitelist_conf_by_id	main.c	/^void vpn_tunnel_unload_whitelist_conf_by_id(int tunnel_id)$/;"	f	signature:(int tunnel_id)
vpn_tunnel_unset_public_whitelist	main.c	/^int vpn_tunnel_unset_public_whitelist(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, char *user, char *cloud_host, int cloud_port)
vpn_tunnel_unset_public_whitelist_by_id	main.c	/^int vpn_tunnel_unset_public_whitelist_by_id(int tunnel_id, char *user, char *cloud_host, int cloud_port)$/;"	f	signature:(int tunnel_id, char *user, char *cloud_host, int cloud_port)
vpn_tunnel_update_status	main.c	/^void vpn_tunnel_update_status(struct vpn_tunnel_s *tunnel, int status)$/;"	f	signature:(struct vpn_tunnel_s *tunnel, int status)
vpn_tunnle_public_whitelist_file	main.c	/^void vpn_tunnle_public_whitelist_file(char *buf, int tunnel_id)$/;"	f	signature:(char *buf, int tunnel_id)
vproxy_item	vppnconfig/main.c	/^		cJSON *vproxy_item = cJSON_GetObjectItem(item, "vproxy");$/;"	l
vproxy_item	vppnconfig/main.c	/^	cJSON *vproxy_item = cJSON_GetObjectItem(conf_json, "vpath_tunnel");$/;"	l
vpu_cloud_s	vpn_cloud.h	/^struct vpu_cloud_s$/;"	s
vpu_cloud_s::cloud_host	vpn_cloud.h	/^	char	cloud_host[30];$/;"	m	struct:vpu_cloud_s	access:public
vpu_cloud_s::cloud_port	vpn_cloud.h	/^	int		cloud_port;$/;"	m	struct:vpu_cloud_s	access:public
w	cgi/net_tool.c	/^    unsigned short *w=addr;$/;"	l
w	client_tool/net_tool.c	/^    unsigned short *w=addr;$/;"	l
w	net_tool.c	/^    unsigned short *w=addr;$/;"	l
w	vppnconfig/net_tool.c	/^    unsigned short *w=addr;$/;"	l
waitingforkey	ctrl_server_json.c	/^    unsigned int waitingforkey:1;           \/* 1 if we already sent out a request *\/$/;"	m	struct:node_status_t	file:	access:public
wan_ip	main.c	/^	char wan_ip[100];$/;"	l
wan_ip_buf	ctrl_server_json.c	/^	char wan_ip_buf[32] = "";$/;"	l
wan_item	vpn_config.c	/^		cJSON *wan_item = cJSON_GetObjectItem(custom, "wan_interface");$/;"	l
wan_mac_buf	ctrl_server_json.c	/^	char wan_mac_buf[32] = "";$/;"	l
web	cgi/net_tool.c	/^	char *web = NULL;$/;"	l
web	client_tool/net_tool.c	/^	char *web = NULL;$/;"	l
web	net_tool.c	/^	char *web = NULL;$/;"	l
web	vppnconfig/net_tool.c	/^	char *web = NULL;$/;"	l
web_head	cgi/net_tool.c	/^	char *web_head = "POST %s HTTP\/1.1\\r\\n"$/;"	l
web_head	client_tool/net_tool.c	/^	char *web_head = "POST %s HTTP\/1.1\\r\\n"$/;"	l
web_head	net_tool.c	/^	char *web_head = "POST %s HTTP\/1.1\\r\\n"$/;"	l
web_head	net_tool.c	/^	char *web_head;$/;"	l
web_head	vppnconfig/net_tool.c	/^	char *web_head = "POST %s HTTP\/1.1\\r\\n"$/;"	l
whitelist	ctrl_server_json.c	/^	cJSON *whitelist = get_public_whitelist(dump_config->cloud_host, dump_config->cloud_port, dump_config->tunnel_type, dump_config->tunnel.tunnel_id);$/;"	l
whitelist	main.c	/^	cJSON *whitelist = read_json_from_file(whitelist_conf);$/;"	l
whitelist_conf	main.c	/^	char	whitelist_conf[100];$/;"	l
whitelist_file	main.c	/^	char whitelist_file[200];$/;"	l
whitelist_item	main.c	/^				cJSON *whitelist_item = cJSON_GetObjectItem(root, "whitelist");$/;"	l
window_buf	cgi/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
window_buf	client_tool/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
window_buf	net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
window_buf	vppnconfig/net_tool.c	/^	char window_buf[20];$/;"	m	struct:route_info	file:	access:public
wl	ctrl-interface.c	/^			cJSON *wl = cJSON_GetObjectItem(wl_array, "List");$/;"	l
wl	main.c	/^				cJSON *wl = cJSON_GetObjectItem(wl_array, "List");$/;"	l
wl_array	ctrl-interface.c	/^			cJSON *wl_array = cJSON_GetArrayItem(cloud_ret, i);$/;"	l
wl_array	main.c	/^				cJSON *wl_array = cJSON_GetArrayItem(response, i);$/;"	l
write_bird_conf	bird_conf.c	/^void write_bird_conf(cJSON *peers)$/;"	f	signature:(cJSON *peers)
write_buf	main.c	/^	char write_buf[4096];$/;"	l
write_file	client_tool/file_tool.c	/^void write_file(char *file_name, int mode, void *buf, int size)$/;"	f	signature:(char *file_name, int mode, void *buf, int size)
write_file	file_tool.c	/^void write_file(char *file_name, int mode, void *buf, int size)$/;"	f	signature:(char *file_name, int mode, void *buf, int size)
write_file	vppnconfig/file_tool.c	/^void write_file(char *file_name, int mode, void *buf, int size)$/;"	f	signature:(char *file_name, int mode, void *buf, int size)
write_json_to_file	client_tool/file_tool.c	/^void write_json_to_file(char *file_name, cJSON *json)$/;"	f	signature:(char *file_name, cJSON *json)
write_json_to_file	client_tool/file_tool.h	/^void write_json_to_file(char *file_name, cJSON *json);$/;"	p	signature:(char *file_name, cJSON *json)
write_json_to_file	file_tool.c	/^void write_json_to_file(char *file_name, cJSON *json)$/;"	f	signature:(char *file_name, cJSON *json)
write_json_to_file	file_tool.h	/^void write_json_to_file(char *file_name, cJSON *json);$/;"	p	signature:(char *file_name, cJSON *json)
write_json_to_file	vppnconfig/file_tool.c	/^void write_json_to_file(char *file_name, cJSON *json)$/;"	f	signature:(char *file_name, cJSON *json)
write_json_to_file	vppnconfig/file_tool.h	/^void write_json_to_file(char *file_name, cJSON *json);$/;"	p	signature:(char *file_name, cJSON *json)
write_shell	client_tool/file_tool.c	/^void write_shell(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_shell	client_tool/file_tool.h	/^void write_shell(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
write_shell	file_tool.c	/^void write_shell(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_shell	file_tool.h	/^void write_shell(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
write_shell	vppnconfig/file_tool.c	/^void write_shell(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_shell	vppnconfig/file_tool.h	/^void write_shell(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
write_text	client_tool/file_tool.c	/^void write_text(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_text	client_tool/file_tool.h	/^void write_text(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
write_text	file_tool.c	/^void write_text(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_text	file_tool.h	/^void write_text(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
write_text	vppnconfig/file_tool.c	/^void write_text(char *file_name, char *content)$/;"	f	signature:(char *file_name, char *content)
write_text	vppnconfig/file_tool.h	/^void write_text(char *file_name, char *content);$/;"	p	signature:(char *file_name, char *content)
